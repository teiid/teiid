{
  "swagger": "2.0",
  "schemes": [
    "http"
  ],
  "host": "t213.vg",
  "basePath": "/rest/default",
  "x-hasEquivalentPaths": true,
  "info": {
    "description": "Magento Commerce is the leading provider of open omnichannel innovation.",
    "title": "Magento Enterprise",
    "version": "2.1",
    "x-apisguru-categories": [
      "ecommerce"
    ],
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_magento.com_sites_all_themes_mag_redesign_images_magento-logo.svg"
    },
    "x-origin": [
      {
        "format": "swagger",
        "url": "http://devdocs.magento.com/swagger/schemas/latest-2.1.schema.json",
        "version": "2.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "magento.com"
  },
  "tags": [
    {
      "description": "Store repository interface",
      "name": "storeStoreRepositoryV1"
    },
    {
      "description": "Group repository interface",
      "name": "storeGroupRepositoryV1"
    },
    {
      "description": "Website repository interface",
      "name": "storeWebsiteRepositoryV1"
    },
    {
      "description": "Store config manager interface",
      "name": "storeStoreConfigManagerV1"
    },
    {
      "description": "Currency information acquirer interface",
      "name": "directoryCurrencyInformationAcquirerV1"
    },
    {
      "description": "Country information acquirer interface",
      "name": "directoryCountryInformationAcquirerV1"
    },
    {
      "description": "Interface AttributeSetRepositoryInterface",
      "name": "eavAttributeSetRepositoryV1"
    },
    {
      "description": "Interface AttributeSetManagementInterface",
      "name": "eavAttributeSetManagementV1"
    },
    {
      "description": "Customer group CRUD interface",
      "name": "customerGroupRepositoryV1"
    },
    {
      "description": "Interface for managing customer groups.",
      "name": "customerGroupManagementV1"
    },
    {
      "description": "Interface for retrieval information about customer attributes metadata.",
      "name": "customerCustomerMetadataV1"
    },
    {
      "description": "Interface for retrieval information about customer address attributes metadata.",
      "name": "customerAddressMetadataV1"
    },
    {
      "description": "Customer CRUD interface.",
      "name": "customerCustomerRepositoryV1"
    },
    {
      "description": "Interface for managing customers accounts.",
      "name": "customerAccountManagementV1"
    },
    {
      "description": "Customer address CRUD interface.",
      "name": "customerAddressRepositoryV1"
    },
    {
      "description": "Interface for module service.",
      "name": "backendModuleServiceV1"
    },
    {
      "description": "CMS page CRUD interface.",
      "name": "cmsPageRepositoryV1"
    },
    {
      "description": "CMS block CRUD interface.",
      "name": "cmsBlockRepositoryV1"
    },
    {
      "description": "",
      "name": "catalogProductRepositoryV1"
    },
    {
      "description": "",
      "name": "catalogProductAttributeTypesListV1"
    },
    {
      "description": "Interface RepositoryInterface must be implemented in new model",
      "name": "catalogProductAttributeRepositoryV1"
    },
    {
      "description": "Interface RepositoryInterface must be implemented in new model",
      "name": "catalogCategoryAttributeRepositoryV1"
    },
    {
      "description": "Interface RepositoryInterface must be implemented in new model",
      "name": "catalogCategoryAttributeOptionManagementV1"
    },
    {
      "description": "",
      "name": "catalogProductTypeListV1"
    },
    {
      "description": "",
      "name": "catalogAttributeSetRepositoryV1"
    },
    {
      "description": "",
      "name": "catalogAttributeSetManagementV1"
    },
    {
      "description": "",
      "name": "catalogProductAttributeManagementV1"
    },
    {
      "description": "",
      "name": "catalogProductAttributeGroupRepositoryV1"
    },
    {
      "description": "",
      "name": "catalogProductAttributeOptionManagementV1"
    },
    {
      "description": "",
      "name": "catalogProductMediaAttributeManagementV1"
    },
    {
      "description": "",
      "name": "catalogProductAttributeMediaGalleryManagementV1"
    },
    {
      "description": "",
      "name": "catalogProductTierPriceManagementV1"
    },
    {
      "description": "",
      "name": "catalogCategoryRepositoryV1"
    },
    {
      "description": "",
      "name": "catalogCategoryManagementV1"
    },
    {
      "description": "",
      "name": "catalogProductCustomOptionTypeListV1"
    },
    {
      "description": "",
      "name": "catalogProductCustomOptionRepositoryV1"
    },
    {
      "description": "",
      "name": "catalogProductLinkTypeListV1"
    },
    {
      "description": "",
      "name": "catalogProductLinkManagementV1"
    },
    {
      "description": "Interface Product links handling interface",
      "name": "catalogProductLinkRepositoryV1"
    },
    {
      "description": "",
      "name": "catalogCategoryLinkManagementV1"
    },
    {
      "description": "",
      "name": "catalogCategoryLinkRepositoryV1"
    },
    {
      "description": "Interface ProductWebsiteLinkRepositoryInterface",
      "name": "catalogProductWebsiteLinkRepositoryV1"
    },
    {
      "description": "Interface StockRegistryInterface",
      "name": "catalogInventoryStockRegistryV1"
    },
    {
      "description": "Interface for Management of ProductLink",
      "name": "bundleProductLinkManagementV1"
    },
    {
      "description": "Interface ProductOptionRepositoryInterface",
      "name": "bundleProductOptionRepositoryV1"
    },
    {
      "description": "Interface ProductOptionTypeListInterface",
      "name": "bundleProductOptionTypeListV1"
    },
    {
      "description": "Option manager for bundle products",
      "name": "bundleProductOptionManagementV1"
    },
    {
      "description": "Search API for all requests",
      "name": "searchV1"
    },
    {
      "description": "Interface CartRepositoryInterface",
      "name": "quoteCartRepositoryV1"
    },
    {
      "description": "Interface CartManagementInterface",
      "name": "quoteCartManagementV1"
    },
    {
      "description": "Cart Repository interface for guest carts.",
      "name": "quoteGuestCartRepositoryV1"
    },
    {
      "description": "Cart Management interface for guest carts.",
      "name": "quoteGuestCartManagementV1"
    },
    {
      "description": "Interface ShippingMethodManagementInterface",
      "name": "quoteShippingMethodManagementV1"
    },
    {
      "description": "Interface ShipmentManagementInterface",
      "name": "quoteShipmentEstimationV1"
    },
    {
      "description": "Shipping method management interface for guest carts.",
      "name": "quoteGuestShippingMethodManagementV1"
    },
    {
      "description": "Interface GuestShipmentEstimationInterface",
      "name": "quoteGuestShipmentEstimationV1"
    },
    {
      "description": "Interface CartItemRepositoryInterface",
      "name": "quoteCartItemRepositoryV1"
    },
    {
      "description": "Cart Item repository interface for guest carts.",
      "name": "quoteGuestCartItemRepositoryV1"
    },
    {
      "description": "Interface PaymentMethodManagementInterface",
      "name": "quotePaymentMethodManagementV1"
    },
    {
      "description": "Payment method management interface for guest carts.",
      "name": "quoteGuestPaymentMethodManagementV1"
    },
    {
      "description": "Interface BillingAddressManagementInterface",
      "name": "quoteBillingAddressManagementV1"
    },
    {
      "description": "Billing address management interface for guest carts.",
      "name": "quoteGuestBillingAddressManagementV1"
    },
    {
      "description": "Coupon management service interface.",
      "name": "quoteCouponManagementV1"
    },
    {
      "description": "Coupon management interface for guest carts.",
      "name": "quoteGuestCouponManagementV1"
    },
    {
      "description": "Interface CartTotalRepositoryInterface",
      "name": "quoteCartTotalRepositoryV1"
    },
    {
      "description": "Bundled API to collect totals for cart based on shipping/payment methods and additional data.",
      "name": "quoteGuestCartTotalManagementV1"
    },
    {
      "description": "Cart totals repository interface for guest carts.",
      "name": "quoteGuestCartTotalRepositoryV1"
    },
    {
      "description": "Bundled API to collect totals for cart based on shipping/payment methods and additional data.",
      "name": "quoteCartTotalManagementV1"
    },
    {
      "description": "Order repository interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
      "name": "salesOrderRepositoryV1"
    },
    {
      "description": "Order management interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
      "name": "salesOrderManagementV1"
    },
    {
      "description": "Order address repository interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
      "name": "salesOrderAddressRepositoryV1"
    },
    {
      "description": "Order item repository interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
      "name": "salesOrderItemRepositoryV1"
    },
    {
      "description": "Invoice repository interface. An invoice is a record of the receipt of payment for an order.",
      "name": "salesInvoiceRepositoryV1"
    },
    {
      "description": "Invoice management interface. An invoice is a record of the receipt of payment for an order.",
      "name": "salesInvoiceManagementV1"
    },
    {
      "description": "Invoice comment repository interface. An invoice is a record of the receipt of payment for an order. An invoice can include comments that detail the invoice history.",
      "name": "salesInvoiceCommentRepositoryV1"
    },
    {
      "description": "Interface RefundInvoiceInterface",
      "name": "salesRefundInvoiceV1"
    },
    {
      "description": "Credit memo add comment interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases.",
      "name": "salesCreditmemoManagementV1"
    },
    {
      "description": "Credit memo repository interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases.",
      "name": "salesCreditmemoRepositoryV1"
    },
    {
      "description": "Credit memo comment repository interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases. A credit memo usually includes comments that detail why the credit memo amount was credited to the customer.",
      "name": "salesCreditmemoCommentRepositoryV1"
    },
    {
      "description": "Interface RefundOrderInterface",
      "name": "salesRefundOrderV1"
    },
    {
      "description": "Shipment repository interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package.",
      "name": "salesShipmentRepositoryV1"
    },
    {
      "description": "Shipment management interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package.",
      "name": "salesShipmentManagementV1"
    },
    {
      "description": "Shipment comment repository interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package. A shipment document can contain comments.",
      "name": "salesShipmentCommentRepositoryV1"
    },
    {
      "description": "Shipment track repository interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package.",
      "name": "salesShipmentTrackRepositoryV1"
    },
    {
      "description": "Class ShipOrderInterface",
      "name": "salesShipOrderV1"
    },
    {
      "description": "Transaction repository interface. A transaction is an interaction between a merchant and a customer such as a purchase, a credit, a refund, and so on.",
      "name": "salesTransactionRepositoryV1"
    },
    {
      "description": "Class InvoiceOrderInterface",
      "name": "salesInvoiceOrderV1"
    },
    {
      "description": "Sales rule CRUD interface",
      "name": "salesRuleRuleRepositoryV1"
    },
    {
      "description": "Coupon CRUD interface",
      "name": "salesRuleCouponRepositoryV1"
    },
    {
      "description": "Coupon management interface",
      "name": "salesRuleCouponManagementV1"
    },
    {
      "description": "Interface for managing guest shipping address information",
      "name": "checkoutGuestShippingInformationManagementV1"
    },
    {
      "description": "Interface for managing customer shipping address information",
      "name": "checkoutShippingInformationManagementV1"
    },
    {
      "description": "Interface for quote totals calculation",
      "name": "checkoutTotalsInformationManagementV1"
    },
    {
      "description": "Interface for guest quote totals calculation",
      "name": "checkoutGuestTotalsInformationManagementV1"
    },
    {
      "description": "Interface for managing guest payment information",
      "name": "checkoutGuestPaymentInformationManagementV1"
    },
    {
      "description": "Interface for managing quote payment information",
      "name": "checkoutPaymentInformationManagementV1"
    },
    {
      "description": "Interface LinkRepositoryInterface",
      "name": "downloadableLinkRepositoryV1"
    },
    {
      "description": "Interface SampleRepositoryInterface",
      "name": "downloadableSampleRepositoryV1"
    },
    {
      "description": "Interface CheckoutAgreementsRepositoryInterface",
      "name": "checkoutAgreementsCheckoutAgreementsRepositoryV1"
    },
    {
      "description": "Manage children products of configurable product",
      "name": "configurableProductLinkManagementV1"
    },
    {
      "description": "Interface ConfigurableProductManagementInterface",
      "name": "configurableProductConfigurableProductManagementV1"
    },
    {
      "description": "Manage options of configurable product",
      "name": "configurableProductOptionRepositoryV1"
    },
    {
      "description": "Tax rate CRUD interface.",
      "name": "taxTaxRateRepositoryV1"
    },
    {
      "description": "Tax rule CRUD interface.",
      "name": "taxTaxRuleRepositoryV1"
    },
    {
      "description": "Tax class CRUD interface.",
      "name": "taxTaxClassRepositoryV1"
    },
    {
      "description": "Customer balance(store credit) operations",
      "name": "customerBalanceBalanceManagementV1"
    },
    {
      "description": "Interface GiftCardAccountManagementInterface",
      "name": "giftCardAccountGiftCardAccountManagementV1"
    },
    {
      "description": "Interface GuestGiftCardAccountManagementInterface",
      "name": "giftCardAccountGuestGiftCardAccountManagementV1"
    },
    {
      "description": "Interface ShippingMethodManagementInterface",
      "name": "giftRegistryShippingMethodManagementV1"
    },
    {
      "description": "Interface ShippingMethodManagementInterface",
      "name": "giftRegistryGuestCartShippingMethodManagementV1"
    },
    {
      "description": "Interface CartRepositoryInterface",
      "name": "giftMessageCartRepositoryV1"
    },
    {
      "description": "Interface ItemRepositoryInterface",
      "name": "giftMessageItemRepositoryV1"
    },
    {
      "description": "Interface GuestCartRepositoryInterface",
      "name": "giftMessageGuestCartRepositoryV1"
    },
    {
      "description": "Interface GuestItemRepositoryInterface",
      "name": "giftMessageGuestItemRepositoryV1"
    },
    {
      "description": "Interface WrappingRepositoryInterface",
      "name": "giftWrappingWrappingRepositoryV1"
    },
    {
      "description": "Interface RewardManagementInterface",
      "name": "rewardRewardManagementV1"
    },
    {
      "description": "Interface TrackManagementInterface",
      "name": "rmaTrackManagementV1"
    },
    {
      "description": "Interface RmaRepositoryInterface",
      "name": "rmaRmaRepositoryV1"
    },
    {
      "description": "Interface CommentRepositoryInterface",
      "name": "rmaCommentManagementV1"
    },
    {
      "description": "Interface RmaManagementInterface",
      "name": "rmaRmaManagementV1"
    },
    {
      "description": "Interface RmaAttributesManagementInterface",
      "name": "rmaRmaAttributesManagementV1"
    },
    {
      "description": "Interface providing token generation for Admins",
      "name": "integrationAdminTokenServiceV1"
    },
    {
      "description": "Interface providing token generation for Customers",
      "name": "integrationCustomerTokenServiceV1"
    },
    {
      "description": "Interface GuestPaymentInformationManagementProxyInterface",
      "name": "worldpayGuestPaymentInformationManagementProxyV1"
    }
  ],
  "paths": {
    "/V1/addresses/{addressId}": {
      "delete": {
        "description": "Delete customer address by ID.",
        "operationId": "customerAddressRepositoryV1DeleteByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "addressId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "true on success",
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerAddressRepositoryV1"
        ]
      }
    },
    "/V1/attributeMetadata/customer": {
      "get": {
        "description": "Get all attribute metadata.",
        "operationId": "customerCustomerMetadataV1GetAllAttributesMetadataGet",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/customer-data-attribute-metadata-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerCustomerMetadataV1"
        ]
      }
    },
    "/V1/attributeMetadata/customer/attribute/{attributeCode}": {
      "get": {
        "description": "Retrieve attribute metadata.",
        "operationId": "customerCustomerMetadataV1GetAttributeMetadataGet",
        "parameters": [
          {
            "in": "path",
            "name": "attributeCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-attribute-metadata-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerCustomerMetadataV1"
        ]
      }
    },
    "/V1/attributeMetadata/customer/custom": {
      "get": {
        "description": "Get custom attributes metadata for the given data interface.",
        "operationId": "customerCustomerMetadataV1GetCustomAttributesMetadataGet",
        "parameters": [
          {
            "in": "query",
            "name": "dataInterfaceName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/customer-data-attribute-metadata-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerCustomerMetadataV1"
        ]
      }
    },
    "/V1/attributeMetadata/customer/form/{formCode}": {
      "get": {
        "description": "Retrieve all attributes filtered by form code",
        "operationId": "customerCustomerMetadataV1GetAttributesGet",
        "parameters": [
          {
            "in": "path",
            "name": "formCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/customer-data-attribute-metadata-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerCustomerMetadataV1"
        ]
      }
    },
    "/V1/attributeMetadata/customerAddress": {
      "get": {
        "description": "Get all attribute metadata.",
        "operationId": "customerAddressMetadataV1GetAllAttributesMetadataGet",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/customer-data-attribute-metadata-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerAddressMetadataV1"
        ]
      }
    },
    "/V1/attributeMetadata/customerAddress/attribute/{attributeCode}": {
      "get": {
        "description": "Retrieve attribute metadata.",
        "operationId": "customerAddressMetadataV1GetAttributeMetadataGet",
        "parameters": [
          {
            "in": "path",
            "name": "attributeCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-attribute-metadata-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerAddressMetadataV1"
        ]
      }
    },
    "/V1/attributeMetadata/customerAddress/custom": {
      "get": {
        "description": "Get custom attributes metadata for the given data interface.",
        "operationId": "customerAddressMetadataV1GetCustomAttributesMetadataGet",
        "parameters": [
          {
            "in": "query",
            "name": "dataInterfaceName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/customer-data-attribute-metadata-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerAddressMetadataV1"
        ]
      }
    },
    "/V1/attributeMetadata/customerAddress/form/{formCode}": {
      "get": {
        "description": "Retrieve all attributes filtered by form code",
        "operationId": "customerAddressMetadataV1GetAttributesGet",
        "parameters": [
          {
            "in": "path",
            "name": "formCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/customer-data-attribute-metadata-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerAddressMetadataV1"
        ]
      }
    },
    "/V1/bundle-products/options/add": {
      "post": {
        "description": "Add new option for bundle product",
        "operationId": "bundleProductOptionManagementV1SavePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "option": {
                  "$ref": "#/definitions/bundle-data-option-interface"
                }
              },
              "required": [
                "option"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "bundleProductOptionManagementV1"
        ]
      }
    },
    "/V1/bundle-products/options/types": {
      "get": {
        "description": "Get all types for options for bundle products",
        "operationId": "bundleProductOptionTypeListV1GetItemsGet",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/bundle-data-option-type-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "bundleProductOptionTypeListV1"
        ]
      }
    },
    "/V1/bundle-products/options/{optionId}": {
      "put": {
        "description": "Add new option for bundle product",
        "operationId": "bundleProductOptionManagementV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "optionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "option": {
                  "$ref": "#/definitions/bundle-data-option-interface"
                }
              },
              "required": [
                "option"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "bundleProductOptionManagementV1"
        ]
      }
    },
    "/V1/bundle-products/{productSku}/children": {
      "get": {
        "description": "Get all children for Bundle product",
        "operationId": "bundleProductLinkManagementV1GetChildrenGet",
        "parameters": [
          {
            "in": "path",
            "name": "productSku",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "optionId",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/bundle-data-link-interface"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "bundleProductLinkManagementV1"
        ]
      }
    },
    "/V1/bundle-products/{sku}/links/{id}": {
      "put": {
        "description": "",
        "operationId": "bundleProductLinkManagementV1SaveChildPut",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "linkedProduct": {
                  "$ref": "#/definitions/bundle-data-link-interface"
                }
              },
              "required": [
                "linkedProduct"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "bundleProductLinkManagementV1"
        ]
      }
    },
    "/V1/bundle-products/{sku}/links/{optionId}": {
      "post": {
        "description": "Add child product to specified Bundle option by product sku",
        "operationId": "bundleProductLinkManagementV1AddChildByProductSkuPost",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "optionId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "linkedProduct": {
                  "$ref": "#/definitions/bundle-data-link-interface"
                }
              },
              "required": [
                "linkedProduct"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "bundleProductLinkManagementV1"
        ]
      }
    },
    "/V1/bundle-products/{sku}/options/all": {
      "get": {
        "description": "Get all options for bundle product",
        "operationId": "bundleProductOptionRepositoryV1GetListGet",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/bundle-data-option-interface"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "bundleProductOptionRepositoryV1"
        ]
      }
    },
    "/V1/bundle-products/{sku}/options/{optionId}": {
      "delete": {
        "description": "Remove bundle option",
        "operationId": "bundleProductOptionRepositoryV1DeleteByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "optionId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "bundleProductOptionRepositoryV1"
        ]
      },
      "get": {
        "description": "Get option for bundle product",
        "operationId": "bundleProductOptionRepositoryV1GetGet",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "optionId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/bundle-data-option-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "bundleProductOptionRepositoryV1"
        ]
      }
    },
    "/V1/bundle-products/{sku}/options/{optionId}/children/{childSku}": {
      "delete": {
        "description": "Remove product from Bundle product option",
        "operationId": "bundleProductLinkManagementV1RemoveChildDelete",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "optionId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "childSku",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "bundleProductLinkManagementV1"
        ]
      }
    },
    "/V1/carts/": {
      "post": {
        "description": "Creates an empty cart and quote for a guest.",
        "operationId": "quoteCartManagementV1CreateEmptyCartPost",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Cart ID.",
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCartManagementV1"
        ]
      }
    },
    "/V1/carts/guest-carts/{cartId}/checkGiftCard/{giftCardCode}": {
      "get": {
        "description": "",
        "operationId": "giftCardAccountGuestGiftCardAccountManagementV1CheckGiftCardGet",
        "parameters": [
          {
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "giftCardCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "number"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftCardAccountGuestGiftCardAccountManagementV1"
        ]
      }
    },
    "/V1/carts/guest-carts/{cartId}/giftCards": {
      "post": {
        "description": "",
        "operationId": "giftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPost",
        "parameters": [
          {
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "giftCardAccountData": {
                  "$ref": "#/definitions/gift-card-account-data-gift-card-account-interface"
                }
              },
              "required": [
                "giftCardAccountData"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftCardAccountGuestGiftCardAccountManagementV1"
        ]
      }
    },
    "/V1/carts/guest-carts/{cartId}/giftCards/{giftCardCode}": {
      "delete": {
        "description": "Remove GiftCard Account entity",
        "operationId": "giftCardAccountGuestGiftCardAccountManagementV1DeleteByQuoteIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "giftCardCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftCardAccountGuestGiftCardAccountManagementV1"
        ]
      }
    },
    "/V1/carts/licence": {
      "get": {
        "description": "Lists active checkout agreements.",
        "operationId": "checkoutAgreementsCheckoutAgreementsRepositoryV1GetListGet",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/checkout-agreements-data-agreement-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "checkoutAgreementsCheckoutAgreementsRepositoryV1"
        ]
      }
    },
    "/V1/carts/mine": {
      "get": {
        "description": "Returns information for the cart for a specified customer.",
        "operationId": "quoteCartManagementV1GetCartForCustomerGet",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-cart-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCartManagementV1"
        ]
      },
      "post": {
        "description": "Creates an empty cart and quote for a specified customer.",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Cart ID.",
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCartManagementV1"
        ]
      },
      "put": {
        "description": "Save quote",
        "operationId": "quoteCartRepositoryV1SavePut",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "quote": {
                  "$ref": "#/definitions/quote-data-cart-interface"
                }
              },
              "required": [
                "quote"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCartRepositoryV1"
        ]
      }
    },
    "/V1/carts/mine/balance/apply": {
      "post": {
        "description": "Apply store credit",
        "operationId": "customerBalanceBalanceManagementV1ApplyPost",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerBalanceBalanceManagementV1"
        ]
      }
    },
    "/V1/carts/mine/billing-address": {
      "get": {
        "description": "Returns the billing address for a specified quote.",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-address-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteBillingAddressManagementV1"
        ]
      },
      "post": {
        "description": "Assigns a specified billing address to a specified cart.",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "address": {
                  "$ref": "#/definitions/quote-data-address-interface"
                },
                "useForShipping": {
                  "type": "boolean"
                }
              },
              "required": [
                "address"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Address ID.",
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteBillingAddressManagementV1"
        ]
      }
    },
    "/V1/carts/mine/checkGiftCard/{giftCardCode}": {
      "get": {
        "description": "",
        "operationId": "giftCardAccountGiftCardAccountManagementV1CheckGiftCardGet",
        "parameters": [
          {
            "in": "path",
            "name": "giftCardCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "number"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftCardAccountGiftCardAccountManagementV1"
        ]
      }
    },
    "/V1/carts/mine/collect-totals": {
      "put": {
        "description": "Set shipping/billing methods and additional data for cart and collect totals.",
        "operationId": "quoteCartTotalManagementV1CollectTotalsPut",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "additionalData": {
                  "$ref": "#/definitions/quote-data-totals-additional-data-interface"
                },
                "paymentMethod": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                },
                "shippingCarrierCode": {
                  "description": "The carrier code.",
                  "type": "string"
                },
                "shippingMethodCode": {
                  "description": "The shipping method code.",
                  "type": "string"
                }
              },
              "required": [
                "paymentMethod"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-totals-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCartTotalManagementV1"
        ]
      }
    },
    "/V1/carts/mine/coupons": {
      "delete": {
        "description": "Deletes a coupon from a specified cart.",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCouponManagementV1"
        ]
      },
      "get": {
        "description": "Returns information for a coupon in a specified cart.",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "The coupon code data.",
              "type": "string"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCouponManagementV1"
        ]
      }
    },
    "/V1/carts/mine/coupons/{couponCode}": {
      "put": {
        "description": "Adds a coupon by code to a specified cart.",
        "parameters": [
          {
            "description": "The coupon code data.",
            "in": "path",
            "name": "couponCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCouponManagementV1"
        ]
      }
    },
    "/V1/carts/mine/estimate-shipping-methods": {
      "post": {
        "description": "Estimate shipping by address and return list of available shipping methods",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "address": {
                  "$ref": "#/definitions/quote-data-address-interface"
                }
              },
              "required": [
                "address"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "An array of shipping methods",
              "items": {
                "$ref": "#/definitions/quote-data-shipping-method-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteShipmentEstimationV1"
        ]
      }
    },
    "/V1/carts/mine/estimate-shipping-methods-by-address-id": {
      "post": {
        "description": "Estimate shipping",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "addressId": {
                  "description": "The estimate address id",
                  "type": "integer"
                }
              },
              "required": [
                "addressId"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "An array of shipping methods.",
              "items": {
                "$ref": "#/definitions/quote-data-shipping-method-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteShippingMethodManagementV1"
        ]
      }
    },
    "/V1/carts/mine/gift-message": {
      "get": {
        "description": "Return the gift message for a specified order.",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/gift-message-data-message-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftMessageCartRepositoryV1"
        ]
      },
      "post": {
        "description": "Set the gift message for an entire order.",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "giftMessage": {
                  "$ref": "#/definitions/gift-message-data-message-interface"
                }
              },
              "required": [
                "giftMessage"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftMessageCartRepositoryV1"
        ]
      }
    },
    "/V1/carts/mine/gift-message/{itemId}": {
      "get": {
        "description": "Return the gift message for a specified item in a specified shopping cart.",
        "parameters": [
          {
            "description": "The item ID.",
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/gift-message-data-message-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftMessageItemRepositoryV1"
        ]
      },
      "post": {
        "description": "Set the gift message for a specified item in a specified shopping cart.",
        "parameters": [
          {
            "description": "The item ID.",
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "giftMessage": {
                  "$ref": "#/definitions/gift-message-data-message-interface"
                }
              },
              "required": [
                "giftMessage"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftMessageItemRepositoryV1"
        ]
      }
    },
    "/V1/carts/mine/giftCards": {
      "post": {
        "description": "",
        "operationId": "giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "giftCardAccountData": {
                  "$ref": "#/definitions/gift-card-account-data-gift-card-account-interface"
                }
              },
              "required": [
                "giftCardAccountData"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftCardAccountGiftCardAccountManagementV1"
        ]
      }
    },
    "/V1/carts/mine/giftCards/{giftCardCode}": {
      "delete": {
        "description": "Remove GiftCard Account entity",
        "parameters": [
          {
            "in": "path",
            "name": "giftCardCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftCardAccountGiftCardAccountManagementV1"
        ]
      }
    },
    "/V1/carts/mine/items": {
      "get": {
        "description": "Lists items that are assigned to a specified cart.",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Array of items.",
              "items": {
                "$ref": "#/definitions/quote-data-cart-item-interface"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCartItemRepositoryV1"
        ]
      },
      "post": {
        "description": "Add/update the specified cart item.",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "cartItem": {
                  "$ref": "#/definitions/quote-data-cart-item-interface"
                }
              },
              "required": [
                "cartItem"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-cart-item-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCartItemRepositoryV1"
        ]
      }
    },
    "/V1/carts/mine/items/{itemId}": {
      "delete": {
        "description": "Removes the specified item from the specified cart.",
        "parameters": [
          {
            "description": "The item ID of the item to be removed.",
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCartItemRepositoryV1"
        ]
      },
      "put": {
        "description": "Add/update the specified cart item.",
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "cartItem": {
                  "$ref": "#/definitions/quote-data-cart-item-interface"
                }
              },
              "required": [
                "cartItem"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-cart-item-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCartItemRepositoryV1"
        ]
      }
    },
    "/V1/carts/mine/order": {
      "put": {
        "description": "Places an order for a specified cart.",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "paymentMethod": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Order ID.",
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCartManagementV1"
        ]
      }
    },
    "/V1/carts/mine/payment-information": {
      "get": {
        "description": "Get payment information",
        "operationId": "checkoutPaymentInformationManagementV1GetPaymentInformationGet",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/checkout-data-payment-details-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "checkoutPaymentInformationManagementV1"
        ]
      },
      "post": {
        "description": "Set payment information and place order for a specified cart.",
        "operationId": "checkoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "billingAddress": {
                  "$ref": "#/definitions/quote-data-address-interface"
                },
                "paymentMethod": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                }
              },
              "required": [
                "paymentMethod"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Order ID.",
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "checkoutPaymentInformationManagementV1"
        ]
      }
    },
    "/V1/carts/mine/payment-methods": {
      "get": {
        "description": "Lists available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#PaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Array of payment methods.",
              "items": {
                "$ref": "#/definitions/quote-data-payment-method-interface"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quotePaymentMethodManagementV1"
        ]
      }
    },
    "/V1/carts/mine/selected-payment-method": {
      "get": {
        "description": "Returns the payment method for a specified shopping cart.",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-payment-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quotePaymentMethodManagementV1"
        ]
      },
      "put": {
        "description": "Adds a specified payment method to a specified shopping cart.",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "method": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                }
              },
              "required": [
                "method"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "redirect url or error message.",
              "type": "string"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quotePaymentMethodManagementV1"
        ]
      }
    },
    "/V1/carts/mine/set-payment-information": {
      "post": {
        "description": "Set payment information for a specified cart.",
        "operationId": "checkoutPaymentInformationManagementV1SavePaymentInformationPost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "billingAddress": {
                  "$ref": "#/definitions/quote-data-address-interface"
                },
                "paymentMethod": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                }
              },
              "required": [
                "paymentMethod"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Order ID.",
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "checkoutPaymentInformationManagementV1"
        ]
      }
    },
    "/V1/carts/mine/shipping-information": {
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "addressInformation": {
                  "$ref": "#/definitions/checkout-data-shipping-information-interface"
                }
              },
              "required": [
                "addressInformation"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/checkout-data-payment-details-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "checkoutShippingInformationManagementV1"
        ]
      }
    },
    "/V1/carts/mine/shipping-methods": {
      "get": {
        "description": "Lists applicable shipping methods for a specified quote.",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "An array of shipping methods.",
              "items": {
                "$ref": "#/definitions/quote-data-shipping-method-interface"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteShippingMethodManagementV1"
        ]
      }
    },
    "/V1/carts/mine/totals": {
      "get": {
        "description": "Returns quote totals data for a specified cart.",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-totals-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCartTotalRepositoryV1"
        ]
      }
    },
    "/V1/carts/mine/totals-information": {
      "post": {
        "description": "Calculate quote totals based on address and shipping method.",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "addressInformation": {
                  "$ref": "#/definitions/checkout-data-totals-information-interface"
                }
              },
              "required": [
                "addressInformation"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-totals-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "checkoutTotalsInformationManagementV1"
        ]
      }
    },
    "/V1/carts/search": {
      "get": {
        "description": "Enables administrative users to list carts that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#CartRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "quoteCartRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-cart-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCartRepositoryV1"
        ]
      }
    },
    "/V1/carts/{cartId}": {
      "get": {
        "description": "Enables an administrative user to return information for a specified cart.",
        "operationId": "quoteCartRepositoryV1GetGet",
        "parameters": [
          {
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-cart-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCartRepositoryV1"
        ]
      },
      "put": {
        "description": "Assigns a specified customer to a specified shopping cart.",
        "operationId": "quoteCartManagementV1AssignCustomerPut",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "customerId": {
                  "description": "The customer ID.",
                  "type": "integer"
                },
                "storeId": {
                  "type": "integer"
                }
              },
              "required": [
                "customerId",
                "storeId"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCartManagementV1"
        ]
      }
    },
    "/V1/carts/{cartId}/billing-address": {
      "get": {
        "description": "Returns the billing address for a specified quote.",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-address-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteBillingAddressManagementV1"
        ]
      },
      "post": {
        "description": "Assigns a specified billing address to a specified cart.",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "address": {
                  "$ref": "#/definitions/quote-data-address-interface"
                },
                "useForShipping": {
                  "type": "boolean"
                }
              },
              "required": [
                "address"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Address ID.",
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteBillingAddressManagementV1"
        ]
      }
    },
    "/V1/carts/{cartId}/coupons": {
      "delete": {
        "description": "Deletes a coupon from a specified cart.",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCouponManagementV1"
        ]
      },
      "get": {
        "description": "Returns information for a coupon in a specified cart.",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "The coupon code data.",
              "type": "string"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCouponManagementV1"
        ]
      }
    },
    "/V1/carts/{cartId}/coupons/{couponCode}": {
      "put": {
        "description": "Adds a coupon by code to a specified cart.",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The coupon code data.",
            "in": "path",
            "name": "couponCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCouponManagementV1"
        ]
      }
    },
    "/V1/carts/{cartId}/estimate-shipping-methods": {
      "post": {
        "description": "Estimate shipping by address and return list of available shipping methods",
        "parameters": [
          {
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "address": {
                  "$ref": "#/definitions/quote-data-address-interface"
                }
              },
              "required": [
                "address"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "An array of shipping methods",
              "items": {
                "$ref": "#/definitions/quote-data-shipping-method-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteShipmentEstimationV1"
        ]
      }
    },
    "/V1/carts/{cartId}/estimate-shipping-methods-by-address-id": {
      "post": {
        "description": "Estimate shipping",
        "parameters": [
          {
            "description": "The shopping cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "addressId": {
                  "description": "The estimate address id",
                  "type": "integer"
                }
              },
              "required": [
                "addressId"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "An array of shipping methods.",
              "items": {
                "$ref": "#/definitions/quote-data-shipping-method-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteShippingMethodManagementV1"
        ]
      }
    },
    "/V1/carts/{cartId}/gift-message": {
      "get": {
        "description": "Return the gift message for a specified order.",
        "parameters": [
          {
            "description": "The shopping cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/gift-message-data-message-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftMessageCartRepositoryV1"
        ]
      },
      "post": {
        "description": "Set the gift message for an entire order.",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "giftMessage": {
                  "$ref": "#/definitions/gift-message-data-message-interface"
                }
              },
              "required": [
                "giftMessage"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftMessageCartRepositoryV1"
        ]
      }
    },
    "/V1/carts/{cartId}/gift-message/{itemId}": {
      "get": {
        "description": "Return the gift message for a specified item in a specified shopping cart.",
        "parameters": [
          {
            "description": "The shopping cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The item ID.",
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/gift-message-data-message-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftMessageItemRepositoryV1"
        ]
      },
      "post": {
        "description": "Set the gift message for a specified item in a specified shopping cart.",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The item ID.",
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "giftMessage": {
                  "$ref": "#/definitions/gift-message-data-message-interface"
                }
              },
              "required": [
                "giftMessage"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftMessageItemRepositoryV1"
        ]
      }
    },
    "/V1/carts/{cartId}/giftCards": {
      "put": {
        "description": "",
        "operationId": "giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPut",
        "parameters": [
          {
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "giftCardAccountData": {
                  "$ref": "#/definitions/gift-card-account-data-gift-card-account-interface"
                }
              },
              "required": [
                "giftCardAccountData"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftCardAccountGiftCardAccountManagementV1"
        ]
      }
    },
    "/V1/carts/{cartId}/giftCards/{giftCardCode}": {
      "delete": {
        "description": "Remove GiftCard Account entity",
        "parameters": [
          {
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "giftCardCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftCardAccountGiftCardAccountManagementV1"
        ]
      }
    },
    "/V1/carts/{cartId}/items": {
      "get": {
        "description": "Lists items that are assigned to a specified cart.",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Array of items.",
              "items": {
                "$ref": "#/definitions/quote-data-cart-item-interface"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCartItemRepositoryV1"
        ]
      }
    },
    "/V1/carts/{cartId}/items/{itemId}": {
      "delete": {
        "description": "Removes the specified item from the specified cart.",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The item ID of the item to be removed.",
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCartItemRepositoryV1"
        ]
      },
      "put": {
        "description": "Add/update the specified cart item.",
        "parameters": [
          {
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "cartItem": {
                  "$ref": "#/definitions/quote-data-cart-item-interface"
                }
              },
              "required": [
                "cartItem"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-cart-item-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCartItemRepositoryV1"
        ]
      }
    },
    "/V1/carts/{cartId}/order": {
      "put": {
        "description": "Places an order for a specified cart.",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "paymentMethod": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Order ID.",
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCartManagementV1"
        ]
      }
    },
    "/V1/carts/{cartId}/payment-methods": {
      "get": {
        "description": "Lists available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#PaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Array of payment methods.",
              "items": {
                "$ref": "#/definitions/quote-data-payment-method-interface"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quotePaymentMethodManagementV1"
        ]
      }
    },
    "/V1/carts/{cartId}/selected-payment-method": {
      "get": {
        "description": "Returns the payment method for a specified shopping cart.",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-payment-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quotePaymentMethodManagementV1"
        ]
      },
      "put": {
        "description": "Adds a specified payment method to a specified shopping cart.",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "method": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                }
              },
              "required": [
                "method"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "redirect url or error message.",
              "type": "string"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quotePaymentMethodManagementV1"
        ]
      }
    },
    "/V1/carts/{cartId}/shipping-information": {
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "addressInformation": {
                  "$ref": "#/definitions/checkout-data-shipping-information-interface"
                }
              },
              "required": [
                "addressInformation"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/checkout-data-payment-details-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "checkoutShippingInformationManagementV1"
        ]
      }
    },
    "/V1/carts/{cartId}/shipping-methods": {
      "get": {
        "description": "Lists applicable shipping methods for a specified quote.",
        "parameters": [
          {
            "description": "The shopping cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "An array of shipping methods.",
              "items": {
                "$ref": "#/definitions/quote-data-shipping-method-interface"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteShippingMethodManagementV1"
        ]
      }
    },
    "/V1/carts/{cartId}/totals": {
      "get": {
        "description": "Returns quote totals data for a specified cart.",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-totals-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCartTotalRepositoryV1"
        ]
      }
    },
    "/V1/carts/{cartId}/totals-information": {
      "post": {
        "description": "Calculate quote totals based on address and shipping method.",
        "parameters": [
          {
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "addressInformation": {
                  "$ref": "#/definitions/checkout-data-totals-information-interface"
                }
              },
              "required": [
                "addressInformation"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-totals-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "checkoutTotalsInformationManagementV1"
        ]
      }
    },
    "/V1/carts/{quoteId}/giftCards": {
      "get": {
        "description": "Return GiftCard Account cards",
        "operationId": "giftCardAccountGiftCardAccountManagementV1GetListByQuoteIdGet",
        "parameters": [
          {
            "in": "path",
            "name": "quoteId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/gift-card-account-data-gift-card-account-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftCardAccountGiftCardAccountManagementV1"
        ]
      }
    },
    "/V1/carts/{quoteId}/items": {
      "post": {
        "description": "Add/update the specified cart item.",
        "parameters": [
          {
            "in": "path",
            "name": "quoteId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "cartItem": {
                  "$ref": "#/definitions/quote-data-cart-item-interface"
                }
              },
              "required": [
                "cartItem"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-cart-item-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCartItemRepositoryV1"
        ]
      }
    },
    "/V1/categories": {
      "get": {
        "description": "Retrieve list of categories",
        "operationId": "catalogCategoryManagementV1GetTreeGet",
        "parameters": [
          {
            "in": "query",
            "name": "rootCategoryId",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "depth",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-category-tree-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogCategoryManagementV1"
        ]
      },
      "post": {
        "description": "Create category service",
        "operationId": "catalogCategoryRepositoryV1SavePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "category": {
                  "$ref": "#/definitions/catalog-data-category-interface"
                }
              },
              "required": [
                "category"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-category-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogCategoryRepositoryV1"
        ]
      }
    },
    "/V1/categories/attributes": {
      "get": {
        "description": "Retrieve all attributes for entity type",
        "operationId": "catalogCategoryAttributeRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-category-attribute-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogCategoryAttributeRepositoryV1"
        ]
      }
    },
    "/V1/categories/attributes/{attributeCode}": {
      "get": {
        "description": "Retrieve specific attribute",
        "operationId": "catalogCategoryAttributeRepositoryV1GetGet",
        "parameters": [
          {
            "in": "path",
            "name": "attributeCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-category-attribute-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogCategoryAttributeRepositoryV1"
        ]
      }
    },
    "/V1/categories/attributes/{attributeCode}/options": {
      "get": {
        "description": "Retrieve list of attribute options",
        "operationId": "catalogCategoryAttributeOptionManagementV1GetItemsGet",
        "parameters": [
          {
            "in": "path",
            "name": "attributeCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/eav-data-attribute-option-interface"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogCategoryAttributeOptionManagementV1"
        ]
      }
    },
    "/V1/categories/{categoryId}": {
      "delete": {
        "description": "Delete category by identifier",
        "operationId": "catalogCategoryRepositoryV1DeleteByIdentifierDelete",
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Will returned True if deleted",
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogCategoryRepositoryV1"
        ]
      },
      "get": {
        "description": "Get info about category by category id",
        "operationId": "catalogCategoryRepositoryV1GetGet",
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-category-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogCategoryRepositoryV1"
        ]
      }
    },
    "/V1/categories/{categoryId}/move": {
      "put": {
        "description": "Move category",
        "operationId": "catalogCategoryManagementV1MovePut",
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "afterId": {
                  "type": "integer"
                },
                "parentId": {
                  "type": "integer"
                }
              },
              "required": [
                "parentId"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogCategoryManagementV1"
        ]
      }
    },
    "/V1/categories/{categoryId}/products": {
      "get": {
        "description": "Get products assigned to category",
        "operationId": "catalogCategoryLinkManagementV1GetAssignedProductsGet",
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/catalog-data-category-product-link-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogCategoryLinkManagementV1"
        ]
      },
      "post": {
        "description": "Assign a product to the required category",
        "operationId": "catalogCategoryLinkRepositoryV1SavePost",
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "productLink": {
                  "$ref": "#/definitions/catalog-data-category-product-link-interface"
                }
              },
              "required": [
                "productLink"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "will returned True if assigned",
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogCategoryLinkRepositoryV1"
        ]
      },
      "put": {
        "description": "Assign a product to the required category",
        "operationId": "catalogCategoryLinkRepositoryV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "productLink": {
                  "$ref": "#/definitions/catalog-data-category-product-link-interface"
                }
              },
              "required": [
                "productLink"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "will returned True if assigned",
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogCategoryLinkRepositoryV1"
        ]
      }
    },
    "/V1/categories/{categoryId}/products/{sku}": {
      "delete": {
        "description": "Remove the product assignment from the category by category id and sku",
        "operationId": "catalogCategoryLinkRepositoryV1DeleteByIdsDelete",
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "will returned True if products successfully deleted",
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogCategoryLinkRepositoryV1"
        ]
      }
    },
    "/V1/categories/{id}": {
      "put": {
        "description": "Create category service",
        "operationId": "catalogCategoryRepositoryV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "category": {
                  "$ref": "#/definitions/catalog-data-category-interface"
                }
              },
              "required": [
                "category"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-category-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogCategoryRepositoryV1"
        ]
      }
    },
    "/V1/cmsBlock": {
      "post": {
        "description": "Save block.",
        "operationId": "cmsBlockRepositoryV1SavePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "block": {
                  "$ref": "#/definitions/cms-data-block-interface"
                }
              },
              "required": [
                "block"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/cms-data-block-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "cmsBlockRepositoryV1"
        ]
      }
    },
    "/V1/cmsBlock/search": {
      "get": {
        "description": "Retrieve blocks matching the specified criteria.",
        "operationId": "cmsBlockRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/cms-data-block-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "cmsBlockRepositoryV1"
        ]
      }
    },
    "/V1/cmsBlock/{blockId}": {
      "delete": {
        "description": "Delete block by ID.",
        "operationId": "cmsBlockRepositoryV1DeleteByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "blockId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "true on success",
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "cmsBlockRepositoryV1"
        ]
      },
      "get": {
        "description": "Retrieve block.",
        "operationId": "cmsBlockRepositoryV1GetByIdGet",
        "parameters": [
          {
            "in": "path",
            "name": "blockId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/cms-data-block-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "cmsBlockRepositoryV1"
        ]
      }
    },
    "/V1/cmsBlock/{id}": {
      "put": {
        "description": "Save block.",
        "operationId": "cmsBlockRepositoryV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "block": {
                  "$ref": "#/definitions/cms-data-block-interface"
                }
              },
              "required": [
                "block"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/cms-data-block-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "cmsBlockRepositoryV1"
        ]
      }
    },
    "/V1/cmsPage": {
      "post": {
        "description": "Save page.",
        "operationId": "cmsPageRepositoryV1SavePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "page": {
                  "$ref": "#/definitions/cms-data-page-interface"
                }
              },
              "required": [
                "page"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/cms-data-page-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "cmsPageRepositoryV1"
        ]
      }
    },
    "/V1/cmsPage/search": {
      "get": {
        "description": "Retrieve pages matching the specified criteria.",
        "operationId": "cmsPageRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/cms-data-page-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "cmsPageRepositoryV1"
        ]
      }
    },
    "/V1/cmsPage/{id}": {
      "put": {
        "description": "Save page.",
        "operationId": "cmsPageRepositoryV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "page": {
                  "$ref": "#/definitions/cms-data-page-interface"
                }
              },
              "required": [
                "page"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/cms-data-page-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "cmsPageRepositoryV1"
        ]
      }
    },
    "/V1/cmsPage/{pageId}": {
      "delete": {
        "description": "Delete page by ID.",
        "operationId": "cmsPageRepositoryV1DeleteByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "pageId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "true on success",
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "cmsPageRepositoryV1"
        ]
      },
      "get": {
        "description": "Retrieve page.",
        "operationId": "cmsPageRepositoryV1GetByIdGet",
        "parameters": [
          {
            "in": "path",
            "name": "pageId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/cms-data-page-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "cmsPageRepositoryV1"
        ]
      }
    },
    "/V1/configurable-products/variation": {
      "put": {
        "description": "Generate variation based on same product",
        "operationId": "configurableProductConfigurableProductManagementV1GenerateVariationPut",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "options": {
                  "items": {
                    "$ref": "#/definitions/configurable-product-data-option-interface"
                  },
                  "type": "array"
                },
                "product": {
                  "$ref": "#/definitions/catalog-data-product-interface"
                }
              },
              "required": [
                "product",
                "options"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/catalog-data-product-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "configurableProductConfigurableProductManagementV1"
        ]
      }
    },
    "/V1/configurable-products/{sku}/child": {
      "post": {
        "description": "",
        "operationId": "configurableProductLinkManagementV1AddChildPost",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "childSku": {
                  "type": "string"
                }
              },
              "required": [
                "childSku"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "configurableProductLinkManagementV1"
        ]
      }
    },
    "/V1/configurable-products/{sku}/children": {
      "get": {
        "description": "Get all children for Configurable product",
        "operationId": "configurableProductLinkManagementV1GetChildrenGet",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/catalog-data-product-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "configurableProductLinkManagementV1"
        ]
      }
    },
    "/V1/configurable-products/{sku}/children/{childSku}": {
      "delete": {
        "description": "Remove configurable product option",
        "operationId": "configurableProductLinkManagementV1RemoveChildDelete",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "childSku",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "configurableProductLinkManagementV1"
        ]
      }
    },
    "/V1/configurable-products/{sku}/options": {
      "post": {
        "description": "Save option",
        "operationId": "configurableProductOptionRepositoryV1SavePost",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "option": {
                  "$ref": "#/definitions/configurable-product-data-option-interface"
                }
              },
              "required": [
                "option"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "configurableProductOptionRepositoryV1"
        ]
      }
    },
    "/V1/configurable-products/{sku}/options/all": {
      "get": {
        "description": "Get all options for configurable product",
        "operationId": "configurableProductOptionRepositoryV1GetListGet",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/configurable-product-data-option-interface"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "configurableProductOptionRepositoryV1"
        ]
      }
    },
    "/V1/configurable-products/{sku}/options/{id}": {
      "delete": {
        "description": "Remove option from configurable product",
        "operationId": "configurableProductOptionRepositoryV1DeleteByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "configurableProductOptionRepositoryV1"
        ]
      },
      "get": {
        "description": "Get option for configurable product",
        "operationId": "configurableProductOptionRepositoryV1GetGet",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/configurable-product-data-option-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "configurableProductOptionRepositoryV1"
        ]
      },
      "put": {
        "description": "Save option",
        "operationId": "configurableProductOptionRepositoryV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "option": {
                  "$ref": "#/definitions/configurable-product-data-option-interface"
                }
              },
              "required": [
                "option"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "configurableProductOptionRepositoryV1"
        ]
      }
    },
    "/V1/coupons": {
      "post": {
        "description": "Save a coupon.",
        "operationId": "salesRuleCouponRepositoryV1SavePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "coupon": {
                  "$ref": "#/definitions/sales-rule-data-coupon-interface"
                }
              },
              "required": [
                "coupon"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-rule-data-coupon-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesRuleCouponRepositoryV1"
        ]
      }
    },
    "/V1/coupons/deleteByCodes": {
      "post": {
        "description": "Delete coupon by coupon codes.",
        "operationId": "salesRuleCouponManagementV1DeleteByCodesPost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "codes": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "ignoreInvalidCoupons": {
                  "type": "boolean"
                }
              },
              "required": [
                "codes"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-rule-data-coupon-mass-delete-result-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesRuleCouponManagementV1"
        ]
      }
    },
    "/V1/coupons/deleteByIds": {
      "post": {
        "description": "Delete coupon by coupon ids.",
        "operationId": "salesRuleCouponManagementV1DeleteByIdsPost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "ids": {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                "ignoreInvalidCoupons": {
                  "type": "boolean"
                }
              },
              "required": [
                "ids"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-rule-data-coupon-mass-delete-result-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesRuleCouponManagementV1"
        ]
      }
    },
    "/V1/coupons/generate": {
      "post": {
        "description": "Generate coupon for a rule",
        "operationId": "salesRuleCouponManagementV1GeneratePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "couponSpec": {
                  "$ref": "#/definitions/sales-rule-data-coupon-generation-spec-interface"
                }
              },
              "required": [
                "couponSpec"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesRuleCouponManagementV1"
        ]
      }
    },
    "/V1/coupons/search": {
      "get": {
        "description": "Retrieve a coupon using the specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#CouponRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "salesRuleCouponRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-rule-data-coupon-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesRuleCouponRepositoryV1"
        ]
      }
    },
    "/V1/coupons/{couponId}": {
      "delete": {
        "description": "Delete coupon by coupon id.",
        "operationId": "salesRuleCouponRepositoryV1DeleteByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "couponId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "true on success",
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesRuleCouponRepositoryV1"
        ]
      },
      "get": {
        "description": "Get coupon by coupon id.",
        "operationId": "salesRuleCouponRepositoryV1GetByIdGet",
        "parameters": [
          {
            "in": "path",
            "name": "couponId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-rule-data-coupon-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesRuleCouponRepositoryV1"
        ]
      },
      "put": {
        "description": "Save a coupon.",
        "operationId": "salesRuleCouponRepositoryV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "couponId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "coupon": {
                  "$ref": "#/definitions/sales-rule-data-coupon-interface"
                }
              },
              "required": [
                "coupon"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-rule-data-coupon-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesRuleCouponRepositoryV1"
        ]
      }
    },
    "/V1/creditmemo": {
      "post": {
        "description": "Performs persist operations for a specified credit memo.",
        "operationId": "salesCreditmemoRepositoryV1SavePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "entity": {
                  "$ref": "#/definitions/sales-data-creditmemo-interface"
                }
              },
              "required": [
                "entity"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-creditmemo-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesCreditmemoRepositoryV1"
        ]
      }
    },
    "/V1/creditmemo/refund": {
      "post": {
        "description": "Prepare creditmemo to refund and save it.",
        "operationId": "salesCreditmemoManagementV1RefundPost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "creditmemo": {
                  "$ref": "#/definitions/sales-data-creditmemo-interface"
                },
                "offlineRequested": {
                  "type": "boolean"
                }
              },
              "required": [
                "creditmemo"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-creditmemo-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesCreditmemoManagementV1"
        ]
      }
    },
    "/V1/creditmemo/{id}": {
      "get": {
        "description": "Loads a specified credit memo.",
        "operationId": "salesCreditmemoRepositoryV1GetGet",
        "parameters": [
          {
            "description": "The credit memo ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-creditmemo-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesCreditmemoRepositoryV1"
        ]
      },
      "put": {
        "description": "Cancels a specified credit memo.",
        "operationId": "salesCreditmemoManagementV1CancelPut",
        "parameters": [
          {
            "description": "The credit memo ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesCreditmemoManagementV1"
        ]
      }
    },
    "/V1/creditmemo/{id}/comments": {
      "get": {
        "description": "Lists comments for a specified credit memo.",
        "operationId": "salesCreditmemoManagementV1GetCommentsListGet",
        "parameters": [
          {
            "description": "The credit memo ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-creditmemo-comment-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesCreditmemoManagementV1"
        ]
      },
      "post": {
        "description": "Performs persist operations for a specified entity.",
        "operationId": "salesCreditmemoCommentRepositoryV1SavePost",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "entity": {
                  "$ref": "#/definitions/sales-data-creditmemo-comment-interface"
                }
              },
              "required": [
                "entity"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-creditmemo-comment-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesCreditmemoCommentRepositoryV1"
        ]
      }
    },
    "/V1/creditmemo/{id}/emails": {
      "post": {
        "description": "Emails a user a specified credit memo.",
        "operationId": "salesCreditmemoManagementV1NotifyPost",
        "parameters": [
          {
            "description": "The credit memo ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesCreditmemoManagementV1"
        ]
      }
    },
    "/V1/creditmemos": {
      "get": {
        "description": "Lists credit memos that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#CreditmemoRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "salesCreditmemoRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-creditmemo-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesCreditmemoRepositoryV1"
        ]
      }
    },
    "/V1/customerGroups": {
      "post": {
        "description": "Save customer group.",
        "operationId": "customerGroupRepositoryV1SavePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "group": {
                  "$ref": "#/definitions/customer-data-group-interface"
                }
              },
              "required": [
                "group"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-group-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerGroupRepositoryV1"
        ]
      }
    },
    "/V1/customerGroups/default": {
      "get": {
        "description": "Get default customer group.",
        "parameters": [
          {
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-group-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerGroupManagementV1"
        ]
      }
    },
    "/V1/customerGroups/default/{storeId}": {
      "get": {
        "description": "Get default customer group.",
        "parameters": [
          {
            "in": "path",
            "name": "storeId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-group-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerGroupManagementV1"
        ]
      }
    },
    "/V1/customerGroups/search": {
      "get": {
        "description": "Retrieve customer groups. The list of groups can be filtered to exclude the NOT_LOGGED_IN group using the first parameter and/or it can be filtered by tax class. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#GroupRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "customerGroupRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-group-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerGroupRepositoryV1"
        ]
      }
    },
    "/V1/customerGroups/{id}": {
      "delete": {
        "description": "Delete customer group by ID.",
        "operationId": "customerGroupRepositoryV1DeleteByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "true on success",
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerGroupRepositoryV1"
        ]
      },
      "get": {
        "description": "Get customer group by group ID.",
        "operationId": "customerGroupRepositoryV1GetByIdGet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-group-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerGroupRepositoryV1"
        ]
      },
      "put": {
        "description": "Save customer group.",
        "operationId": "customerGroupRepositoryV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "group": {
                  "$ref": "#/definitions/customer-data-group-interface"
                }
              },
              "required": [
                "group"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-group-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerGroupRepositoryV1"
        ]
      }
    },
    "/V1/customerGroups/{id}/permissions": {
      "get": {
        "description": "Check if customer group can be deleted.",
        "operationId": "customerGroupManagementV1IsReadonlyGet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerGroupManagementV1"
        ]
      }
    },
    "/V1/customers": {
      "post": {
        "description": "Create customer account. Perform necessary business operations like sending email.",
        "operationId": "customerAccountManagementV1CreateAccountPost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "customer": {
                  "$ref": "#/definitions/customer-data-customer-interface"
                },
                "password": {
                  "type": "string"
                },
                "redirectUrl": {
                  "type": "string"
                }
              },
              "required": [
                "customer"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-customer-interface"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerAccountManagementV1"
        ]
      }
    },
    "/V1/customers/addresses/{addressId}": {
      "get": {
        "description": "Retrieve customer address.",
        "operationId": "customerAddressRepositoryV1GetByIdGet",
        "parameters": [
          {
            "in": "path",
            "name": "addressId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-address-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerAddressRepositoryV1"
        ]
      }
    },
    "/V1/customers/confirm": {
      "post": {
        "description": "Resend confirmation email.",
        "operationId": "customerAccountManagementV1ResendConfirmationPost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "email": {
                  "type": "string"
                },
                "redirectUrl": {
                  "type": "string"
                },
                "websiteId": {
                  "type": "integer"
                }
              },
              "required": [
                "email",
                "websiteId"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "true on success",
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerAccountManagementV1"
        ]
      }
    },
    "/V1/customers/isEmailAvailable": {
      "post": {
        "description": "Check if given email is associated with a customer account in given website.",
        "operationId": "customerAccountManagementV1IsEmailAvailablePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "customerEmail": {
                  "type": "string"
                },
                "websiteId": {
                  "description": "If not set, will use the current websiteId",
                  "type": "integer"
                }
              },
              "required": [
                "customerEmail"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerAccountManagementV1"
        ]
      }
    },
    "/V1/customers/me": {
      "get": {
        "description": "Get customer by customer ID.",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-customer-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerCustomerRepositoryV1"
        ]
      },
      "put": {
        "description": "Create or update a customer.",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "customer": {
                  "$ref": "#/definitions/customer-data-customer-interface"
                },
                "passwordHash": {
                  "type": "string"
                }
              },
              "required": [
                "customer"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-customer-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerCustomerRepositoryV1"
        ]
      }
    },
    "/V1/customers/me/activate": {
      "put": {
        "description": "Activate a customer account using a key that was sent in a confirmation email.",
        "operationId": "customerAccountManagementV1ActivateByIdPut",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "confirmationKey": {
                  "type": "string"
                }
              },
              "required": [
                "confirmationKey"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-customer-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerAccountManagementV1"
        ]
      }
    },
    "/V1/customers/me/billingAddress": {
      "get": {
        "description": "Retrieve default billing address for the given customerId.",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-address-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerAccountManagementV1"
        ]
      }
    },
    "/V1/customers/me/password": {
      "put": {
        "description": "Change customer password.",
        "operationId": "customerAccountManagementV1ChangePasswordByIdPut",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "currentPassword": {
                  "type": "string"
                },
                "newPassword": {
                  "type": "string"
                }
              },
              "required": [
                "currentPassword",
                "newPassword"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "true on success",
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerAccountManagementV1"
        ]
      }
    },
    "/V1/customers/me/shippingAddress": {
      "get": {
        "description": "Retrieve default shipping address for the given customerId.",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-address-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerAccountManagementV1"
        ]
      }
    },
    "/V1/customers/password": {
      "put": {
        "description": "Send an email to the customer with a password reset link.",
        "operationId": "customerAccountManagementV1InitiatePasswordResetPut",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "email": {
                  "type": "string"
                },
                "template": {
                  "type": "string"
                },
                "websiteId": {
                  "type": "integer"
                }
              },
              "required": [
                "email",
                "template"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "true on success",
              "type": "boolean"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerAccountManagementV1"
        ]
      }
    },
    "/V1/customers/search": {
      "get": {
        "description": "Retrieve customers which match a specified criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#CustomerRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "customerCustomerRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-customer-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerCustomerRepositoryV1"
        ]
      }
    },
    "/V1/customers/validate": {
      "put": {
        "description": "Validate customer data.",
        "operationId": "customerAccountManagementV1ValidatePut",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "customer": {
                  "$ref": "#/definitions/customer-data-customer-interface"
                }
              },
              "required": [
                "customer"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-validation-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerAccountManagementV1"
        ]
      }
    },
    "/V1/customers/{customerId}": {
      "delete": {
        "description": "Delete customer by ID.",
        "operationId": "customerCustomerRepositoryV1DeleteByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "true on success",
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerCustomerRepositoryV1"
        ]
      },
      "get": {
        "description": "Get customer by customer ID.",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-customer-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerCustomerRepositoryV1"
        ]
      }
    },
    "/V1/customers/{customerId}/billingAddress": {
      "get": {
        "description": "Retrieve default billing address for the given customerId.",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-address-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerAccountManagementV1"
        ]
      }
    },
    "/V1/customers/{customerId}/carts": {
      "post": {
        "description": "Creates an empty cart and quote for a specified customer.",
        "parameters": [
          {
            "description": "The customer ID.",
            "in": "path",
            "name": "customerId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Cart ID.",
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteCartManagementV1"
        ]
      }
    },
    "/V1/customers/{customerId}/confirm": {
      "get": {
        "description": "Gets the account confirmation status.",
        "operationId": "customerAccountManagementV1GetConfirmationStatusGet",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerAccountManagementV1"
        ]
      }
    },
    "/V1/customers/{customerId}/password/resetLinkToken/{resetPasswordLinkToken}": {
      "get": {
        "description": "Check if password reset token is valid.",
        "operationId": "customerAccountManagementV1ValidateResetPasswordLinkTokenGet",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "resetPasswordLinkToken",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "True if the token is valid",
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerAccountManagementV1"
        ]
      }
    },
    "/V1/customers/{customerId}/permissions/readonly": {
      "get": {
        "description": "Check if customer can be deleted.",
        "operationId": "customerAccountManagementV1IsReadonlyGet",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerAccountManagementV1"
        ]
      }
    },
    "/V1/customers/{customerId}/shippingAddress": {
      "get": {
        "description": "Retrieve default shipping address for the given customerId.",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-address-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerAccountManagementV1"
        ]
      }
    },
    "/V1/customers/{email}/activate": {
      "put": {
        "description": "Activate a customer account using a key that was sent in a confirmation email.",
        "operationId": "customerAccountManagementV1ActivatePut",
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "confirmationKey": {
                  "type": "string"
                }
              },
              "required": [
                "confirmationKey"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-customer-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerAccountManagementV1"
        ]
      }
    },
    "/V1/customers/{id}": {
      "put": {
        "description": "Create or update a customer.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "customer": {
                  "$ref": "#/definitions/customer-data-customer-interface"
                },
                "passwordHash": {
                  "type": "string"
                }
              },
              "required": [
                "customer"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-customer-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "customerCustomerRepositoryV1"
        ]
      }
    },
    "/V1/directory/countries": {
      "get": {
        "description": "Get all countries and regions information for the store.",
        "operationId": "directoryCountryInformationAcquirerV1GetCountriesInfoGet",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/directory-data-country-information-interface"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "directoryCountryInformationAcquirerV1"
        ]
      }
    },
    "/V1/directory/countries/{countryId}": {
      "get": {
        "description": "Get country and region information for the store.",
        "operationId": "directoryCountryInformationAcquirerV1GetCountryInfoGet",
        "parameters": [
          {
            "in": "path",
            "name": "countryId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/directory-data-country-information-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "directoryCountryInformationAcquirerV1"
        ]
      }
    },
    "/V1/directory/currency": {
      "get": {
        "description": "Get currency information for the store.",
        "operationId": "directoryCurrencyInformationAcquirerV1GetCurrencyInfoGet",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/directory-data-currency-information-interface"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "directoryCurrencyInformationAcquirerV1"
        ]
      }
    },
    "/V1/eav/attribute-sets": {
      "post": {
        "description": "Create attribute set from data",
        "operationId": "eavAttributeSetManagementV1CreatePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "attributeSet": {
                  "$ref": "#/definitions/eav-data-attribute-set-interface"
                },
                "entityTypeCode": {
                  "type": "string"
                },
                "skeletonId": {
                  "type": "integer"
                }
              },
              "required": [
                "entityTypeCode",
                "attributeSet",
                "skeletonId"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/eav-data-attribute-set-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "eavAttributeSetManagementV1"
        ]
      }
    },
    "/V1/eav/attribute-sets/list": {
      "get": {
        "description": "Retrieve list of Attribute Sets This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#AttributeSetRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "eavAttributeSetRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/eav-data-attribute-set-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "eavAttributeSetRepositoryV1"
        ]
      }
    },
    "/V1/eav/attribute-sets/{attributeSetId}": {
      "delete": {
        "description": "Remove attribute set by given ID",
        "operationId": "eavAttributeSetRepositoryV1DeleteByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "attributeSetId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "eavAttributeSetRepositoryV1"
        ]
      },
      "get": {
        "description": "Retrieve attribute set information based on given ID",
        "operationId": "eavAttributeSetRepositoryV1GetGet",
        "parameters": [
          {
            "in": "path",
            "name": "attributeSetId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/eav-data-attribute-set-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "eavAttributeSetRepositoryV1"
        ]
      },
      "put": {
        "description": "Save attribute set data",
        "operationId": "eavAttributeSetRepositoryV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "attributeSetId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "attributeSet": {
                  "$ref": "#/definitions/eav-data-attribute-set-interface"
                }
              },
              "required": [
                "attributeSet"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/eav-data-attribute-set-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "eavAttributeSetRepositoryV1"
        ]
      }
    },
    "/V1/gift-wrappings": {
      "get": {
        "description": "Return list of gift wrapping data objects based on search criteria",
        "operationId": "giftWrappingWrappingRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/gift-wrapping-data-wrapping-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftWrappingWrappingRepositoryV1"
        ]
      },
      "post": {
        "description": "Create/Update new gift wrapping with data object values",
        "operationId": "giftWrappingWrappingRepositoryV1SavePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/gift-wrapping-data-wrapping-interface"
                },
                "storeId": {
                  "type": "integer"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/gift-wrapping-data-wrapping-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftWrappingWrappingRepositoryV1"
        ]
      }
    },
    "/V1/gift-wrappings/{id}": {
      "delete": {
        "description": "Delete gift wrapping",
        "operationId": "giftWrappingWrappingRepositoryV1DeleteByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftWrappingWrappingRepositoryV1"
        ]
      },
      "get": {
        "description": "Return data object for specified wrapping ID and store.",
        "operationId": "giftWrappingWrappingRepositoryV1GetGet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/gift-wrapping-data-wrapping-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftWrappingWrappingRepositoryV1"
        ]
      }
    },
    "/V1/gift-wrappings/{wrappingId}": {
      "put": {
        "description": "Create/Update new gift wrapping with data object values",
        "operationId": "giftWrappingWrappingRepositoryV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "wrappingId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/gift-wrapping-data-wrapping-interface"
                },
                "storeId": {
                  "type": "integer"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/gift-wrapping-data-wrapping-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftWrappingWrappingRepositoryV1"
        ]
      }
    },
    "/V1/giftregistry/mine/estimate-shipping-methods": {
      "post": {
        "description": "Estimate shipping",
        "operationId": "giftRegistryShippingMethodManagementV1EstimateByRegistryIdPost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "registryId": {
                  "description": "The estimate registry id",
                  "type": "integer"
                }
              },
              "required": [
                "registryId"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "An array of shipping methods.",
              "items": {
                "$ref": "#/definitions/quote-data-shipping-method-interface"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftRegistryShippingMethodManagementV1"
        ]
      }
    },
    "/V1/guest-carts": {
      "post": {
        "description": "Enable an customer or guest user to create an empty cart and quote for an anonymous customer.",
        "operationId": "quoteGuestCartManagementV1CreateEmptyCartPost",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Cart ID.",
              "type": "string"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteGuestCartManagementV1"
        ]
      }
    },
    "/V1/guest-carts/{cartId}": {
      "get": {
        "description": "Enable a guest user to return information for a specified cart.",
        "operationId": "quoteGuestCartRepositoryV1GetGet",
        "parameters": [
          {
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-cart-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteGuestCartRepositoryV1"
        ]
      },
      "put": {
        "description": "Assign a specified customer to a specified shopping cart.",
        "operationId": "quoteGuestCartManagementV1AssignCustomerPut",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "customerId": {
                  "description": "The customer ID.",
                  "type": "integer"
                },
                "storeId": {
                  "type": "integer"
                }
              },
              "required": [
                "customerId",
                "storeId"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteGuestCartManagementV1"
        ]
      }
    },
    "/V1/guest-carts/{cartId}/billing-address": {
      "get": {
        "description": "Return the billing address for a specified quote.",
        "operationId": "quoteGuestBillingAddressManagementV1GetGet",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-address-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteGuestBillingAddressManagementV1"
        ]
      },
      "post": {
        "description": "Assign a specified billing address to a specified cart.",
        "operationId": "quoteGuestBillingAddressManagementV1AssignPost",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "address": {
                  "$ref": "#/definitions/quote-data-address-interface"
                }
              },
              "required": [
                "address"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Address ID.",
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteGuestBillingAddressManagementV1"
        ]
      }
    },
    "/V1/guest-carts/{cartId}/collect-totals": {
      "put": {
        "description": "Set shipping/billing methods and additional data for cart and collect totals for guest.",
        "operationId": "quoteGuestCartTotalManagementV1CollectTotalsPut",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "additionalData": {
                  "$ref": "#/definitions/quote-data-totals-additional-data-interface"
                },
                "paymentMethod": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                },
                "shippingCarrierCode": {
                  "description": "The carrier code.",
                  "type": "string"
                },
                "shippingMethodCode": {
                  "description": "The shipping method code.",
                  "type": "string"
                }
              },
              "required": [
                "paymentMethod"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-totals-interface"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteGuestCartTotalManagementV1"
        ]
      }
    },
    "/V1/guest-carts/{cartId}/coupons": {
      "delete": {
        "description": "Delete a coupon from a specified cart.",
        "operationId": "quoteGuestCouponManagementV1RemoveDelete",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteGuestCouponManagementV1"
        ]
      },
      "get": {
        "description": "Return information for a coupon in a specified cart.",
        "operationId": "quoteGuestCouponManagementV1GetGet",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "The coupon code data.",
              "type": "string"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteGuestCouponManagementV1"
        ]
      }
    },
    "/V1/guest-carts/{cartId}/coupons/{couponCode}": {
      "put": {
        "description": "Add a coupon by code to a specified cart.",
        "operationId": "quoteGuestCouponManagementV1SetPut",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The coupon code data.",
            "in": "path",
            "name": "couponCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteGuestCouponManagementV1"
        ]
      }
    },
    "/V1/guest-carts/{cartId}/estimate-shipping-methods": {
      "post": {
        "description": "Estimate shipping by address and return list of available shipping methods",
        "operationId": "quoteGuestShipmentEstimationV1EstimateByExtendedAddressPost",
        "parameters": [
          {
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "address": {
                  "$ref": "#/definitions/quote-data-address-interface"
                }
              },
              "required": [
                "address"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "An array of shipping methods",
              "items": {
                "$ref": "#/definitions/quote-data-shipping-method-interface"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteGuestShipmentEstimationV1"
        ]
      }
    },
    "/V1/guest-carts/{cartId}/gift-message": {
      "get": {
        "description": "Return the gift message for a specified order.",
        "operationId": "giftMessageGuestCartRepositoryV1GetGet",
        "parameters": [
          {
            "description": "The shopping cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/gift-message-data-message-interface"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftMessageGuestCartRepositoryV1"
        ]
      },
      "post": {
        "description": "Set the gift message for an entire order.",
        "operationId": "giftMessageGuestCartRepositoryV1SavePost",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "giftMessage": {
                  "$ref": "#/definitions/gift-message-data-message-interface"
                }
              },
              "required": [
                "giftMessage"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftMessageGuestCartRepositoryV1"
        ]
      }
    },
    "/V1/guest-carts/{cartId}/gift-message/{itemId}": {
      "get": {
        "description": "Return the gift message for a specified item in a specified shopping cart.",
        "operationId": "giftMessageGuestItemRepositoryV1GetGet",
        "parameters": [
          {
            "description": "The shopping cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The item ID.",
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/gift-message-data-message-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftMessageGuestItemRepositoryV1"
        ]
      },
      "post": {
        "description": "Set the gift message for a specified item in a specified shopping cart.",
        "operationId": "giftMessageGuestItemRepositoryV1SavePost",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The item ID.",
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "giftMessage": {
                  "$ref": "#/definitions/gift-message-data-message-interface"
                }
              },
              "required": [
                "giftMessage"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftMessageGuestItemRepositoryV1"
        ]
      }
    },
    "/V1/guest-carts/{cartId}/items": {
      "get": {
        "description": "List items that are assigned to a specified cart.",
        "operationId": "quoteGuestCartItemRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Array of items.",
              "items": {
                "$ref": "#/definitions/quote-data-cart-item-interface"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteGuestCartItemRepositoryV1"
        ]
      },
      "post": {
        "description": "Add the specified item to the specified cart.",
        "operationId": "quoteGuestCartItemRepositoryV1SavePost",
        "parameters": [
          {
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "cartItem": {
                  "$ref": "#/definitions/quote-data-cart-item-interface"
                }
              },
              "required": [
                "cartItem"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-cart-item-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteGuestCartItemRepositoryV1"
        ]
      }
    },
    "/V1/guest-carts/{cartId}/items/{itemId}": {
      "delete": {
        "description": "Remove the specified item from the specified cart.",
        "operationId": "quoteGuestCartItemRepositoryV1DeleteByIdDelete",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The item ID of the item to be removed.",
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteGuestCartItemRepositoryV1"
        ]
      },
      "put": {
        "description": "Add the specified item to the specified cart.",
        "operationId": "quoteGuestCartItemRepositoryV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "cartItem": {
                  "$ref": "#/definitions/quote-data-cart-item-interface"
                }
              },
              "required": [
                "cartItem"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-cart-item-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteGuestCartItemRepositoryV1"
        ]
      }
    },
    "/V1/guest-carts/{cartId}/order": {
      "put": {
        "description": "Place an order for a specified cart.",
        "operationId": "quoteGuestCartManagementV1PlaceOrderPut",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "paymentMethod": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Order ID.",
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteGuestCartManagementV1"
        ]
      }
    },
    "/V1/guest-carts/{cartId}/payment-information": {
      "get": {
        "description": "Get payment information",
        "operationId": "checkoutGuestPaymentInformationManagementV1GetPaymentInformationGet",
        "parameters": [
          {
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/checkout-data-payment-details-interface"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "checkoutGuestPaymentInformationManagementV1"
        ]
      },
      "post": {
        "description": "Set payment information and place order for a specified cart.",
        "operationId": "checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost",
        "parameters": [
          {
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "billingAddress": {
                  "$ref": "#/definitions/quote-data-address-interface"
                },
                "email": {
                  "type": "string"
                },
                "paymentMethod": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                }
              },
              "required": [
                "email",
                "paymentMethod"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Order ID.",
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "checkoutGuestPaymentInformationManagementV1"
        ]
      }
    },
    "/V1/guest-carts/{cartId}/payment-methods": {
      "get": {
        "description": "List available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#GuestPaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "quoteGuestPaymentMethodManagementV1GetListGet",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Array of payment methods.",
              "items": {
                "$ref": "#/definitions/quote-data-payment-method-interface"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteGuestPaymentMethodManagementV1"
        ]
      }
    },
    "/V1/guest-carts/{cartId}/selected-payment-method": {
      "get": {
        "description": "Return the payment method for a specified shopping cart.",
        "operationId": "quoteGuestPaymentMethodManagementV1GetGet",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-payment-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteGuestPaymentMethodManagementV1"
        ]
      },
      "put": {
        "description": "Add a specified payment method to a specified shopping cart.",
        "operationId": "quoteGuestPaymentMethodManagementV1SetPut",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "method": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                }
              },
              "required": [
                "method"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Payment method ID.",
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteGuestPaymentMethodManagementV1"
        ]
      }
    },
    "/V1/guest-carts/{cartId}/set-payment-information": {
      "post": {
        "description": "Set payment information for a specified cart.",
        "operationId": "checkoutGuestPaymentInformationManagementV1SavePaymentInformationPost",
        "parameters": [
          {
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "billingAddress": {
                  "$ref": "#/definitions/quote-data-address-interface"
                },
                "email": {
                  "type": "string"
                },
                "paymentMethod": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                }
              },
              "required": [
                "email",
                "paymentMethod"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Order ID.",
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "checkoutGuestPaymentInformationManagementV1"
        ]
      }
    },
    "/V1/guest-carts/{cartId}/shipping-information": {
      "post": {
        "description": "",
        "operationId": "checkoutGuestShippingInformationManagementV1SaveAddressInformationPost",
        "parameters": [
          {
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "addressInformation": {
                  "$ref": "#/definitions/checkout-data-shipping-information-interface"
                }
              },
              "required": [
                "addressInformation"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/checkout-data-payment-details-interface"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "checkoutGuestShippingInformationManagementV1"
        ]
      }
    },
    "/V1/guest-carts/{cartId}/shipping-methods": {
      "get": {
        "description": "List applicable shipping methods for a specified quote.",
        "operationId": "quoteGuestShippingMethodManagementV1GetListGet",
        "parameters": [
          {
            "description": "The shopping cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "An array of shipping methods.",
              "items": {
                "$ref": "#/definitions/quote-data-shipping-method-interface"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteGuestShippingMethodManagementV1"
        ]
      }
    },
    "/V1/guest-carts/{cartId}/totals": {
      "get": {
        "description": "Return quote totals data for a specified cart.",
        "operationId": "quoteGuestCartTotalRepositoryV1GetGet",
        "parameters": [
          {
            "description": "The cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-totals-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "quoteGuestCartTotalRepositoryV1"
        ]
      }
    },
    "/V1/guest-carts/{cartId}/totals-information": {
      "post": {
        "description": "Calculate quote totals based on address and shipping method.",
        "operationId": "checkoutGuestTotalsInformationManagementV1CalculatePost",
        "parameters": [
          {
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "addressInformation": {
                  "$ref": "#/definitions/checkout-data-totals-information-interface"
                }
              },
              "required": [
                "addressInformation"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-totals-interface"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "checkoutGuestTotalsInformationManagementV1"
        ]
      }
    },
    "/V1/guest-giftregistry/{cartId}/estimate-shipping-methods": {
      "post": {
        "description": "Estimate shipping",
        "operationId": "giftRegistryGuestCartShippingMethodManagementV1EstimateByRegistryIdPost",
        "parameters": [
          {
            "description": "The shopping cart ID.",
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "registryId": {
                  "description": "The estimate registry id",
                  "type": "integer"
                }
              },
              "required": [
                "registryId"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "An array of shipping methods.",
              "items": {
                "$ref": "#/definitions/quote-data-shipping-method-interface"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "giftRegistryGuestCartShippingMethodManagementV1"
        ]
      }
    },
    "/V1/integration/admin/token": {
      "post": {
        "description": "Create access token for admin given the admin credentials.",
        "operationId": "integrationAdminTokenServiceV1CreateAdminAccessTokenPost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "password": {
                  "type": "string"
                },
                "username": {
                  "type": "string"
                }
              },
              "required": [
                "username",
                "password"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Token created",
              "type": "string"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "integrationAdminTokenServiceV1"
        ]
      }
    },
    "/V1/integration/customer/token": {
      "post": {
        "description": "Create access token for admin given the customer credentials.",
        "operationId": "integrationCustomerTokenServiceV1CreateCustomerAccessTokenPost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "password": {
                  "type": "string"
                },
                "username": {
                  "type": "string"
                }
              },
              "required": [
                "username",
                "password"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Token created",
              "type": "string"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "integrationCustomerTokenServiceV1"
        ]
      }
    },
    "/V1/invoice/{invoiceId}/refund": {
      "post": {
        "description": "Create refund for invoice",
        "operationId": "salesRefundInvoiceV1ExecutePost",
        "parameters": [
          {
            "in": "path",
            "name": "invoiceId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "appendComment": {
                  "type": "boolean"
                },
                "arguments": {
                  "$ref": "#/definitions/sales-data-creditmemo-creation-arguments-interface"
                },
                "comment": {
                  "$ref": "#/definitions/sales-data-creditmemo-comment-creation-interface"
                },
                "isOnline": {
                  "type": "boolean"
                },
                "items": {
                  "items": {
                    "$ref": "#/definitions/sales-data-creditmemo-item-creation-interface"
                  },
                  "type": "array"
                },
                "notify": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesRefundInvoiceV1"
        ]
      }
    },
    "/V1/invoices": {
      "get": {
        "description": "Lists invoices that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#InvoiceRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "salesInvoiceRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-invoice-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesInvoiceRepositoryV1"
        ]
      }
    },
    "/V1/invoices/": {
      "post": {
        "description": "Performs persist operations for a specified invoice.",
        "operationId": "salesInvoiceRepositoryV1SavePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "entity": {
                  "$ref": "#/definitions/sales-data-invoice-interface"
                }
              },
              "required": [
                "entity"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-invoice-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesInvoiceRepositoryV1"
        ]
      }
    },
    "/V1/invoices/comments": {
      "post": {
        "description": "Performs persist operations for a specified invoice comment.",
        "operationId": "salesInvoiceCommentRepositoryV1SavePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "entity": {
                  "$ref": "#/definitions/sales-data-invoice-comment-interface"
                }
              },
              "required": [
                "entity"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-invoice-comment-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesInvoiceCommentRepositoryV1"
        ]
      }
    },
    "/V1/invoices/{id}": {
      "get": {
        "description": "Loads a specified invoice.",
        "operationId": "salesInvoiceRepositoryV1GetGet",
        "parameters": [
          {
            "description": "The invoice ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-invoice-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesInvoiceRepositoryV1"
        ]
      }
    },
    "/V1/invoices/{id}/capture": {
      "post": {
        "description": "Sets invoice capture.",
        "operationId": "salesInvoiceManagementV1SetCapturePost",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesInvoiceManagementV1"
        ]
      }
    },
    "/V1/invoices/{id}/comments": {
      "get": {
        "description": "Lists comments for a specified invoice.",
        "operationId": "salesInvoiceManagementV1GetCommentsListGet",
        "parameters": [
          {
            "description": "The invoice ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-invoice-comment-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesInvoiceManagementV1"
        ]
      }
    },
    "/V1/invoices/{id}/emails": {
      "post": {
        "description": "Emails a user a specified invoice.",
        "operationId": "salesInvoiceManagementV1NotifyPost",
        "parameters": [
          {
            "description": "The invoice ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesInvoiceManagementV1"
        ]
      }
    },
    "/V1/invoices/{id}/void": {
      "post": {
        "description": "Voids a specified invoice.",
        "operationId": "salesInvoiceManagementV1SetVoidPost",
        "parameters": [
          {
            "description": "The invoice ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesInvoiceManagementV1"
        ]
      }
    },
    "/V1/modules": {
      "get": {
        "description": "Returns an array of enabled modules",
        "operationId": "backendModuleServiceV1GetModulesGet",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "backendModuleServiceV1"
        ]
      }
    },
    "/V1/order/{orderId}/invoice": {
      "post": {
        "description": "",
        "operationId": "salesInvoiceOrderV1ExecutePost",
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "appendComment": {
                  "type": "boolean"
                },
                "arguments": {
                  "$ref": "#/definitions/sales-data-invoice-creation-arguments-interface"
                },
                "capture": {
                  "type": "boolean"
                },
                "comment": {
                  "$ref": "#/definitions/sales-data-invoice-comment-creation-interface"
                },
                "items": {
                  "items": {
                    "$ref": "#/definitions/sales-data-invoice-item-creation-interface"
                  },
                  "type": "array"
                },
                "notify": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesInvoiceOrderV1"
        ]
      }
    },
    "/V1/order/{orderId}/refund": {
      "post": {
        "description": "Create offline refund for order",
        "operationId": "salesRefundOrderV1ExecutePost",
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "appendComment": {
                  "type": "boolean"
                },
                "arguments": {
                  "$ref": "#/definitions/sales-data-creditmemo-creation-arguments-interface"
                },
                "comment": {
                  "$ref": "#/definitions/sales-data-creditmemo-comment-creation-interface"
                },
                "items": {
                  "items": {
                    "$ref": "#/definitions/sales-data-creditmemo-item-creation-interface"
                  },
                  "type": "array"
                },
                "notify": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesRefundOrderV1"
        ]
      }
    },
    "/V1/order/{orderId}/ship": {
      "post": {
        "description": "Creates new Shipment for given Order.",
        "operationId": "salesShipOrderV1ExecutePost",
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "appendComment": {
                  "type": "boolean"
                },
                "arguments": {
                  "$ref": "#/definitions/sales-data-shipment-creation-arguments-interface"
                },
                "comment": {
                  "$ref": "#/definitions/sales-data-shipment-comment-creation-interface"
                },
                "items": {
                  "items": {
                    "$ref": "#/definitions/sales-data-shipment-item-creation-interface"
                  },
                  "type": "array"
                },
                "notify": {
                  "type": "boolean"
                },
                "packages": {
                  "items": {
                    "$ref": "#/definitions/sales-data-shipment-package-creation-interface"
                  },
                  "type": "array"
                },
                "tracks": {
                  "items": {
                    "$ref": "#/definitions/sales-data-shipment-track-creation-interface"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Id of created Shipment.",
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesShipOrderV1"
        ]
      }
    },
    "/V1/orders": {
      "get": {
        "description": "Lists orders that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#OrderRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "salesOrderRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-order-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesOrderRepositoryV1"
        ]
      }
    },
    "/V1/orders/": {
      "post": {
        "description": "Performs persist operations for a specified order.",
        "operationId": "salesOrderRepositoryV1SavePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "entity": {
                  "$ref": "#/definitions/sales-data-order-interface"
                }
              },
              "required": [
                "entity"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-order-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesOrderRepositoryV1"
        ]
      }
    },
    "/V1/orders/create": {
      "put": {
        "description": "Performs persist operations for a specified order.",
        "operationId": "salesOrderRepositoryV1SavePut",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "entity": {
                  "$ref": "#/definitions/sales-data-order-interface"
                }
              },
              "required": [
                "entity"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-order-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesOrderRepositoryV1"
        ]
      }
    },
    "/V1/orders/items": {
      "get": {
        "description": "Lists order items that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#OrderItemRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "salesOrderItemRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-order-item-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesOrderItemRepositoryV1"
        ]
      }
    },
    "/V1/orders/items/{id}": {
      "get": {
        "description": "Loads a specified order item.",
        "operationId": "salesOrderItemRepositoryV1GetGet",
        "parameters": [
          {
            "description": "The order item ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-order-item-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesOrderItemRepositoryV1"
        ]
      }
    },
    "/V1/orders/{id}": {
      "get": {
        "description": "Loads a specified order.",
        "operationId": "salesOrderRepositoryV1GetGet",
        "parameters": [
          {
            "description": "The order ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-order-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesOrderRepositoryV1"
        ]
      }
    },
    "/V1/orders/{id}/cancel": {
      "post": {
        "description": "Cancels a specified order.",
        "operationId": "salesOrderManagementV1CancelPost",
        "parameters": [
          {
            "description": "The order ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesOrderManagementV1"
        ]
      }
    },
    "/V1/orders/{id}/comments": {
      "get": {
        "description": "Lists comments for a specified order.",
        "operationId": "salesOrderManagementV1GetCommentsListGet",
        "parameters": [
          {
            "description": "The order ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-order-status-history-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesOrderManagementV1"
        ]
      },
      "post": {
        "description": "Adds a comment to a specified order.",
        "operationId": "salesOrderManagementV1AddCommentPost",
        "parameters": [
          {
            "description": "The order ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "statusHistory": {
                  "$ref": "#/definitions/sales-data-order-status-history-interface"
                }
              },
              "required": [
                "statusHistory"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesOrderManagementV1"
        ]
      }
    },
    "/V1/orders/{id}/emails": {
      "post": {
        "description": "Emails a user a specified order.",
        "operationId": "salesOrderManagementV1NotifyPost",
        "parameters": [
          {
            "description": "The order ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesOrderManagementV1"
        ]
      }
    },
    "/V1/orders/{id}/hold": {
      "post": {
        "description": "Holds a specified order.",
        "operationId": "salesOrderManagementV1HoldPost",
        "parameters": [
          {
            "description": "The order ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesOrderManagementV1"
        ]
      }
    },
    "/V1/orders/{id}/statuses": {
      "get": {
        "description": "Gets the status for a specified order.",
        "operationId": "salesOrderManagementV1GetStatusGet",
        "parameters": [
          {
            "description": "The order ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Order status.",
              "type": "string"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesOrderManagementV1"
        ]
      }
    },
    "/V1/orders/{id}/unhold": {
      "post": {
        "description": "Releases a specified order from hold status.",
        "operationId": "salesOrderManagementV1UnHoldPost",
        "parameters": [
          {
            "description": "The order ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesOrderManagementV1"
        ]
      }
    },
    "/V1/orders/{parent_id}": {
      "put": {
        "description": "Performs persist operations for a specified order address.",
        "operationId": "salesOrderAddressRepositoryV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "parent_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "entity": {
                  "$ref": "#/definitions/sales-data-order-address-interface"
                }
              },
              "required": [
                "entity"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-order-address-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesOrderAddressRepositoryV1"
        ]
      }
    },
    "/V1/products": {
      "get": {
        "description": "Get product list",
        "operationId": "catalogProductRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductRepositoryV1"
        ]
      },
      "post": {
        "description": "Create product",
        "operationId": "catalogProductRepositoryV1SavePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "product": {
                  "$ref": "#/definitions/catalog-data-product-interface"
                },
                "saveOptions": {
                  "type": "boolean"
                }
              },
              "required": [
                "product"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductRepositoryV1"
        ]
      }
    },
    "/V1/products/attribute-sets": {
      "post": {
        "description": "Create attribute set from data",
        "operationId": "catalogAttributeSetManagementV1CreatePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "attributeSet": {
                  "$ref": "#/definitions/eav-data-attribute-set-interface"
                },
                "skeletonId": {
                  "type": "integer"
                }
              },
              "required": [
                "attributeSet",
                "skeletonId"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/eav-data-attribute-set-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogAttributeSetManagementV1"
        ]
      }
    },
    "/V1/products/attribute-sets/attributes": {
      "post": {
        "description": "Assign attribute to attribute set",
        "operationId": "catalogProductAttributeManagementV1AssignPost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "attributeCode": {
                  "type": "string"
                },
                "attributeGroupId": {
                  "type": "integer"
                },
                "attributeSetId": {
                  "type": "integer"
                },
                "sortOrder": {
                  "type": "integer"
                }
              },
              "required": [
                "attributeSetId",
                "attributeGroupId",
                "attributeCode",
                "sortOrder"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductAttributeManagementV1"
        ]
      }
    },
    "/V1/products/attribute-sets/groups": {
      "post": {
        "description": "Save attribute group",
        "operationId": "catalogProductAttributeGroupRepositoryV1SavePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "group": {
                  "$ref": "#/definitions/eav-data-attribute-group-interface"
                }
              },
              "required": [
                "group"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/eav-data-attribute-group-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductAttributeGroupRepositoryV1"
        ]
      }
    },
    "/V1/products/attribute-sets/groups/list": {
      "get": {
        "description": "Retrieve list of attribute groups",
        "operationId": "catalogProductAttributeGroupRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/eav-data-attribute-group-search-results-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductAttributeGroupRepositoryV1"
        ]
      }
    },
    "/V1/products/attribute-sets/groups/{groupId}": {
      "delete": {
        "description": "Remove attribute group by id",
        "operationId": "catalogProductAttributeGroupRepositoryV1DeleteByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductAttributeGroupRepositoryV1"
        ]
      }
    },
    "/V1/products/attribute-sets/sets/list": {
      "get": {
        "description": "Retrieve list of Attribute Sets",
        "operationId": "catalogAttributeSetRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/eav-data-attribute-set-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogAttributeSetRepositoryV1"
        ]
      }
    },
    "/V1/products/attribute-sets/{attributeSetId}": {
      "delete": {
        "description": "Remove attribute set by given ID",
        "operationId": "catalogAttributeSetRepositoryV1DeleteByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "attributeSetId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogAttributeSetRepositoryV1"
        ]
      },
      "get": {
        "description": "Retrieve attribute set information based on given ID",
        "operationId": "catalogAttributeSetRepositoryV1GetGet",
        "parameters": [
          {
            "in": "path",
            "name": "attributeSetId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/eav-data-attribute-set-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogAttributeSetRepositoryV1"
        ]
      },
      "put": {
        "description": "Save attribute set data",
        "operationId": "catalogAttributeSetRepositoryV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "attributeSetId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "attributeSet": {
                  "$ref": "#/definitions/eav-data-attribute-set-interface"
                }
              },
              "required": [
                "attributeSet"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/eav-data-attribute-set-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogAttributeSetRepositoryV1"
        ]
      }
    },
    "/V1/products/attribute-sets/{attributeSetId}/attributes": {
      "get": {
        "description": "Retrieve related attributes based on given attribute set ID",
        "operationId": "catalogProductAttributeManagementV1GetAttributesGet",
        "parameters": [
          {
            "in": "path",
            "name": "attributeSetId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/catalog-data-product-attribute-interface"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductAttributeManagementV1"
        ]
      }
    },
    "/V1/products/attribute-sets/{attributeSetId}/attributes/{attributeCode}": {
      "delete": {
        "description": "Remove attribute from attribute set",
        "operationId": "catalogProductAttributeManagementV1UnassignDelete",
        "parameters": [
          {
            "in": "path",
            "name": "attributeSetId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "attributeCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductAttributeManagementV1"
        ]
      }
    },
    "/V1/products/attribute-sets/{attributeSetId}/groups": {
      "put": {
        "description": "Save attribute group",
        "operationId": "catalogProductAttributeGroupRepositoryV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "attributeSetId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "group": {
                  "$ref": "#/definitions/eav-data-attribute-group-interface"
                }
              },
              "required": [
                "group"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/eav-data-attribute-group-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductAttributeGroupRepositoryV1"
        ]
      }
    },
    "/V1/products/attributes": {
      "get": {
        "description": "Retrieve all attributes for entity type",
        "operationId": "catalogProductAttributeRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-attribute-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductAttributeRepositoryV1"
        ]
      },
      "post": {
        "description": "Save attribute data",
        "operationId": "catalogProductAttributeRepositoryV1SavePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "attribute": {
                  "$ref": "#/definitions/catalog-data-product-attribute-interface"
                }
              },
              "required": [
                "attribute"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-attribute-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductAttributeRepositoryV1"
        ]
      }
    },
    "/V1/products/attributes/types": {
      "get": {
        "description": "Retrieve list of product attribute types",
        "operationId": "catalogProductAttributeTypesListV1GetItemsGet",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/catalog-data-product-attribute-type-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductAttributeTypesListV1"
        ]
      }
    },
    "/V1/products/attributes/{attributeCode}": {
      "delete": {
        "description": "Delete Attribute by id",
        "operationId": "catalogProductAttributeRepositoryV1DeleteByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "attributeCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductAttributeRepositoryV1"
        ]
      },
      "get": {
        "description": "Retrieve specific attribute",
        "operationId": "catalogProductAttributeRepositoryV1GetGet",
        "parameters": [
          {
            "in": "path",
            "name": "attributeCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-attribute-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductAttributeRepositoryV1"
        ]
      },
      "put": {
        "description": "Save attribute data",
        "operationId": "catalogProductAttributeRepositoryV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "attributeCode",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "attribute": {
                  "$ref": "#/definitions/catalog-data-product-attribute-interface"
                }
              },
              "required": [
                "attribute"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-attribute-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductAttributeRepositoryV1"
        ]
      }
    },
    "/V1/products/attributes/{attributeCode}/options": {
      "get": {
        "description": "Retrieve list of attribute options",
        "operationId": "catalogProductAttributeOptionManagementV1GetItemsGet",
        "parameters": [
          {
            "in": "path",
            "name": "attributeCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/eav-data-attribute-option-interface"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductAttributeOptionManagementV1"
        ]
      },
      "post": {
        "description": "Add option to attribute",
        "operationId": "catalogProductAttributeOptionManagementV1AddPost",
        "parameters": [
          {
            "in": "path",
            "name": "attributeCode",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "option": {
                  "$ref": "#/definitions/eav-data-attribute-option-interface"
                }
              },
              "required": [
                "option"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductAttributeOptionManagementV1"
        ]
      }
    },
    "/V1/products/attributes/{attributeCode}/options/{optionId}": {
      "delete": {
        "description": "Delete option from attribute",
        "operationId": "catalogProductAttributeOptionManagementV1DeleteDelete",
        "parameters": [
          {
            "in": "path",
            "name": "attributeCode",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "optionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductAttributeOptionManagementV1"
        ]
      }
    },
    "/V1/products/downloadable-links/samples/{id}": {
      "delete": {
        "description": "Delete downloadable sample",
        "operationId": "downloadableSampleRepositoryV1DeleteDelete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "downloadableSampleRepositoryV1"
        ]
      }
    },
    "/V1/products/downloadable-links/{id}": {
      "delete": {
        "description": "Delete downloadable link",
        "operationId": "downloadableLinkRepositoryV1DeleteDelete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "downloadableLinkRepositoryV1"
        ]
      }
    },
    "/V1/products/links/types": {
      "get": {
        "description": "Retrieve information about available product link types",
        "operationId": "catalogProductLinkTypeListV1GetItemsGet",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/catalog-data-product-link-type-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductLinkTypeListV1"
        ]
      }
    },
    "/V1/products/links/{type}/attributes": {
      "get": {
        "description": "Provide a list of the product link type attributes",
        "operationId": "catalogProductLinkTypeListV1GetItemAttributesGet",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/catalog-data-product-link-attribute-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductLinkTypeListV1"
        ]
      }
    },
    "/V1/products/media/types/{attributeSetName}": {
      "get": {
        "description": "Retrieve the list of media attributes (fronted input type is media_image) assigned to the given attribute set.",
        "operationId": "catalogProductMediaAttributeManagementV1GetListGet",
        "parameters": [
          {
            "in": "path",
            "name": "attributeSetName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "list of media attributes",
              "items": {
                "$ref": "#/definitions/catalog-data-product-attribute-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductMediaAttributeManagementV1"
        ]
      }
    },
    "/V1/products/options": {
      "post": {
        "description": "Save Custom Option",
        "operationId": "catalogProductCustomOptionRepositoryV1SavePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "option": {
                  "$ref": "#/definitions/catalog-data-product-custom-option-interface"
                }
              },
              "required": [
                "option"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-custom-option-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductCustomOptionRepositoryV1"
        ]
      }
    },
    "/V1/products/options/types": {
      "get": {
        "description": "Get custom option types",
        "operationId": "catalogProductCustomOptionTypeListV1GetItemsGet",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/catalog-data-product-custom-option-type-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductCustomOptionTypeListV1"
        ]
      }
    },
    "/V1/products/options/{optionId}": {
      "put": {
        "description": "Save Custom Option",
        "operationId": "catalogProductCustomOptionRepositoryV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "optionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "option": {
                  "$ref": "#/definitions/catalog-data-product-custom-option-interface"
                }
              },
              "required": [
                "option"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-custom-option-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductCustomOptionRepositoryV1"
        ]
      }
    },
    "/V1/products/types": {
      "get": {
        "description": "Retrieve available product types",
        "operationId": "catalogProductTypeListV1GetProductTypesGet",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/catalog-data-product-type-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductTypeListV1"
        ]
      }
    },
    "/V1/products/{productSku}/stockItems/{itemId}": {
      "put": {
        "description": "",
        "operationId": "catalogInventoryStockRegistryV1UpdateStockItemBySkuPut",
        "parameters": [
          {
            "in": "path",
            "name": "productSku",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "stockItem": {
                  "$ref": "#/definitions/catalog-inventory-data-stock-item-interface"
                }
              },
              "required": [
                "stockItem"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogInventoryStockRegistryV1"
        ]
      }
    },
    "/V1/products/{sku}": {
      "delete": {
        "description": "",
        "operationId": "catalogProductRepositoryV1DeleteByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Will returned True if deleted",
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductRepositoryV1"
        ]
      },
      "get": {
        "description": "Get info about product by product SKU",
        "operationId": "catalogProductRepositoryV1GetGet",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "editMode",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "forceReload",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductRepositoryV1"
        ]
      },
      "put": {
        "description": "Create product",
        "operationId": "catalogProductRepositoryV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "product": {
                  "$ref": "#/definitions/catalog-data-product-interface"
                },
                "saveOptions": {
                  "type": "boolean"
                }
              },
              "required": [
                "product"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductRepositoryV1"
        ]
      }
    },
    "/V1/products/{sku}/downloadable-links": {
      "get": {
        "description": "List of links with associated samples",
        "operationId": "downloadableLinkRepositoryV1GetListGet",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/downloadable-data-link-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "downloadableLinkRepositoryV1"
        ]
      },
      "post": {
        "description": "Update downloadable link of the given product (link type and its resources cannot be changed)",
        "operationId": "downloadableLinkRepositoryV1SavePost",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "isGlobalScopeContent": {
                  "type": "boolean"
                },
                "link": {
                  "$ref": "#/definitions/downloadable-data-link-interface"
                }
              },
              "required": [
                "link"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "downloadableLinkRepositoryV1"
        ]
      }
    },
    "/V1/products/{sku}/downloadable-links/samples": {
      "get": {
        "description": "List of samples for downloadable product",
        "operationId": "downloadableSampleRepositoryV1GetListGet",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/downloadable-data-sample-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "downloadableSampleRepositoryV1"
        ]
      },
      "post": {
        "description": "Update downloadable sample of the given product",
        "operationId": "downloadableSampleRepositoryV1SavePost",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "isGlobalScopeContent": {
                  "type": "boolean"
                },
                "sample": {
                  "$ref": "#/definitions/downloadable-data-sample-interface"
                }
              },
              "required": [
                "sample"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "downloadableSampleRepositoryV1"
        ]
      }
    },
    "/V1/products/{sku}/downloadable-links/samples/{id}": {
      "put": {
        "description": "Update downloadable sample of the given product",
        "operationId": "downloadableSampleRepositoryV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "isGlobalScopeContent": {
                  "type": "boolean"
                },
                "sample": {
                  "$ref": "#/definitions/downloadable-data-sample-interface"
                }
              },
              "required": [
                "sample"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "downloadableSampleRepositoryV1"
        ]
      }
    },
    "/V1/products/{sku}/downloadable-links/{id}": {
      "put": {
        "description": "Update downloadable link of the given product (link type and its resources cannot be changed)",
        "operationId": "downloadableLinkRepositoryV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "isGlobalScopeContent": {
                  "type": "boolean"
                },
                "link": {
                  "$ref": "#/definitions/downloadable-data-link-interface"
                }
              },
              "required": [
                "link"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "downloadableLinkRepositoryV1"
        ]
      }
    },
    "/V1/products/{sku}/group-prices/{customerGroupId}/tiers": {
      "get": {
        "description": "Get tier price of product",
        "operationId": "catalogProductTierPriceManagementV1GetListGet",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "description": "'all' can be used to specify 'ALL GROUPS'",
            "in": "path",
            "name": "customerGroupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/catalog-data-product-tier-price-interface"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductTierPriceManagementV1"
        ]
      }
    },
    "/V1/products/{sku}/group-prices/{customerGroupId}/tiers/{qty}": {
      "delete": {
        "description": "Remove tier price from product",
        "operationId": "catalogProductTierPriceManagementV1RemoveDelete",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "description": "'all' can be used to specify 'ALL GROUPS'",
            "in": "path",
            "name": "customerGroupId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "qty",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductTierPriceManagementV1"
        ]
      }
    },
    "/V1/products/{sku}/group-prices/{customerGroupId}/tiers/{qty}/price/{price}": {
      "post": {
        "description": "Create tier price for product",
        "operationId": "catalogProductTierPriceManagementV1AddPost",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "description": "'all' can be used to specify 'ALL GROUPS'",
            "in": "path",
            "name": "customerGroupId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "price",
            "required": true,
            "type": "number"
          },
          {
            "in": "path",
            "name": "qty",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductTierPriceManagementV1"
        ]
      }
    },
    "/V1/products/{sku}/links": {
      "post": {
        "description": "Assign a product link to another product",
        "operationId": "catalogProductLinkManagementV1SetProductLinksPost",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "items": {
                  "items": {
                    "$ref": "#/definitions/catalog-data-product-link-interface"
                  },
                  "type": "array"
                }
              },
              "required": [
                "items"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductLinkManagementV1"
        ]
      },
      "put": {
        "description": "Save product link",
        "operationId": "catalogProductLinkRepositoryV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "entity": {
                  "$ref": "#/definitions/catalog-data-product-link-interface"
                }
              },
              "required": [
                "entity"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductLinkRepositoryV1"
        ]
      }
    },
    "/V1/products/{sku}/links/{type}": {
      "get": {
        "description": "Provide the list of links for a specific product",
        "operationId": "catalogProductLinkManagementV1GetLinkedItemsByTypeGet",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/catalog-data-product-link-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductLinkManagementV1"
        ]
      }
    },
    "/V1/products/{sku}/links/{type}/{linkedProductSku}": {
      "delete": {
        "description": "",
        "operationId": "catalogProductLinkRepositoryV1DeleteByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "linkedProductSku",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductLinkRepositoryV1"
        ]
      }
    },
    "/V1/products/{sku}/media": {
      "get": {
        "description": "Retrieve the list of gallery entries associated with given product",
        "operationId": "catalogProductAttributeMediaGalleryManagementV1GetListGet",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/catalog-data-product-attribute-media-gallery-entry-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductAttributeMediaGalleryManagementV1"
        ]
      },
      "post": {
        "description": "Create new gallery entry",
        "operationId": "catalogProductAttributeMediaGalleryManagementV1CreatePost",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "entry": {
                  "$ref": "#/definitions/catalog-data-product-attribute-media-gallery-entry-interface"
                }
              },
              "required": [
                "entry"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "gallery entry ID",
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductAttributeMediaGalleryManagementV1"
        ]
      }
    },
    "/V1/products/{sku}/media/{entryId}": {
      "delete": {
        "description": "Remove gallery entry",
        "operationId": "catalogProductAttributeMediaGalleryManagementV1RemoveDelete",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "entryId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductAttributeMediaGalleryManagementV1"
        ]
      },
      "get": {
        "description": "Return information about gallery entry",
        "operationId": "catalogProductAttributeMediaGalleryManagementV1GetGet",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "entryId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-attribute-media-gallery-entry-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductAttributeMediaGalleryManagementV1"
        ]
      },
      "put": {
        "description": "Update gallery entry",
        "operationId": "catalogProductAttributeMediaGalleryManagementV1UpdatePut",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "entryId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "entry": {
                  "$ref": "#/definitions/catalog-data-product-attribute-media-gallery-entry-interface"
                }
              },
              "required": [
                "entry"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductAttributeMediaGalleryManagementV1"
        ]
      }
    },
    "/V1/products/{sku}/options": {
      "get": {
        "description": "Get the list of custom options for a specific product",
        "operationId": "catalogProductCustomOptionRepositoryV1GetListGet",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/catalog-data-product-custom-option-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductCustomOptionRepositoryV1"
        ]
      }
    },
    "/V1/products/{sku}/options/{optionId}": {
      "delete": {
        "description": "",
        "operationId": "catalogProductCustomOptionRepositoryV1DeleteByIdentifierDelete",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "optionId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductCustomOptionRepositoryV1"
        ]
      },
      "get": {
        "description": "Get custom option for a specific product",
        "operationId": "catalogProductCustomOptionRepositoryV1GetGet",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "optionId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-custom-option-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductCustomOptionRepositoryV1"
        ]
      }
    },
    "/V1/products/{sku}/websites": {
      "post": {
        "description": "Assign a product to the website",
        "operationId": "catalogProductWebsiteLinkRepositoryV1SavePost",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "productWebsiteLink": {
                  "$ref": "#/definitions/catalog-data-product-website-link-interface"
                }
              },
              "required": [
                "productWebsiteLink"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "will returned True if website successfully assigned to product",
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductWebsiteLinkRepositoryV1"
        ]
      },
      "put": {
        "description": "Assign a product to the website",
        "operationId": "catalogProductWebsiteLinkRepositoryV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "productWebsiteLink": {
                  "$ref": "#/definitions/catalog-data-product-website-link-interface"
                }
              },
              "required": [
                "productWebsiteLink"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "will returned True if website successfully assigned to product",
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductWebsiteLinkRepositoryV1"
        ]
      }
    },
    "/V1/products/{sku}/websites/{websiteId}": {
      "delete": {
        "description": "Remove the website assignment from the product by product sku",
        "operationId": "catalogProductWebsiteLinkRepositoryV1DeleteByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "websiteId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "will returned True if website successfully unassigned from product",
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogProductWebsiteLinkRepositoryV1"
        ]
      }
    },
    "/V1/returns": {
      "get": {
        "description": "Return list of rma data objects based on search criteria",
        "operationId": "rmaRmaManagementV1SearchGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/rma-data-rma-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "rmaRmaManagementV1"
        ]
      },
      "post": {
        "description": "Save RMA",
        "operationId": "rmaRmaManagementV1SaveRmaPost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "rmaDataObject": {
                  "$ref": "#/definitions/rma-data-rma-interface"
                }
              },
              "required": [
                "rmaDataObject"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/rma-data-rma-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "rmaRmaManagementV1"
        ]
      }
    },
    "/V1/returns/{id}": {
      "delete": {
        "description": "Delete RMA",
        "operationId": "rmaRmaRepositoryV1DeleteDelete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "rmaDataObject": {
                  "$ref": "#/definitions/rma-data-rma-interface"
                }
              },
              "required": [
                "rmaDataObject"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "rmaRmaRepositoryV1"
        ]
      },
      "get": {
        "description": "Return data object for specified RMA id",
        "operationId": "rmaRmaRepositoryV1GetGet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/rma-data-rma-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "rmaRmaRepositoryV1"
        ]
      },
      "put": {
        "description": "Save RMA",
        "operationId": "rmaRmaManagementV1SaveRmaPut",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "rmaDataObject": {
                  "$ref": "#/definitions/rma-data-rma-interface"
                }
              },
              "required": [
                "rmaDataObject"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/rma-data-rma-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "rmaRmaManagementV1"
        ]
      }
    },
    "/V1/returns/{id}/comments": {
      "get": {
        "description": "Comments list",
        "operationId": "rmaCommentManagementV1CommentsListGet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/rma-data-comment-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "rmaCommentManagementV1"
        ]
      },
      "post": {
        "description": "Add comment",
        "operationId": "rmaCommentManagementV1AddCommentPost",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/rma-data-comment-interface"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "rmaCommentManagementV1"
        ]
      }
    },
    "/V1/returns/{id}/labels": {
      "get": {
        "description": "Get shipping label int the PDF format",
        "operationId": "rmaTrackManagementV1GetShippingLabelPdfGet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "rmaTrackManagementV1"
        ]
      }
    },
    "/V1/returns/{id}/tracking-numbers": {
      "get": {
        "description": "Get track list",
        "operationId": "rmaTrackManagementV1GetTracksGet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/rma-data-track-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "rmaTrackManagementV1"
        ]
      },
      "post": {
        "description": "Add track",
        "operationId": "rmaTrackManagementV1AddTrackPost",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "track": {
                  "$ref": "#/definitions/rma-data-track-interface"
                }
              },
              "required": [
                "track"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "rmaTrackManagementV1"
        ]
      }
    },
    "/V1/returns/{id}/tracking-numbers/{trackId}": {
      "delete": {
        "description": "Remove track by id",
        "operationId": "rmaTrackManagementV1RemoveTrackByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "trackId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "rmaTrackManagementV1"
        ]
      }
    },
    "/V1/returnsAttributeMetadata": {
      "get": {
        "description": "Get all attribute metadata.",
        "operationId": "rmaRmaAttributesManagementV1GetAllAttributesMetadataGet",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/customer-data-attribute-metadata-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "rmaRmaAttributesManagementV1"
        ]
      }
    },
    "/V1/returnsAttributeMetadata/custom": {
      "get": {
        "description": "Get custom attribute metadata for the given Data object's attribute set",
        "operationId": "rmaRmaAttributesManagementV1GetCustomAttributesMetadataGet",
        "parameters": [
          {
            "description": "Data object class name",
            "in": "query",
            "name": "dataObjectClassName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/framework-metadata-object-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "rmaRmaAttributesManagementV1"
        ]
      }
    },
    "/V1/returnsAttributeMetadata/form/{formCode}": {
      "get": {
        "description": "Retrieve all attributes filtered by form code",
        "operationId": "rmaRmaAttributesManagementV1GetAttributesGet",
        "parameters": [
          {
            "in": "path",
            "name": "formCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/customer-data-attribute-metadata-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "rmaRmaAttributesManagementV1"
        ]
      }
    },
    "/V1/returnsAttributeMetadata/{attributeCode}": {
      "get": {
        "description": "Retrieve attribute metadata.",
        "operationId": "rmaRmaAttributesManagementV1GetAttributeMetadataGet",
        "parameters": [
          {
            "in": "path",
            "name": "attributeCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-attribute-metadata-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "rmaRmaAttributesManagementV1"
        ]
      }
    },
    "/V1/reward/mine/use-reward": {
      "post": {
        "description": "Set reward points to quote",
        "operationId": "rewardRewardManagementV1SetPost",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "rewardRewardManagementV1"
        ]
      }
    },
    "/V1/salesRules": {
      "post": {
        "description": "Save sales rule.",
        "operationId": "salesRuleRuleRepositoryV1SavePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "rule": {
                  "$ref": "#/definitions/sales-rule-data-rule-interface"
                }
              },
              "required": [
                "rule"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-rule-data-rule-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesRuleRuleRepositoryV1"
        ]
      }
    },
    "/V1/salesRules/search": {
      "get": {
        "description": "Retrieve sales rules that match te specified criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#RuleRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "salesRuleRuleRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-rule-data-rule-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesRuleRuleRepositoryV1"
        ]
      }
    },
    "/V1/salesRules/{ruleId}": {
      "delete": {
        "description": "Delete rule by ID.",
        "operationId": "salesRuleRuleRepositoryV1DeleteByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "ruleId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "true on success",
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesRuleRuleRepositoryV1"
        ]
      },
      "get": {
        "description": "Get rule by ID.",
        "operationId": "salesRuleRuleRepositoryV1GetByIdGet",
        "parameters": [
          {
            "in": "path",
            "name": "ruleId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-rule-data-rule-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesRuleRuleRepositoryV1"
        ]
      },
      "put": {
        "description": "Save sales rule.",
        "operationId": "salesRuleRuleRepositoryV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "ruleId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "rule": {
                  "$ref": "#/definitions/sales-rule-data-rule-interface"
                }
              },
              "required": [
                "rule"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-rule-data-rule-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesRuleRuleRepositoryV1"
        ]
      }
    },
    "/V1/search": {
      "get": {
        "description": "Make Full Text Search and return found Documents",
        "operationId": "searchV1SearchGet",
        "parameters": [
          {
            "in": "query",
            "name": "searchCriteria[requestName]",
            "type": "string"
          },
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/framework-search-search-result-interface"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "searchV1"
        ]
      }
    },
    "/V1/shipment/": {
      "post": {
        "description": "Performs persist operations for a specified shipment.",
        "operationId": "salesShipmentRepositoryV1SavePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "entity": {
                  "$ref": "#/definitions/sales-data-shipment-interface"
                }
              },
              "required": [
                "entity"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-shipment-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesShipmentRepositoryV1"
        ]
      }
    },
    "/V1/shipment/track": {
      "post": {
        "description": "Performs persist operations for a specified shipment track.",
        "operationId": "salesShipmentTrackRepositoryV1SavePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "entity": {
                  "$ref": "#/definitions/sales-data-shipment-track-interface"
                }
              },
              "required": [
                "entity"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-shipment-track-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesShipmentTrackRepositoryV1"
        ]
      }
    },
    "/V1/shipment/track/{id}": {
      "delete": {
        "description": "Deletes a specified shipment track by ID.",
        "operationId": "salesShipmentTrackRepositoryV1DeleteByIdDelete",
        "parameters": [
          {
            "description": "The shipment track ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesShipmentTrackRepositoryV1"
        ]
      }
    },
    "/V1/shipment/{id}": {
      "get": {
        "description": "Loads a specified shipment.",
        "operationId": "salesShipmentRepositoryV1GetGet",
        "parameters": [
          {
            "description": "The shipment ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-shipment-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesShipmentRepositoryV1"
        ]
      }
    },
    "/V1/shipment/{id}/comments": {
      "get": {
        "description": "Lists comments for a specified shipment.",
        "operationId": "salesShipmentManagementV1GetCommentsListGet",
        "parameters": [
          {
            "description": "The shipment ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-shipment-comment-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesShipmentManagementV1"
        ]
      },
      "post": {
        "description": "Performs persist operations for a specified shipment comment.",
        "operationId": "salesShipmentCommentRepositoryV1SavePost",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "entity": {
                  "$ref": "#/definitions/sales-data-shipment-comment-interface"
                }
              },
              "required": [
                "entity"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-shipment-comment-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesShipmentCommentRepositoryV1"
        ]
      }
    },
    "/V1/shipment/{id}/emails": {
      "post": {
        "description": "Emails user a specified shipment.",
        "operationId": "salesShipmentManagementV1NotifyPost",
        "parameters": [
          {
            "description": "The shipment ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesShipmentManagementV1"
        ]
      }
    },
    "/V1/shipment/{id}/label": {
      "get": {
        "description": "Gets a specified shipment label.",
        "operationId": "salesShipmentManagementV1GetLabelGet",
        "parameters": [
          {
            "description": "The shipment label ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Shipment label.",
              "type": "string"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesShipmentManagementV1"
        ]
      }
    },
    "/V1/shipments": {
      "get": {
        "description": "Lists shipments that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#ShipmentRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "salesShipmentRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-shipment-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesShipmentRepositoryV1"
        ]
      }
    },
    "/V1/stockItems/lowStock/": {
      "get": {
        "description": "Retrieves a list of SKU's with low inventory qty",
        "operationId": "catalogInventoryStockRegistryV1GetLowStockItemsGet",
        "parameters": [
          {
            "in": "query",
            "name": "scopeId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "qty",
            "required": true,
            "type": "number"
          },
          {
            "in": "query",
            "name": "currentPage",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-inventory-data-stock-status-collection-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogInventoryStockRegistryV1"
        ]
      }
    },
    "/V1/stockItems/{productSku}": {
      "get": {
        "description": "",
        "operationId": "catalogInventoryStockRegistryV1GetStockItemBySkuGet",
        "parameters": [
          {
            "in": "path",
            "name": "productSku",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "scopeId",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-inventory-data-stock-item-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogInventoryStockRegistryV1"
        ]
      }
    },
    "/V1/stockStatuses/{productSku}": {
      "get": {
        "description": "",
        "operationId": "catalogInventoryStockRegistryV1GetStockStatusBySkuGet",
        "parameters": [
          {
            "in": "path",
            "name": "productSku",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "scopeId",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-inventory-data-stock-status-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "catalogInventoryStockRegistryV1"
        ]
      }
    },
    "/V1/store/storeConfigs": {
      "get": {
        "description": "",
        "operationId": "storeStoreConfigManagerV1GetStoreConfigsGet",
        "parameters": [
          {
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "storeCodes",
            "required": false,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/store-data-store-config-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "storeStoreConfigManagerV1"
        ]
      }
    },
    "/V1/store/storeGroups": {
      "get": {
        "description": "Retrieve list of all groups",
        "operationId": "storeGroupRepositoryV1GetListGet",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/store-data-group-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "storeGroupRepositoryV1"
        ]
      }
    },
    "/V1/store/storeViews": {
      "get": {
        "description": "Retrieve list of all stores",
        "operationId": "storeStoreRepositoryV1GetListGet",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/store-data-store-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "storeStoreRepositoryV1"
        ]
      }
    },
    "/V1/store/websites": {
      "get": {
        "description": "Retrieve list of all websites",
        "operationId": "storeWebsiteRepositoryV1GetListGet",
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "items": {
                "$ref": "#/definitions/store-data-website-interface"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "storeWebsiteRepositoryV1"
        ]
      }
    },
    "/V1/taxClasses": {
      "post": {
        "description": "Create a Tax Class",
        "operationId": "taxTaxClassRepositoryV1SavePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "taxClass": {
                  "$ref": "#/definitions/tax-data-tax-class-interface"
                }
              },
              "required": [
                "taxClass"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "id for the newly created Tax class",
              "type": "string"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "taxTaxClassRepositoryV1"
        ]
      }
    },
    "/V1/taxClasses/search": {
      "get": {
        "description": "Retrieve tax classes which match a specific criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#TaxClassRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "taxTaxClassRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/tax-data-tax-class-search-results-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "taxTaxClassRepositoryV1"
        ]
      }
    },
    "/V1/taxClasses/{classId}": {
      "put": {
        "description": "Create a Tax Class",
        "operationId": "taxTaxClassRepositoryV1SavePut",
        "parameters": [
          {
            "in": "path",
            "name": "classId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "taxClass": {
                  "$ref": "#/definitions/tax-data-tax-class-interface"
                }
              },
              "required": [
                "taxClass"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "id for the newly created Tax class",
              "type": "string"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "taxTaxClassRepositoryV1"
        ]
      }
    },
    "/V1/taxClasses/{taxClassId}": {
      "delete": {
        "description": "Delete a tax class with the given tax class id.",
        "operationId": "taxTaxClassRepositoryV1DeleteByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "taxClassId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "True if the tax class was deleted, false otherwise",
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "taxTaxClassRepositoryV1"
        ]
      },
      "get": {
        "description": "Get a tax class with the given tax class id.",
        "operationId": "taxTaxClassRepositoryV1GetGet",
        "parameters": [
          {
            "in": "path",
            "name": "taxClassId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/tax-data-tax-class-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "taxTaxClassRepositoryV1"
        ]
      }
    },
    "/V1/taxRates": {
      "post": {
        "description": "Create or update tax rate",
        "operationId": "taxTaxRateRepositoryV1SavePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "taxRate": {
                  "$ref": "#/definitions/tax-data-tax-rate-interface"
                }
              },
              "required": [
                "taxRate"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/tax-data-tax-rate-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "taxTaxRateRepositoryV1"
        ]
      },
      "put": {
        "description": "Create or update tax rate",
        "operationId": "taxTaxRateRepositoryV1SavePut",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "taxRate": {
                  "$ref": "#/definitions/tax-data-tax-rate-interface"
                }
              },
              "required": [
                "taxRate"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/tax-data-tax-rate-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "taxTaxRateRepositoryV1"
        ]
      }
    },
    "/V1/taxRates/search": {
      "get": {
        "description": "Search TaxRates This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#TaxRateRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "taxTaxRateRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/tax-data-tax-rate-search-results-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "taxTaxRateRepositoryV1"
        ]
      }
    },
    "/V1/taxRates/{rateId}": {
      "delete": {
        "description": "Delete tax rate",
        "operationId": "taxTaxRateRepositoryV1DeleteByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "rateId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "taxTaxRateRepositoryV1"
        ]
      },
      "get": {
        "description": "Get tax rate",
        "operationId": "taxTaxRateRepositoryV1GetGet",
        "parameters": [
          {
            "in": "path",
            "name": "rateId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/tax-data-tax-rate-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "taxTaxRateRepositoryV1"
        ]
      }
    },
    "/V1/taxRules": {
      "post": {
        "description": "Save TaxRule",
        "operationId": "taxTaxRuleRepositoryV1SavePost",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "rule": {
                  "$ref": "#/definitions/tax-data-tax-rule-interface"
                }
              },
              "required": [
                "rule"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/tax-data-tax-rule-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "taxTaxRuleRepositoryV1"
        ]
      },
      "put": {
        "description": "Save TaxRule",
        "operationId": "taxTaxRuleRepositoryV1SavePut",
        "parameters": [
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "rule": {
                  "$ref": "#/definitions/tax-data-tax-rule-interface"
                }
              },
              "required": [
                "rule"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/tax-data-tax-rule-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "taxTaxRuleRepositoryV1"
        ]
      }
    },
    "/V1/taxRules/search": {
      "get": {
        "description": "Search TaxRules This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#TaxRuleRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "taxTaxRuleRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/tax-data-tax-rule-search-results-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "taxTaxRuleRepositoryV1"
        ]
      }
    },
    "/V1/taxRules/{ruleId}": {
      "delete": {
        "description": "Delete TaxRule",
        "operationId": "taxTaxRuleRepositoryV1DeleteByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "ruleId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "taxTaxRuleRepositoryV1"
        ]
      },
      "get": {
        "description": "Get TaxRule",
        "operationId": "taxTaxRuleRepositoryV1GetGet",
        "parameters": [
          {
            "in": "path",
            "name": "ruleId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/tax-data-tax-rule-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "taxTaxRuleRepositoryV1"
        ]
      }
    },
    "/V1/transactions": {
      "get": {
        "description": "Lists transactions that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#TransactionRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "salesTransactionRepositoryV1GetListGet",
        "parameters": [
          {
            "description": "Field",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][field]",
            "type": "string"
          },
          {
            "description": "Value",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][value]",
            "type": "string"
          },
          {
            "description": "Condition type",
            "in": "query",
            "name": "searchCriteria[filterGroups][][filters][][conditionType]",
            "type": "string"
          },
          {
            "description": "Sorting field.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][field]",
            "type": "string"
          },
          {
            "description": "Sorting direction.",
            "in": "query",
            "name": "searchCriteria[sortOrders][][direction]",
            "type": "string"
          },
          {
            "description": "Page size.",
            "in": "query",
            "name": "searchCriteria[pageSize]",
            "type": "integer"
          },
          {
            "description": "Current page.",
            "in": "query",
            "name": "searchCriteria[currentPage]",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-transaction-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesTransactionRepositoryV1"
        ]
      }
    },
    "/V1/transactions/{id}": {
      "get": {
        "description": "Loads a specified transaction.",
        "operationId": "salesTransactionRepositoryV1GetGet",
        "parameters": [
          {
            "description": "The transaction ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-transaction-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "salesTransactionRepositoryV1"
        ]
      }
    },
    "/V1/worldpay-guest-carts/{cartId}/payment-information": {
      "post": {
        "description": "Proxy handler for guest place order",
        "operationId": "worldpayGuestPaymentInformationManagementProxyV1SavePaymentInformationAndPlaceOrderPost",
        "parameters": [
          {
            "in": "path",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "$body",
            "schema": {
              "properties": {
                "billingAddress": {
                  "$ref": "#/definitions/quote-data-address-interface"
                },
                "email": {
                  "type": "string"
                },
                "paymentMethod": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                }
              },
              "required": [
                "email",
                "paymentMethod"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "description": "Order ID.",
              "type": "integer"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        },
        "tags": [
          "worldpayGuestPaymentInformationManagementProxyV1"
        ]
      }
    }
  },
  "definitions": {
    "bundle-data-bundle-option-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Bundle\\Api\\Data\\BundleOptionInterface",
      "type": "object"
    },
    "bundle-data-bundle-option-interface": {
      "description": "Interface BundleOptionInterface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/bundle-data-bundle-option-extension-interface"
        },
        "option_id": {
          "description": "Bundle option id.",
          "type": "integer"
        },
        "option_qty": {
          "description": "Bundle option quantity.",
          "type": "integer"
        },
        "option_selections": {
          "description": "Bundle option selection ids.",
          "items": {
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "option_id",
        "option_qty",
        "option_selections"
      ],
      "type": "object"
    },
    "bundle-data-link-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Bundle\\Api\\Data\\LinkInterface",
      "type": "object"
    },
    "bundle-data-link-interface": {
      "description": "Interface LinkInterface",
      "properties": {
        "can_change_quantity": {
          "description": "Whether quantity could be changed",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/bundle-data-link-extension-interface"
        },
        "id": {
          "description": "The identifier",
          "type": "string"
        },
        "is_default": {
          "description": "Is default",
          "type": "boolean"
        },
        "option_id": {
          "description": "Option id",
          "type": "integer"
        },
        "position": {
          "description": "Position",
          "type": "integer"
        },
        "price": {
          "description": "Price",
          "type": "number"
        },
        "price_type": {
          "description": "Price type",
          "type": "integer"
        },
        "qty": {
          "description": "Qty",
          "type": "number"
        },
        "sku": {
          "description": "Linked product sku",
          "type": "string"
        }
      },
      "required": [
        "is_default",
        "price",
        "price_type"
      ],
      "type": "object"
    },
    "bundle-data-option-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Bundle\\Api\\Data\\OptionInterface",
      "type": "object"
    },
    "bundle-data-option-interface": {
      "description": "Interface OptionInterface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/bundle-data-option-extension-interface"
        },
        "option_id": {
          "description": "Option id",
          "type": "integer"
        },
        "position": {
          "description": "Option position",
          "type": "integer"
        },
        "product_links": {
          "description": "Product links",
          "items": {
            "$ref": "#/definitions/bundle-data-link-interface"
          },
          "type": "array"
        },
        "required": {
          "description": "Is required option",
          "type": "boolean"
        },
        "sku": {
          "description": "Product sku",
          "type": "string"
        },
        "title": {
          "description": "Option title",
          "type": "string"
        },
        "type": {
          "description": "Input type",
          "type": "string"
        }
      },
      "type": "object"
    },
    "bundle-data-option-type-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Bundle\\Api\\Data\\OptionTypeInterface",
      "type": "object"
    },
    "bundle-data-option-type-interface": {
      "description": "Interface OptionTypeInterface",
      "properties": {
        "code": {
          "description": "Type code",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/bundle-data-option-type-extension-interface"
        },
        "label": {
          "description": "Type label",
          "type": "string"
        }
      },
      "required": [
        "label",
        "code"
      ],
      "type": "object"
    },
    "catalog-data-category-attribute-interface": {
      "description": "",
      "properties": {
        "apply_to": {
          "description": "Apply to value for the element",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "attribute_code": {
          "description": "Code of the attribute.",
          "type": "string"
        },
        "attribute_id": {
          "description": "Id of the attribute.",
          "type": "integer"
        },
        "backend_model": {
          "description": "Backend model",
          "type": "string"
        },
        "backend_type": {
          "description": "Backend type.",
          "type": "string"
        },
        "custom_attributes": {
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          },
          "type": "array"
        },
        "default_frontend_label": {
          "description": "Frontend label for default store",
          "type": "string"
        },
        "default_value": {
          "description": "Default value for the element.",
          "type": "string"
        },
        "entity_type_id": {
          "description": "Entity type id",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-eav-attribute-extension-interface"
        },
        "frontend_class": {
          "description": "Frontend class of attribute",
          "type": "string"
        },
        "frontend_input": {
          "description": "HTML for input element.",
          "type": "string"
        },
        "frontend_labels": {
          "description": "Frontend label for each store",
          "items": {
            "$ref": "#/definitions/eav-data-attribute-frontend-label-interface"
          },
          "type": "array"
        },
        "is_comparable": {
          "description": "The attribute can be compared on the frontend",
          "type": "string"
        },
        "is_filterable": {
          "description": "It used in layered navigation",
          "type": "boolean"
        },
        "is_filterable_in_grid": {
          "description": "It is filterable in catalog product grid",
          "type": "boolean"
        },
        "is_filterable_in_search": {
          "description": "It is used in search results layered navigation",
          "type": "boolean"
        },
        "is_html_allowed_on_front": {
          "description": "The HTML tags are allowed on the frontend",
          "type": "boolean"
        },
        "is_required": {
          "description": "Attribute is required.",
          "type": "boolean"
        },
        "is_searchable": {
          "description": "The attribute can be used in Quick Search",
          "type": "string"
        },
        "is_unique": {
          "description": "This is a unique attribute",
          "type": "string"
        },
        "is_used_for_promo_rules": {
          "description": "The attribute can be used for promo rules",
          "type": "string"
        },
        "is_used_in_grid": {
          "description": "It is used in catalog product grid",
          "type": "boolean"
        },
        "is_user_defined": {
          "description": "Current attribute has been defined by a user.",
          "type": "boolean"
        },
        "is_visible": {
          "description": "Attribute is visible on frontend.",
          "type": "boolean"
        },
        "is_visible_in_advanced_search": {
          "description": "The attribute can be used in Advanced Search",
          "type": "string"
        },
        "is_visible_in_grid": {
          "description": "It is visible in catalog product grid",
          "type": "boolean"
        },
        "is_visible_on_front": {
          "description": "The attribute is visible on the frontend",
          "type": "string"
        },
        "is_wysiwyg_enabled": {
          "description": "WYSIWYG flag",
          "type": "boolean"
        },
        "note": {
          "description": "The note attribute for the element.",
          "type": "string"
        },
        "options": {
          "description": "Options of the attribute (key => value pairs for select)",
          "items": {
            "$ref": "#/definitions/eav-data-attribute-option-interface"
          },
          "type": "array"
        },
        "position": {
          "description": "Position",
          "type": "integer"
        },
        "scope": {
          "description": "Attribute scope",
          "type": "string"
        },
        "source_model": {
          "description": "Source model",
          "type": "string"
        },
        "used_for_sort_by": {
          "description": "It is used for sorting in product listing",
          "type": "boolean"
        },
        "used_in_product_listing": {
          "description": "The attribute can be used in product listing",
          "type": "string"
        },
        "validation_rules": {
          "description": "Validation rules.",
          "items": {
            "$ref": "#/definitions/eav-data-attribute-validation-rule-interface"
          },
          "type": "array"
        }
      },
      "required": [
        "attribute_code",
        "frontend_input",
        "is_required",
        "frontend_labels"
      ],
      "type": "object"
    },
    "catalog-data-category-attribute-search-results-interface": {
      "description": "",
      "properties": {
        "items": {
          "description": "Attributes list.",
          "items": {
            "$ref": "#/definitions/catalog-data-category-attribute-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "catalog-data-category-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\CategoryInterface",
      "type": "object"
    },
    "catalog-data-category-interface": {
      "description": "",
      "properties": {
        "available_sort_by": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "children": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "custom_attributes": {
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          },
          "type": "array"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-category-extension-interface"
        },
        "id": {
          "type": "integer"
        },
        "include_in_menu": {
          "type": "boolean"
        },
        "is_active": {
          "description": "Whether category is active",
          "type": "boolean"
        },
        "level": {
          "description": "Category level",
          "type": "integer"
        },
        "name": {
          "description": "Category name",
          "type": "string"
        },
        "parent_id": {
          "description": "Parent category ID",
          "type": "integer"
        },
        "path": {
          "type": "string"
        },
        "position": {
          "description": "Category position",
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "catalog-data-category-product-link-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\CategoryProductLinkInterface",
      "type": "object"
    },
    "catalog-data-category-product-link-interface": {
      "description": "",
      "properties": {
        "category_id": {
          "description": "Category id",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-category-product-link-extension-interface"
        },
        "position": {
          "type": "integer"
        },
        "sku": {
          "type": "string"
        }
      },
      "required": [
        "category_id"
      ],
      "type": "object"
    },
    "catalog-data-category-tree-interface": {
      "description": "",
      "properties": {
        "children_data": {
          "items": {
            "$ref": "#/definitions/catalog-data-category-tree-interface"
          },
          "type": "array"
        },
        "id": {
          "type": "integer"
        },
        "is_active": {
          "description": "Whether category is active",
          "type": "boolean"
        },
        "level": {
          "description": "Category level",
          "type": "integer"
        },
        "name": {
          "description": "Category name",
          "type": "string"
        },
        "parent_id": {
          "description": "Parent category ID",
          "type": "integer"
        },
        "position": {
          "description": "Category position",
          "type": "integer"
        },
        "product_count": {
          "description": "Product count",
          "type": "integer"
        }
      },
      "required": [
        "parent_id",
        "name",
        "is_active",
        "position",
        "level",
        "product_count",
        "children_data"
      ],
      "type": "object"
    },
    "catalog-data-custom-option-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\CustomOptionInterface",
      "properties": {
        "file_info": {
          "$ref": "#/definitions/framework-data-image-content-interface"
        }
      },
      "type": "object"
    },
    "catalog-data-custom-option-interface": {
      "description": "Interface CustomOptionInterface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-custom-option-extension-interface"
        },
        "option_id": {
          "description": "Option id",
          "type": "string"
        },
        "option_value": {
          "description": "Option value",
          "type": "string"
        }
      },
      "required": [
        "option_id",
        "option_value"
      ],
      "type": "object"
    },
    "catalog-data-eav-attribute-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\EavAttributeInterface",
      "type": "object"
    },
    "catalog-data-product-attribute-interface": {
      "description": "",
      "properties": {
        "apply_to": {
          "description": "Apply to value for the element",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "attribute_code": {
          "description": "Code of the attribute.",
          "type": "string"
        },
        "attribute_id": {
          "description": "Id of the attribute.",
          "type": "integer"
        },
        "backend_model": {
          "description": "Backend model",
          "type": "string"
        },
        "backend_type": {
          "description": "Backend type.",
          "type": "string"
        },
        "custom_attributes": {
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          },
          "type": "array"
        },
        "default_frontend_label": {
          "description": "Frontend label for default store",
          "type": "string"
        },
        "default_value": {
          "description": "Default value for the element.",
          "type": "string"
        },
        "entity_type_id": {
          "description": "Entity type id",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-eav-attribute-extension-interface"
        },
        "frontend_class": {
          "description": "Frontend class of attribute",
          "type": "string"
        },
        "frontend_input": {
          "description": "HTML for input element.",
          "type": "string"
        },
        "frontend_labels": {
          "description": "Frontend label for each store",
          "items": {
            "$ref": "#/definitions/eav-data-attribute-frontend-label-interface"
          },
          "type": "array"
        },
        "is_comparable": {
          "description": "The attribute can be compared on the frontend",
          "type": "string"
        },
        "is_filterable": {
          "description": "It used in layered navigation",
          "type": "boolean"
        },
        "is_filterable_in_grid": {
          "description": "It is filterable in catalog product grid",
          "type": "boolean"
        },
        "is_filterable_in_search": {
          "description": "It is used in search results layered navigation",
          "type": "boolean"
        },
        "is_html_allowed_on_front": {
          "description": "The HTML tags are allowed on the frontend",
          "type": "boolean"
        },
        "is_required": {
          "description": "Attribute is required.",
          "type": "boolean"
        },
        "is_searchable": {
          "description": "The attribute can be used in Quick Search",
          "type": "string"
        },
        "is_unique": {
          "description": "This is a unique attribute",
          "type": "string"
        },
        "is_used_for_promo_rules": {
          "description": "The attribute can be used for promo rules",
          "type": "string"
        },
        "is_used_in_grid": {
          "description": "It is used in catalog product grid",
          "type": "boolean"
        },
        "is_user_defined": {
          "description": "Current attribute has been defined by a user.",
          "type": "boolean"
        },
        "is_visible": {
          "description": "Attribute is visible on frontend.",
          "type": "boolean"
        },
        "is_visible_in_advanced_search": {
          "description": "The attribute can be used in Advanced Search",
          "type": "string"
        },
        "is_visible_in_grid": {
          "description": "It is visible in catalog product grid",
          "type": "boolean"
        },
        "is_visible_on_front": {
          "description": "The attribute is visible on the frontend",
          "type": "string"
        },
        "is_wysiwyg_enabled": {
          "description": "WYSIWYG flag",
          "type": "boolean"
        },
        "note": {
          "description": "The note attribute for the element.",
          "type": "string"
        },
        "options": {
          "description": "Options of the attribute (key => value pairs for select)",
          "items": {
            "$ref": "#/definitions/eav-data-attribute-option-interface"
          },
          "type": "array"
        },
        "position": {
          "description": "Position",
          "type": "integer"
        },
        "scope": {
          "description": "Attribute scope",
          "type": "string"
        },
        "source_model": {
          "description": "Source model",
          "type": "string"
        },
        "used_for_sort_by": {
          "description": "It is used for sorting in product listing",
          "type": "boolean"
        },
        "used_in_product_listing": {
          "description": "The attribute can be used in product listing",
          "type": "string"
        },
        "validation_rules": {
          "description": "Validation rules.",
          "items": {
            "$ref": "#/definitions/eav-data-attribute-validation-rule-interface"
          },
          "type": "array"
        }
      },
      "required": [
        "attribute_code",
        "frontend_input",
        "is_required",
        "frontend_labels"
      ],
      "type": "object"
    },
    "catalog-data-product-attribute-media-gallery-entry-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductAttributeMediaGalleryEntryInterface",
      "properties": {
        "video_content": {
          "$ref": "#/definitions/framework-data-video-content-interface"
        }
      },
      "type": "object"
    },
    "catalog-data-product-attribute-media-gallery-entry-interface": {
      "description": "",
      "properties": {
        "content": {
          "$ref": "#/definitions/framework-data-image-content-interface"
        },
        "disabled": {
          "description": "If gallery entry is hidden from product page",
          "type": "boolean"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-attribute-media-gallery-entry-extension-interface"
        },
        "file": {
          "description": "File path",
          "type": "string"
        },
        "id": {
          "description": "Gallery entry ID",
          "type": "integer"
        },
        "label": {
          "description": "Gallery entry alternative text",
          "type": "string"
        },
        "media_type": {
          "description": "Media type",
          "type": "string"
        },
        "position": {
          "description": "Gallery entry position (sort order)",
          "type": "integer"
        },
        "types": {
          "description": "Gallery entry image types (thumbnail, image, small_image etc)",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "media_type",
        "label",
        "position",
        "disabled",
        "types"
      ],
      "type": "object"
    },
    "catalog-data-product-attribute-search-results-interface": {
      "description": "",
      "properties": {
        "items": {
          "description": "Attributes list.",
          "items": {
            "$ref": "#/definitions/catalog-data-product-attribute-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "catalog-data-product-attribute-type-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductAttributeTypeInterface",
      "type": "object"
    },
    "catalog-data-product-attribute-type-interface": {
      "description": "",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-attribute-type-extension-interface"
        },
        "label": {
          "description": "Type label",
          "type": "string"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "required": [
        "value",
        "label"
      ],
      "type": "object"
    },
    "catalog-data-product-custom-option-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductCustomOptionInterface",
      "type": "object"
    },
    "catalog-data-product-custom-option-interface": {
      "description": "",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-custom-option-extension-interface"
        },
        "file_extension": {
          "type": "string"
        },
        "image_size_x": {
          "type": "integer"
        },
        "image_size_y": {
          "type": "integer"
        },
        "is_require": {
          "description": "Is require",
          "type": "boolean"
        },
        "max_characters": {
          "type": "integer"
        },
        "option_id": {
          "description": "Option id",
          "type": "integer"
        },
        "price": {
          "description": "Price",
          "type": "number"
        },
        "price_type": {
          "description": "Price type",
          "type": "string"
        },
        "product_sku": {
          "description": "Product SKU",
          "type": "string"
        },
        "sku": {
          "description": "Sku",
          "type": "string"
        },
        "sort_order": {
          "description": "Sort order",
          "type": "integer"
        },
        "title": {
          "description": "Option title",
          "type": "string"
        },
        "type": {
          "description": "Option type",
          "type": "string"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/catalog-data-product-custom-option-values-interface"
          },
          "type": "array"
        }
      },
      "required": [
        "product_sku",
        "title",
        "type",
        "sort_order",
        "is_require"
      ],
      "type": "object"
    },
    "catalog-data-product-custom-option-type-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductCustomOptionTypeInterface",
      "type": "object"
    },
    "catalog-data-product-custom-option-type-interface": {
      "description": "",
      "properties": {
        "code": {
          "description": "Option type code",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-custom-option-type-extension-interface"
        },
        "group": {
          "description": "Option type group",
          "type": "string"
        },
        "label": {
          "description": "Option type label",
          "type": "string"
        }
      },
      "required": [
        "label",
        "code",
        "group"
      ],
      "type": "object"
    },
    "catalog-data-product-custom-option-values-interface": {
      "description": "",
      "properties": {
        "option_type_id": {
          "description": "Option type id",
          "type": "integer"
        },
        "price": {
          "description": "Price",
          "type": "number"
        },
        "price_type": {
          "description": "Price type",
          "type": "string"
        },
        "sku": {
          "description": "Sku",
          "type": "string"
        },
        "sort_order": {
          "description": "Sort order",
          "type": "integer"
        },
        "title": {
          "description": "Option title",
          "type": "string"
        }
      },
      "required": [
        "title",
        "sort_order",
        "price",
        "price_type"
      ],
      "type": "object"
    },
    "catalog-data-product-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductInterface",
      "properties": {
        "bundle_product_options": {
          "items": {
            "$ref": "#/definitions/bundle-data-option-interface"
          },
          "type": "array"
        },
        "configurable_product_links": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "configurable_product_options": {
          "items": {
            "$ref": "#/definitions/configurable-product-data-option-interface"
          },
          "type": "array"
        },
        "downloadable_product_links": {
          "items": {
            "$ref": "#/definitions/downloadable-data-link-interface"
          },
          "type": "array"
        },
        "downloadable_product_samples": {
          "items": {
            "$ref": "#/definitions/downloadable-data-sample-interface"
          },
          "type": "array"
        },
        "giftcard_amounts": {
          "items": {
            "$ref": "#/definitions/gift-card-data-giftcard-amount-interface"
          },
          "type": "array"
        },
        "stock_item": {
          "$ref": "#/definitions/catalog-inventory-data-stock-item-interface"
        }
      },
      "type": "object"
    },
    "catalog-data-product-interface": {
      "description": "",
      "properties": {
        "attribute_set_id": {
          "description": "Attribute set id",
          "type": "integer"
        },
        "created_at": {
          "description": "Created date",
          "type": "string"
        },
        "custom_attributes": {
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          },
          "type": "array"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-extension-interface"
        },
        "id": {
          "description": "Id",
          "type": "integer"
        },
        "media_gallery_entries": {
          "description": "Media gallery entries",
          "items": {
            "$ref": "#/definitions/catalog-data-product-attribute-media-gallery-entry-interface"
          },
          "type": "array"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "options": {
          "description": "List of product options",
          "items": {
            "$ref": "#/definitions/catalog-data-product-custom-option-interface"
          },
          "type": "array"
        },
        "price": {
          "description": "Price",
          "type": "number"
        },
        "product_links": {
          "description": "Product links info",
          "items": {
            "$ref": "#/definitions/catalog-data-product-link-interface"
          },
          "type": "array"
        },
        "sku": {
          "description": "Sku",
          "type": "string"
        },
        "status": {
          "description": "Status",
          "type": "integer"
        },
        "tier_prices": {
          "description": "List of product tier prices",
          "items": {
            "$ref": "#/definitions/catalog-data-product-tier-price-interface"
          },
          "type": "array"
        },
        "type_id": {
          "description": "Type id",
          "type": "string"
        },
        "updated_at": {
          "description": "Updated date",
          "type": "string"
        },
        "visibility": {
          "description": "Visibility",
          "type": "integer"
        },
        "weight": {
          "description": "Weight",
          "type": "number"
        }
      },
      "required": [
        "sku"
      ],
      "type": "object"
    },
    "catalog-data-product-link-attribute-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductLinkAttributeInterface",
      "type": "object"
    },
    "catalog-data-product-link-attribute-interface": {
      "description": "",
      "properties": {
        "code": {
          "description": "Attribute code",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-link-attribute-extension-interface"
        },
        "type": {
          "description": "Attribute type",
          "type": "string"
        }
      },
      "required": [
        "code",
        "type"
      ],
      "type": "object"
    },
    "catalog-data-product-link-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductLinkInterface",
      "properties": {
        "qty": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "catalog-data-product-link-interface": {
      "description": "",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-link-extension-interface"
        },
        "link_type": {
          "description": "Link type",
          "type": "string"
        },
        "linked_product_sku": {
          "description": "Linked product sku",
          "type": "string"
        },
        "linked_product_type": {
          "description": "Linked product type (simple, virtual, etc)",
          "type": "string"
        },
        "position": {
          "description": "Linked item position",
          "type": "integer"
        },
        "sku": {
          "description": "SKU",
          "type": "string"
        }
      },
      "required": [
        "sku",
        "link_type",
        "linked_product_sku",
        "linked_product_type",
        "position"
      ],
      "type": "object"
    },
    "catalog-data-product-link-type-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductLinkTypeInterface",
      "type": "object"
    },
    "catalog-data-product-link-type-interface": {
      "description": "",
      "properties": {
        "code": {
          "description": "Link type code",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-link-type-extension-interface"
        },
        "name": {
          "description": "Link type name",
          "type": "string"
        }
      },
      "required": [
        "code",
        "name"
      ],
      "type": "object"
    },
    "catalog-data-product-option-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductOptionInterface",
      "properties": {
        "bundle_options": {
          "items": {
            "$ref": "#/definitions/bundle-data-bundle-option-interface"
          },
          "type": "array"
        },
        "configurable_item_options": {
          "items": {
            "$ref": "#/definitions/configurable-product-data-configurable-item-option-value-interface"
          },
          "type": "array"
        },
        "custom_options": {
          "items": {
            "$ref": "#/definitions/catalog-data-custom-option-interface"
          },
          "type": "array"
        },
        "downloadable_option": {
          "$ref": "#/definitions/downloadable-data-downloadable-option-interface"
        },
        "giftcard_item_option": {
          "$ref": "#/definitions/gift-card-data-gift-card-option-interface"
        }
      },
      "type": "object"
    },
    "catalog-data-product-option-interface": {
      "description": "Product option interface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-option-extension-interface"
        }
      },
      "type": "object"
    },
    "catalog-data-product-search-results-interface": {
      "description": "",
      "properties": {
        "items": {
          "description": "Attributes list.",
          "items": {
            "$ref": "#/definitions/catalog-data-product-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "catalog-data-product-tier-price-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductTierPriceInterface",
      "type": "object"
    },
    "catalog-data-product-tier-price-interface": {
      "description": "",
      "properties": {
        "customer_group_id": {
          "description": "Customer group id",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-tier-price-extension-interface"
        },
        "qty": {
          "description": "Tier qty",
          "type": "number"
        },
        "value": {
          "description": "Price value",
          "type": "number"
        }
      },
      "required": [
        "customer_group_id",
        "qty",
        "value"
      ],
      "type": "object"
    },
    "catalog-data-product-type-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductTypeInterface",
      "type": "object"
    },
    "catalog-data-product-type-interface": {
      "description": "Product type details",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-type-extension-interface"
        },
        "label": {
          "description": "Product type label",
          "type": "string"
        },
        "name": {
          "description": "Product type code",
          "type": "string"
        }
      },
      "required": [
        "name",
        "label"
      ],
      "type": "object"
    },
    "catalog-data-product-website-link-interface": {
      "description": "",
      "properties": {
        "sku": {
          "type": "string"
        },
        "website_id": {
          "description": "Website ids",
          "type": "integer"
        }
      },
      "required": [
        "sku",
        "website_id"
      ],
      "type": "object"
    },
    "catalog-inventory-data-stock-item-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\CatalogInventory\\Api\\Data\\StockItemInterface",
      "type": "object"
    },
    "catalog-inventory-data-stock-item-interface": {
      "description": "Interface StockItem",
      "properties": {
        "backorders": {
          "description": "Backorders status",
          "type": "integer"
        },
        "enable_qty_increments": {
          "description": "Whether Quantity Increments is enabled",
          "type": "boolean"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-inventory-data-stock-item-extension-interface"
        },
        "is_decimal_divided": {
          "type": "boolean"
        },
        "is_in_stock": {
          "description": "Stock Availability",
          "type": "boolean"
        },
        "is_qty_decimal": {
          "type": "boolean"
        },
        "item_id": {
          "type": "integer"
        },
        "low_stock_date": {
          "type": "string"
        },
        "manage_stock": {
          "description": "Can Manage Stock",
          "type": "boolean"
        },
        "max_sale_qty": {
          "description": "Maximum Qty Allowed in Shopping Cart data wrapper",
          "type": "number"
        },
        "min_qty": {
          "description": "Minimal quantity available for item status in stock",
          "type": "number"
        },
        "min_sale_qty": {
          "description": "Minimum Qty Allowed in Shopping Cart or NULL when there is no limitation",
          "type": "number"
        },
        "notify_stock_qty": {
          "description": "Notify for Quantity Below data wrapper",
          "type": "number"
        },
        "product_id": {
          "type": "integer"
        },
        "qty": {
          "type": "number"
        },
        "qty_increments": {
          "description": "Quantity Increments data wrapper",
          "type": "number"
        },
        "show_default_notification_message": {
          "type": "boolean"
        },
        "stock_id": {
          "description": "Stock identifier",
          "type": "integer"
        },
        "stock_status_changed_auto": {
          "type": "integer"
        },
        "use_config_backorders": {
          "type": "boolean"
        },
        "use_config_enable_qty_inc": {
          "type": "boolean"
        },
        "use_config_manage_stock": {
          "type": "boolean"
        },
        "use_config_max_sale_qty": {
          "type": "boolean"
        },
        "use_config_min_qty": {
          "type": "boolean"
        },
        "use_config_min_sale_qty": {
          "type": "integer"
        },
        "use_config_notify_stock_qty": {
          "type": "boolean"
        },
        "use_config_qty_increments": {
          "type": "boolean"
        }
      },
      "required": [
        "qty",
        "is_in_stock",
        "is_qty_decimal",
        "show_default_notification_message",
        "use_config_min_qty",
        "min_qty",
        "use_config_min_sale_qty",
        "min_sale_qty",
        "use_config_max_sale_qty",
        "max_sale_qty",
        "use_config_backorders",
        "backorders",
        "use_config_notify_stock_qty",
        "notify_stock_qty",
        "use_config_qty_increments",
        "qty_increments",
        "use_config_enable_qty_inc",
        "enable_qty_increments",
        "use_config_manage_stock",
        "manage_stock",
        "low_stock_date",
        "is_decimal_divided",
        "stock_status_changed_auto"
      ],
      "type": "object"
    },
    "catalog-inventory-data-stock-status-collection-interface": {
      "description": "Stock Status collection interface",
      "properties": {
        "items": {
          "description": "Items",
          "items": {
            "$ref": "#/definitions/catalog-inventory-data-stock-status-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/catalog-inventory-stock-status-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "catalog-inventory-data-stock-status-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\CatalogInventory\\Api\\Data\\StockStatusInterface",
      "type": "object"
    },
    "catalog-inventory-data-stock-status-interface": {
      "description": "Interface StockStatusInterface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/catalog-inventory-data-stock-status-extension-interface"
        },
        "product_id": {
          "type": "integer"
        },
        "qty": {
          "type": "integer"
        },
        "stock_id": {
          "type": "integer"
        },
        "stock_item": {
          "$ref": "#/definitions/catalog-inventory-data-stock-item-interface"
        },
        "stock_status": {
          "type": "integer"
        }
      },
      "required": [
        "product_id",
        "stock_id",
        "qty",
        "stock_status",
        "stock_item"
      ],
      "type": "object"
    },
    "catalog-inventory-stock-status-criteria-interface": {
      "description": "Interface StockStatusCriteriaInterface",
      "properties": {
        "criteria_list": {
          "description": "Criteria objects added to current Composite Criteria",
          "items": {
            "$ref": "#/definitions/framework-criteria-interface"
          },
          "type": "array"
        },
        "filters": {
          "description": "List of filters",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "limit": {
          "description": "Limit",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mapper_interface_name": {
          "description": "Associated Mapper Interface name",
          "type": "string"
        },
        "orders": {
          "description": "Ordering criteria",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "mapper_interface_name",
        "criteria_list",
        "filters",
        "orders",
        "limit"
      ],
      "type": "object"
    },
    "checkout-agreements-data-agreement-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\CheckoutAgreements\\Api\\Data\\AgreementInterface",
      "type": "object"
    },
    "checkout-agreements-data-agreement-interface": {
      "description": "Interface AgreementInterface",
      "properties": {
        "agreement_id": {
          "description": "Agreement ID.",
          "type": "integer"
        },
        "checkbox_text": {
          "description": "Agreement checkbox text.",
          "type": "string"
        },
        "content": {
          "description": "Agreement content.",
          "type": "string"
        },
        "content_height": {
          "description": "Agreement content height. Otherwise, null.",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/checkout-agreements-data-agreement-extension-interface"
        },
        "is_active": {
          "description": "Agreement status.",
          "type": "boolean"
        },
        "is_html": {
          "description": "* true - HTML. * false - plain text.",
          "type": "boolean"
        },
        "mode": {
          "description": "The agreement applied mode.",
          "type": "integer"
        },
        "name": {
          "description": "Agreement name.",
          "type": "string"
        }
      },
      "required": [
        "agreement_id",
        "name",
        "content",
        "checkbox_text",
        "is_active",
        "is_html",
        "mode"
      ],
      "type": "object"
    },
    "checkout-data-payment-details-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Checkout\\Api\\Data\\PaymentDetailsInterface",
      "type": "object"
    },
    "checkout-data-payment-details-interface": {
      "description": "Interface PaymentDetailsInterface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/checkout-data-payment-details-extension-interface"
        },
        "payment_methods": {
          "items": {
            "$ref": "#/definitions/quote-data-payment-method-interface"
          },
          "type": "array"
        },
        "totals": {
          "$ref": "#/definitions/quote-data-totals-interface"
        }
      },
      "required": [
        "payment_methods",
        "totals"
      ],
      "type": "object"
    },
    "checkout-data-shipping-information-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Checkout\\Api\\Data\\ShippingInformationInterface",
      "type": "object"
    },
    "checkout-data-shipping-information-interface": {
      "description": "Interface ShippingInformationInterface",
      "properties": {
        "billing_address": {
          "$ref": "#/definitions/quote-data-address-interface"
        },
        "custom_attributes": {
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          },
          "type": "array"
        },
        "extension_attributes": {
          "$ref": "#/definitions/checkout-data-shipping-information-extension-interface"
        },
        "shipping_address": {
          "$ref": "#/definitions/quote-data-address-interface"
        },
        "shipping_carrier_code": {
          "description": "Carrier code",
          "type": "string"
        },
        "shipping_method_code": {
          "description": "Shipping method code",
          "type": "string"
        }
      },
      "required": [
        "shipping_address",
        "shipping_method_code",
        "shipping_carrier_code"
      ],
      "type": "object"
    },
    "checkout-data-totals-information-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Checkout\\Api\\Data\\TotalsInformationInterface",
      "type": "object"
    },
    "checkout-data-totals-information-interface": {
      "description": "Interface TotalsInformationInterface",
      "properties": {
        "address": {
          "$ref": "#/definitions/quote-data-address-interface"
        },
        "custom_attributes": {
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          },
          "type": "array"
        },
        "extension_attributes": {
          "$ref": "#/definitions/checkout-data-totals-information-extension-interface"
        },
        "shipping_carrier_code": {
          "description": "Carrier code",
          "type": "string"
        },
        "shipping_method_code": {
          "description": "Shipping method code",
          "type": "string"
        }
      },
      "required": [
        "address"
      ],
      "type": "object"
    },
    "cms-data-block-interface": {
      "description": "CMS block interface.",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "content": {
          "description": "Content",
          "type": "string"
        },
        "creation_time": {
          "description": "Creation time",
          "type": "string"
        },
        "id": {
          "description": "ID",
          "type": "integer"
        },
        "identifier": {
          "description": "Identifier",
          "type": "string"
        },
        "title": {
          "description": "Title",
          "type": "string"
        },
        "update_time": {
          "description": "Update time",
          "type": "string"
        }
      },
      "required": [
        "identifier"
      ],
      "type": "object"
    },
    "cms-data-block-search-results-interface": {
      "description": "Interface for cms block search results.",
      "properties": {
        "items": {
          "description": "Blocks list.",
          "items": {
            "$ref": "#/definitions/cms-data-block-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "cms-data-page-interface": {
      "description": "CMS page interface.",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "content": {
          "description": "Content",
          "type": "string"
        },
        "content_heading": {
          "description": "Content heading",
          "type": "string"
        },
        "creation_time": {
          "description": "Creation time",
          "type": "string"
        },
        "custom_layout_update_xml": {
          "description": "Custom layout update xml",
          "type": "string"
        },
        "custom_root_template": {
          "description": "Custom root template",
          "type": "string"
        },
        "custom_theme": {
          "description": "Custom theme",
          "type": "string"
        },
        "custom_theme_from": {
          "description": "Custom theme from",
          "type": "string"
        },
        "custom_theme_to": {
          "description": "Custom theme to",
          "type": "string"
        },
        "id": {
          "description": "ID",
          "type": "integer"
        },
        "identifier": {
          "description": "Identifier",
          "type": "string"
        },
        "layout_update_xml": {
          "description": "Layout update xml",
          "type": "string"
        },
        "meta_description": {
          "description": "Meta description",
          "type": "string"
        },
        "meta_keywords": {
          "description": "Meta keywords",
          "type": "string"
        },
        "meta_title": {
          "description": "Meta title",
          "type": "string"
        },
        "page_layout": {
          "description": "Page layout",
          "type": "string"
        },
        "sort_order": {
          "description": "Sort order",
          "type": "string"
        },
        "title": {
          "description": "Title",
          "type": "string"
        },
        "update_time": {
          "description": "Update time",
          "type": "string"
        }
      },
      "required": [
        "identifier"
      ],
      "type": "object"
    },
    "cms-data-page-search-results-interface": {
      "description": "Interface for cms page search results.",
      "properties": {
        "items": {
          "description": "Pages list.",
          "items": {
            "$ref": "#/definitions/cms-data-page-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "configurable-product-data-configurable-item-option-value-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\ConfigurableProduct\\Api\\Data\\ConfigurableItemOptionValueInterface",
      "type": "object"
    },
    "configurable-product-data-configurable-item-option-value-interface": {
      "description": "Interface ConfigurableItemOptionValueInterface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/configurable-product-data-configurable-item-option-value-extension-interface"
        },
        "option_id": {
          "description": "Option SKU",
          "type": "string"
        },
        "option_value": {
          "description": "Item id",
          "type": "integer"
        }
      },
      "required": [
        "option_id"
      ],
      "type": "object"
    },
    "configurable-product-data-option-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\ConfigurableProduct\\Api\\Data\\OptionInterface",
      "type": "object"
    },
    "configurable-product-data-option-interface": {
      "description": "Interface OptionInterface",
      "properties": {
        "attribute_id": {
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/configurable-product-data-option-extension-interface"
        },
        "id": {
          "type": "integer"
        },
        "is_use_default": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "position": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/configurable-product-data-option-value-interface"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "configurable-product-data-option-value-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\ConfigurableProduct\\Api\\Data\\OptionValueInterface",
      "type": "object"
    },
    "configurable-product-data-option-value-interface": {
      "description": "Interface OptionValueInterface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/configurable-product-data-option-value-extension-interface"
        },
        "value_index": {
          "type": "integer"
        }
      },
      "required": [
        "value_index"
      ],
      "type": "object"
    },
    "customer-data-address-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\AddressInterface",
      "type": "object"
    },
    "customer-data-address-interface": {
      "description": "Customer address interface.",
      "properties": {
        "city": {
          "description": "City name",
          "type": "string"
        },
        "company": {
          "description": "Company",
          "type": "string"
        },
        "country_id": {
          "description": "Country code in ISO_3166-2 format",
          "type": "string"
        },
        "custom_attributes": {
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          },
          "type": "array"
        },
        "customer_id": {
          "description": "Customer ID",
          "type": "integer"
        },
        "default_billing": {
          "description": "If this address is default billing address",
          "type": "boolean"
        },
        "default_shipping": {
          "description": "If this address is default shipping address.",
          "type": "boolean"
        },
        "extension_attributes": {
          "$ref": "#/definitions/customer-data-address-extension-interface"
        },
        "fax": {
          "description": "Fax number",
          "type": "string"
        },
        "firstname": {
          "description": "First name",
          "type": "string"
        },
        "id": {
          "description": "ID",
          "type": "integer"
        },
        "lastname": {
          "description": "Last name",
          "type": "string"
        },
        "middlename": {
          "description": "Middle name",
          "type": "string"
        },
        "postcode": {
          "description": "Postcode",
          "type": "string"
        },
        "prefix": {
          "description": "Prefix",
          "type": "string"
        },
        "region": {
          "$ref": "#/definitions/customer-data-region-interface"
        },
        "region_id": {
          "description": "Region ID",
          "type": "integer"
        },
        "street": {
          "description": "Street",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "suffix": {
          "description": "Suffix",
          "type": "string"
        },
        "telephone": {
          "description": "Telephone number",
          "type": "string"
        },
        "vat_id": {
          "description": "Vat id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "customer-data-attribute-metadata-interface": {
      "description": "Customer attribute metadata interface.",
      "properties": {
        "attribute_code": {
          "description": "Code of the attribute.",
          "type": "string"
        },
        "backend_type": {
          "description": "Backend type.",
          "type": "string"
        },
        "data_model": {
          "description": "Data model for attribute.",
          "type": "string"
        },
        "frontend_class": {
          "description": "Class which is used to display the attribute on frontend.",
          "type": "string"
        },
        "frontend_input": {
          "description": "HTML for input element.",
          "type": "string"
        },
        "frontend_label": {
          "description": "Label which supposed to be displayed on frontend.",
          "type": "string"
        },
        "input_filter": {
          "description": "Template used for input (e.g. \"date\")",
          "type": "string"
        },
        "is_filterable_in_grid": {
          "description": "It is filterable in customer grid",
          "type": "boolean"
        },
        "is_searchable_in_grid": {
          "description": "It is searchable in customer grid",
          "type": "boolean"
        },
        "is_used_in_grid": {
          "description": "It is used in customer grid",
          "type": "boolean"
        },
        "is_visible_in_grid": {
          "description": "It is visible in customer grid",
          "type": "boolean"
        },
        "multiline_count": {
          "description": "Of lines of the attribute value.",
          "type": "integer"
        },
        "note": {
          "description": "The note attribute for the element.",
          "type": "string"
        },
        "options": {
          "description": "Options of the attribute (key => value pairs for select)",
          "items": {
            "$ref": "#/definitions/customer-data-option-interface"
          },
          "type": "array"
        },
        "required": {
          "description": "Attribute is required.",
          "type": "boolean"
        },
        "sort_order": {
          "description": "Attributes sort order.",
          "type": "integer"
        },
        "store_label": {
          "description": "Label of the store.",
          "type": "string"
        },
        "system": {
          "description": "This is a system attribute.",
          "type": "boolean"
        },
        "user_defined": {
          "description": "Current attribute has been defined by a user.",
          "type": "boolean"
        },
        "validation_rules": {
          "description": "Validation rules.",
          "items": {
            "$ref": "#/definitions/customer-data-validation-rule-interface"
          },
          "type": "array"
        },
        "visible": {
          "description": "Attribute is visible on frontend.",
          "type": "boolean"
        }
      },
      "required": [
        "frontend_input",
        "input_filter",
        "store_label",
        "validation_rules",
        "multiline_count",
        "visible",
        "required",
        "data_model",
        "options",
        "frontend_class",
        "user_defined",
        "sort_order",
        "frontend_label",
        "note",
        "system",
        "backend_type",
        "attribute_code"
      ],
      "type": "object"
    },
    "customer-data-customer-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\CustomerInterface",
      "properties": {
        "is_subscribed": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "customer-data-customer-interface": {
      "description": "Customer interface.",
      "properties": {
        "addresses": {
          "description": "Customer addresses.",
          "items": {
            "$ref": "#/definitions/customer-data-address-interface"
          },
          "type": "array"
        },
        "confirmation": {
          "description": "Confirmation",
          "type": "string"
        },
        "created_at": {
          "description": "Created at time",
          "type": "string"
        },
        "created_in": {
          "description": "Created in area",
          "type": "string"
        },
        "custom_attributes": {
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          },
          "type": "array"
        },
        "default_billing": {
          "description": "Default billing address id",
          "type": "string"
        },
        "default_shipping": {
          "description": "Default shipping address id",
          "type": "string"
        },
        "disable_auto_group_change": {
          "description": "Disable auto group change flag.",
          "type": "integer"
        },
        "dob": {
          "description": "Date of birth",
          "type": "string"
        },
        "email": {
          "description": "Email address",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/customer-data-customer-extension-interface"
        },
        "firstname": {
          "description": "First name",
          "type": "string"
        },
        "gender": {
          "description": "Gender",
          "type": "integer"
        },
        "group_id": {
          "description": "Group id",
          "type": "integer"
        },
        "id": {
          "description": "Customer id",
          "type": "integer"
        },
        "lastname": {
          "description": "Last name",
          "type": "string"
        },
        "middlename": {
          "description": "Middle name",
          "type": "string"
        },
        "prefix": {
          "description": "Prefix",
          "type": "string"
        },
        "store_id": {
          "description": "Store id",
          "type": "integer"
        },
        "suffix": {
          "description": "Suffix",
          "type": "string"
        },
        "taxvat": {
          "description": "Tax Vat",
          "type": "string"
        },
        "updated_at": {
          "description": "Updated at time",
          "type": "string"
        },
        "website_id": {
          "description": "Website id",
          "type": "integer"
        }
      },
      "required": [
        "email",
        "firstname",
        "lastname"
      ],
      "type": "object"
    },
    "customer-data-customer-search-results-interface": {
      "description": "Interface for customer search results.",
      "properties": {
        "items": {
          "description": "Customers list.",
          "items": {
            "$ref": "#/definitions/customer-data-customer-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "customer-data-group-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\GroupInterface",
      "type": "object"
    },
    "customer-data-group-interface": {
      "description": "Customer group interface.",
      "properties": {
        "code": {
          "description": "Code",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/customer-data-group-extension-interface"
        },
        "id": {
          "description": "Id",
          "type": "integer"
        },
        "tax_class_id": {
          "description": "Tax class id",
          "type": "integer"
        },
        "tax_class_name": {
          "description": "Tax class name",
          "type": "string"
        }
      },
      "required": [
        "code",
        "tax_class_id"
      ],
      "type": "object"
    },
    "customer-data-group-search-results-interface": {
      "description": "Interface for customer groups search results.",
      "properties": {
        "items": {
          "description": "Customer groups list.",
          "items": {
            "$ref": "#/definitions/customer-data-group-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "customer-data-option-interface": {
      "description": "Option interface.",
      "properties": {
        "label": {
          "description": "Option label",
          "type": "string"
        },
        "options": {
          "description": "Nested options",
          "items": {
            "$ref": "#/definitions/customer-data-option-interface"
          },
          "type": "array"
        },
        "value": {
          "description": "Option value",
          "type": "string"
        }
      },
      "required": [
        "label"
      ],
      "type": "object"
    },
    "customer-data-region-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\RegionInterface",
      "type": "object"
    },
    "customer-data-region-interface": {
      "description": "Customer address region interface.",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/customer-data-region-extension-interface"
        },
        "region": {
          "description": "Region",
          "type": "string"
        },
        "region_code": {
          "description": "Region code",
          "type": "string"
        },
        "region_id": {
          "description": "Region id",
          "type": "integer"
        }
      },
      "required": [
        "region_code",
        "region",
        "region_id"
      ],
      "type": "object"
    },
    "customer-data-validation-results-interface": {
      "description": "Validation results interface.",
      "properties": {
        "messages": {
          "description": "Error messages as array in case of validation failure, else return empty array.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "valid": {
          "description": "If the provided data is valid.",
          "type": "boolean"
        }
      },
      "required": [
        "valid",
        "messages"
      ],
      "type": "object"
    },
    "customer-data-validation-rule-interface": {
      "description": "Validation rule interface.",
      "properties": {
        "name": {
          "description": "Validation rule name",
          "type": "string"
        },
        "value": {
          "description": "Validation rule value",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "directory-data-country-information-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\CountryInformationInterface",
      "type": "object"
    },
    "directory-data-country-information-interface": {
      "description": "Country Information interface.",
      "properties": {
        "available_regions": {
          "description": "The available regions for the store.",
          "items": {
            "$ref": "#/definitions/directory-data-region-information-interface"
          },
          "type": "array"
        },
        "extension_attributes": {
          "$ref": "#/definitions/directory-data-country-information-extension-interface"
        },
        "full_name_english": {
          "description": "The country full name (in English) for the store.",
          "type": "string"
        },
        "full_name_locale": {
          "description": "The country full name (in store locale) for the store.",
          "type": "string"
        },
        "id": {
          "description": "The country id for the store.",
          "type": "string"
        },
        "three_letter_abbreviation": {
          "description": "The country 3 letter abbreviation for the store.",
          "type": "string"
        },
        "two_letter_abbreviation": {
          "description": "The country 2 letter abbreviation for the store.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "two_letter_abbreviation",
        "three_letter_abbreviation",
        "full_name_locale",
        "full_name_english"
      ],
      "type": "object"
    },
    "directory-data-currency-information-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\CurrencyInformationInterface",
      "type": "object"
    },
    "directory-data-currency-information-interface": {
      "description": "Currency Information interface.",
      "properties": {
        "available_currency_codes": {
          "description": "The list of allowed currency codes for the store.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "base_currency_code": {
          "description": "The base currency code for the store.",
          "type": "string"
        },
        "base_currency_symbol": {
          "description": "The currency symbol of the base currency for the store.",
          "type": "string"
        },
        "default_display_currency_code": {
          "description": "The default display currency code for the store.",
          "type": "string"
        },
        "default_display_currency_symbol": {
          "description": "The currency symbol of the default display currency for the store.",
          "type": "string"
        },
        "exchange_rates": {
          "description": "The list of exchange rate information for the store.",
          "items": {
            "$ref": "#/definitions/directory-data-exchange-rate-interface"
          },
          "type": "array"
        },
        "extension_attributes": {
          "$ref": "#/definitions/directory-data-currency-information-extension-interface"
        }
      },
      "required": [
        "base_currency_code",
        "base_currency_symbol",
        "default_display_currency_code",
        "default_display_currency_symbol",
        "available_currency_codes",
        "exchange_rates"
      ],
      "type": "object"
    },
    "directory-data-exchange-rate-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\ExchangeRateInterface",
      "type": "object"
    },
    "directory-data-exchange-rate-interface": {
      "description": "Exchange Rate interface.",
      "properties": {
        "currency_to": {
          "description": "The currency code associated with the exchange rate.",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/directory-data-exchange-rate-extension-interface"
        },
        "rate": {
          "description": "The exchange rate for the associated currency and the store's base currency.",
          "type": "number"
        }
      },
      "required": [
        "currency_to",
        "rate"
      ],
      "type": "object"
    },
    "directory-data-region-information-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\RegionInformationInterface",
      "type": "object"
    },
    "directory-data-region-information-interface": {
      "description": "Region Information interface.",
      "properties": {
        "code": {
          "description": "Region code",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/directory-data-region-information-extension-interface"
        },
        "id": {
          "description": "Region id",
          "type": "string"
        },
        "name": {
          "description": "Region name",
          "type": "string"
        }
      },
      "required": [
        "id",
        "code",
        "name"
      ],
      "type": "object"
    },
    "downloadable-data-downloadable-option-interface": {
      "description": "Downloadable Option",
      "properties": {
        "downloadable_links": {
          "description": "The list of downloadable links",
          "items": {
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "downloadable_links"
      ],
      "type": "object"
    },
    "downloadable-data-file-content-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Downloadable\\Api\\Data\\File\\ContentInterface",
      "type": "object"
    },
    "downloadable-data-file-content-interface": {
      "description": "",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/downloadable-data-file-content-extension-interface"
        },
        "file_data": {
          "description": "Data (base64 encoded content)",
          "type": "string"
        },
        "name": {
          "description": "File name",
          "type": "string"
        }
      },
      "required": [
        "file_data",
        "name"
      ],
      "type": "object"
    },
    "downloadable-data-link-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Downloadable\\Api\\Data\\LinkInterface",
      "type": "object"
    },
    "downloadable-data-link-interface": {
      "description": "",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/downloadable-data-link-extension-interface"
        },
        "id": {
          "description": "Sample(or link) id",
          "type": "integer"
        },
        "is_shareable": {
          "description": "Shareable status",
          "type": "integer"
        },
        "link_file": {
          "description": "relative file path",
          "type": "string"
        },
        "link_file_content": {
          "$ref": "#/definitions/downloadable-data-file-content-interface"
        },
        "link_type": {
          "type": "string"
        },
        "link_url": {
          "description": "Link url or null when type is 'file'",
          "type": "string"
        },
        "number_of_downloads": {
          "description": "Of downloads per user",
          "type": "integer"
        },
        "price": {
          "description": "Price",
          "type": "number"
        },
        "sample_file": {
          "description": "relative file path",
          "type": "string"
        },
        "sample_file_content": {
          "$ref": "#/definitions/downloadable-data-file-content-interface"
        },
        "sample_type": {
          "type": "string"
        },
        "sample_url": {
          "description": "file URL",
          "type": "string"
        },
        "sort_order": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        }
      },
      "required": [
        "sort_order",
        "is_shareable",
        "price",
        "link_type",
        "sample_type"
      ],
      "type": "object"
    },
    "downloadable-data-sample-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Downloadable\\Api\\Data\\SampleInterface",
      "type": "object"
    },
    "downloadable-data-sample-interface": {
      "description": "",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/downloadable-data-sample-extension-interface"
        },
        "id": {
          "description": "Sample(or link) id",
          "type": "integer"
        },
        "sample_file": {
          "description": "relative file path",
          "type": "string"
        },
        "sample_file_content": {
          "$ref": "#/definitions/downloadable-data-file-content-interface"
        },
        "sample_type": {
          "type": "string"
        },
        "sample_url": {
          "description": "file URL",
          "type": "string"
        },
        "sort_order": {
          "description": "Order index for sample",
          "type": "integer"
        },
        "title": {
          "description": "Title",
          "type": "string"
        }
      },
      "required": [
        "title",
        "sort_order",
        "sample_type"
      ],
      "type": "object"
    },
    "eav-data-attribute-frontend-label-interface": {
      "description": "Interface AttributeFrontendLabelInterface",
      "properties": {
        "label": {
          "description": "Option label",
          "type": "string"
        },
        "store_id": {
          "description": "Store id",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "eav-data-attribute-group-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Eav\\Api\\Data\\AttributeGroupInterface",
      "properties": {
        "attribute_group_code": {
          "type": "string"
        },
        "sort_order": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "eav-data-attribute-group-interface": {
      "description": "Interface AttributeGroupInterface",
      "properties": {
        "attribute_group_id": {
          "description": "Id",
          "type": "string"
        },
        "attribute_group_name": {
          "description": "Name",
          "type": "string"
        },
        "attribute_set_id": {
          "description": "Attribute set id",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/eav-data-attribute-group-extension-interface"
        }
      },
      "type": "object"
    },
    "eav-data-attribute-group-search-results-interface": {
      "description": "Interface AttributeGroupSearchResultsInterface",
      "properties": {
        "items": {
          "description": "Attribute sets list.",
          "items": {
            "$ref": "#/definitions/eav-data-attribute-group-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "eav-data-attribute-option-interface": {
      "description": "Created from:",
      "properties": {
        "is_default": {
          "description": "Default",
          "type": "boolean"
        },
        "label": {
          "description": "Option label",
          "type": "string"
        },
        "sort_order": {
          "description": "Option order",
          "type": "integer"
        },
        "store_labels": {
          "description": "Option label for store scopes",
          "items": {
            "$ref": "#/definitions/eav-data-attribute-option-label-interface"
          },
          "type": "array"
        },
        "value": {
          "description": "Option value",
          "type": "string"
        }
      },
      "required": [
        "label",
        "value"
      ],
      "type": "object"
    },
    "eav-data-attribute-option-label-interface": {
      "description": "Interface AttributeOptionLabelInterface",
      "properties": {
        "label": {
          "description": "Option label",
          "type": "string"
        },
        "store_id": {
          "description": "Store id",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "eav-data-attribute-set-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Eav\\Api\\Data\\AttributeSetInterface",
      "type": "object"
    },
    "eav-data-attribute-set-interface": {
      "description": "Interface AttributeSetInterface",
      "properties": {
        "attribute_set_id": {
          "description": "Attribute set ID",
          "type": "integer"
        },
        "attribute_set_name": {
          "description": "Attribute set name",
          "type": "string"
        },
        "entity_type_id": {
          "description": "Attribute set entity type id",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/eav-data-attribute-set-extension-interface"
        },
        "sort_order": {
          "description": "Attribute set sort order index",
          "type": "integer"
        }
      },
      "required": [
        "attribute_set_name",
        "sort_order"
      ],
      "type": "object"
    },
    "eav-data-attribute-set-search-results-interface": {
      "description": "Interface AttributeSetSearchResultsInterface",
      "properties": {
        "items": {
          "description": "Attribute sets list.",
          "items": {
            "$ref": "#/definitions/eav-data-attribute-set-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "eav-data-attribute-validation-rule-interface": {
      "description": "Interface AttributeValidationRuleInterface",
      "properties": {
        "key": {
          "description": "Object key",
          "type": "string"
        },
        "value": {
          "description": "Object value",
          "type": "string"
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "error-errors": {
      "description": "Errors list",
      "items": {
        "$ref": "#/definitions/error-errors-item"
      },
      "type": "array"
    },
    "error-errors-item": {
      "description": "Error details",
      "properties": {
        "message": {
          "description": "Error message",
          "type": "string"
        },
        "parameters": {
          "$ref": "#/definitions/error-parameters"
        }
      },
      "type": "object"
    },
    "error-parameters": {
      "description": "Error parameters list",
      "items": {
        "$ref": "#/definitions/error-parameters-item"
      },
      "type": "array"
    },
    "error-parameters-item": {
      "description": "Error parameters item",
      "properties": {
        "fieldName": {
          "description": "Missing or invalid field name",
          "type": "string"
        },
        "fieldValue": {
          "description": "Incorrect field value",
          "type": "string"
        },
        "resources": {
          "description": "ACL resource",
          "type": "string"
        }
      },
      "type": "object"
    },
    "error-response": {
      "properties": {
        "code": {
          "description": "Error code",
          "type": "integer"
        },
        "errors": {
          "$ref": "#/definitions/error-errors"
        },
        "message": {
          "description": "Error message",
          "type": "string"
        },
        "parameters": {
          "$ref": "#/definitions/error-parameters"
        },
        "trace": {
          "description": "Stack trace",
          "type": "string"
        }
      },
      "required": [
        "message"
      ],
      "type": "object"
    },
    "framework-attribute-interface": {
      "description": "Interface for custom attribute value.",
      "properties": {
        "attribute_code": {
          "description": "Attribute code",
          "type": "string"
        },
        "value": {
          "description": "Attribute value",
          "type": "string"
        }
      },
      "required": [
        "attribute_code",
        "value"
      ],
      "type": "object"
    },
    "framework-criteria-interface": {
      "description": "Interface CriteriaInterface",
      "properties": {
        "criteria_list": {
          "description": "Criteria objects added to current Composite Criteria",
          "items": {
            "$ref": "#/definitions/framework-criteria-interface"
          },
          "type": "array"
        },
        "filters": {
          "description": "List of filters",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "limit": {
          "description": "Limit",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mapper_interface_name": {
          "description": "Associated Mapper Interface name",
          "type": "string"
        },
        "orders": {
          "description": "Ordering criteria",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "mapper_interface_name",
        "criteria_list",
        "filters",
        "orders",
        "limit"
      ],
      "type": "object"
    },
    "framework-data-image-content-interface": {
      "description": "Image Content data interface",
      "properties": {
        "base64_encoded_data": {
          "description": "Media data (base64 encoded content)",
          "type": "string"
        },
        "name": {
          "description": "Image name",
          "type": "string"
        },
        "type": {
          "description": "MIME type",
          "type": "string"
        }
      },
      "required": [
        "base64_encoded_data",
        "type",
        "name"
      ],
      "type": "object"
    },
    "framework-data-video-content-interface": {
      "description": "Video Content data interface",
      "properties": {
        "media_type": {
          "description": "MIME type",
          "type": "string"
        },
        "video_description": {
          "description": "Video Description",
          "type": "string"
        },
        "video_metadata": {
          "description": "Metadata",
          "type": "string"
        },
        "video_provider": {
          "description": "Provider",
          "type": "string"
        },
        "video_title": {
          "description": "Title",
          "type": "string"
        },
        "video_url": {
          "description": "Video URL",
          "type": "string"
        }
      },
      "required": [
        "media_type",
        "video_provider",
        "video_url",
        "video_title",
        "video_description",
        "video_metadata"
      ],
      "type": "object"
    },
    "framework-filter": {
      "description": "Filter which can be used by any methods from service layer.",
      "properties": {
        "condition_type": {
          "description": "Condition type",
          "type": "string"
        },
        "field": {
          "description": "Field",
          "type": "string"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "required": [
        "field",
        "value"
      ],
      "type": "object"
    },
    "framework-metadata-object-interface": {
      "description": "Provides metadata about an attribute.",
      "properties": {
        "attribute_code": {
          "description": "Code of the attribute.",
          "type": "string"
        }
      },
      "required": [
        "attribute_code"
      ],
      "type": "object"
    },
    "framework-search-aggregation-interface": {
      "description": "Faceted data",
      "properties": {
        "bucket_names": {
          "description": "Document field names",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "buckets": {
          "description": "All Document fields",
          "items": {
            "$ref": "#/definitions/framework-search-bucket-interface"
          },
          "type": "array"
        }
      },
      "required": [
        "buckets",
        "bucket_names"
      ],
      "type": "object"
    },
    "framework-search-aggregation-value-interface": {
      "description": "",
      "properties": {
        "metrics": {
          "description": "Metrics",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "value": {
          "description": "Aggregation",
          "type": "string"
        }
      },
      "required": [
        "value",
        "metrics"
      ],
      "type": "object"
    },
    "framework-search-bucket-interface": {
      "description": "Facet Bucket",
      "properties": {
        "name": {
          "description": "Field name",
          "type": "string"
        },
        "values": {
          "description": "Field values",
          "items": {
            "$ref": "#/definitions/framework-search-aggregation-value-interface"
          },
          "type": "array"
        }
      },
      "required": [
        "name",
        "values"
      ],
      "type": "object"
    },
    "framework-search-criteria-interface": {
      "description": "Search criteria interface.",
      "properties": {
        "current_page": {
          "description": "Current page.",
          "type": "integer"
        },
        "filter_groups": {
          "description": "A list of filter groups.",
          "items": {
            "$ref": "#/definitions/framework-search-filter-group"
          },
          "type": "array"
        },
        "page_size": {
          "description": "Page size.",
          "type": "integer"
        },
        "sort_orders": {
          "description": "Sort order.",
          "items": {
            "$ref": "#/definitions/framework-sort-order"
          },
          "type": "array"
        }
      },
      "required": [
        "filter_groups"
      ],
      "type": "object"
    },
    "framework-search-document-interface": {
      "description": "",
      "properties": {
        "custom_attributes": {
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          },
          "type": "array"
        },
        "id": {
          "type": "integer"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "framework-search-filter-group": {
      "description": "Groups two or more filters together using a logical OR",
      "properties": {
        "filters": {
          "description": "A list of filters in this group",
          "items": {
            "$ref": "#/definitions/framework-filter"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "framework-search-search-criteria-interface": {
      "description": "",
      "properties": {
        "current_page": {
          "description": "Current page.",
          "type": "integer"
        },
        "filter_groups": {
          "description": "A list of filter groups.",
          "items": {
            "$ref": "#/definitions/framework-search-filter-group"
          },
          "type": "array"
        },
        "page_size": {
          "description": "Page size.",
          "type": "integer"
        },
        "request_name": {
          "type": "string"
        },
        "sort_orders": {
          "description": "Sort order.",
          "items": {
            "$ref": "#/definitions/framework-sort-order"
          },
          "type": "array"
        }
      },
      "required": [
        "request_name",
        "filter_groups"
      ],
      "type": "object"
    },
    "framework-search-search-result-interface": {
      "description": "",
      "properties": {
        "aggregations": {
          "$ref": "#/definitions/framework-search-aggregation-interface"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/framework-search-document-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "aggregations",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "framework-sort-order": {
      "description": "Data object for sort order.",
      "properties": {
        "direction": {
          "description": "Sorting direction.",
          "type": "string"
        },
        "field": {
          "description": "Sorting field.",
          "type": "string"
        }
      },
      "required": [
        "field",
        "direction"
      ],
      "type": "object"
    },
    "gift-card-account-data-gift-card-account-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\GiftCardAccount\\Api\\Data\\GiftCardAccountInterface",
      "type": "object"
    },
    "gift-card-account-data-gift-card-account-interface": {
      "description": "Gift Card Account data",
      "properties": {
        "base_gift_cards_amount": {
          "description": "Cards amount in base currency",
          "type": "number"
        },
        "base_gift_cards_amount_used": {
          "description": "Cards amount used in base currency",
          "type": "number"
        },
        "extension_attributes": {
          "$ref": "#/definitions/gift-card-account-data-gift-card-account-extension-interface"
        },
        "gift_cards": {
          "description": "Cards codes",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "gift_cards_amount": {
          "description": "Cards amount in quote currency",
          "type": "number"
        },
        "gift_cards_amount_used": {
          "description": "Cards amount used in quote currency",
          "type": "number"
        }
      },
      "required": [
        "gift_cards",
        "gift_cards_amount",
        "base_gift_cards_amount",
        "gift_cards_amount_used",
        "base_gift_cards_amount_used"
      ],
      "type": "object"
    },
    "gift-card-data-gift-card-option-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\GiftCard\\Api\\Data\\GiftCardOptionInterface",
      "type": "object"
    },
    "gift-card-data-gift-card-option-interface": {
      "description": "Interface GiftCardOptionInterface",
      "properties": {
        "custom_giftcard_amount": {
          "description": "Gift card open amount value.",
          "type": "number"
        },
        "extension_attributes": {
          "$ref": "#/definitions/gift-card-data-gift-card-option-extension-interface"
        },
        "giftcard_amount": {
          "description": "Gift card amount.",
          "type": "string"
        },
        "giftcard_message": {
          "description": "Giftcard message.",
          "type": "string"
        },
        "giftcard_recipient_email": {
          "description": "Gift card recipient email.",
          "type": "string"
        },
        "giftcard_recipient_name": {
          "description": "Gift card recipient name.",
          "type": "string"
        },
        "giftcard_sender_email": {
          "description": "Gift card sender email.",
          "type": "string"
        },
        "giftcard_sender_name": {
          "description": "Gift card sender name.",
          "type": "string"
        }
      },
      "required": [
        "giftcard_amount",
        "giftcard_sender_name",
        "giftcard_recipient_name",
        "giftcard_sender_email",
        "giftcard_recipient_email"
      ],
      "type": "object"
    },
    "gift-card-data-giftcard-amount-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\GiftCard\\Api\\Data\\GiftcardAmountInterface",
      "type": "object"
    },
    "gift-card-data-giftcard-amount-interface": {
      "description": "Interface GiftcardAmountInterface: this interface is used to serialize and deserialize EAV attribute giftcard_amounts",
      "properties": {
        "attribute_id": {
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/gift-card-data-giftcard-amount-extension-interface"
        },
        "value": {
          "type": "number"
        },
        "website_id": {
          "type": "integer"
        },
        "website_value": {
          "type": "number"
        }
      },
      "required": [
        "attribute_id",
        "website_id",
        "value",
        "website_value"
      ],
      "type": "object"
    },
    "gift-message-data-message-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\GiftMessage\\Api\\Data\\MessageInterface",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "entity_type": {
          "type": "string"
        },
        "wrapping_add_printed_card": {
          "type": "boolean"
        },
        "wrapping_allow_gift_receipt": {
          "type": "boolean"
        },
        "wrapping_id": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "gift-message-data-message-interface": {
      "description": "Interface MessageInterface",
      "properties": {
        "customer_id": {
          "description": "Customer ID. Otherwise, null.",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/gift-message-data-message-extension-interface"
        },
        "gift_message_id": {
          "description": "Gift message ID. Otherwise, null.",
          "type": "integer"
        },
        "message": {
          "description": "Message text.",
          "type": "string"
        },
        "recipient": {
          "description": "Recipient name.",
          "type": "string"
        },
        "sender": {
          "description": "Sender name.",
          "type": "string"
        }
      },
      "required": [
        "sender",
        "recipient",
        "message"
      ],
      "type": "object"
    },
    "gift-wrapping-data-wrapping-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\GiftWrapping\\Api\\Data\\WrappingInterface",
      "type": "object"
    },
    "gift-wrapping-data-wrapping-interface": {
      "description": "Interface WrappingInterface",
      "properties": {
        "base_currency_code": {
          "type": "string"
        },
        "base_price": {
          "type": "number"
        },
        "design": {
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/gift-wrapping-data-wrapping-extension-interface"
        },
        "image_base64_content": {
          "type": "string"
        },
        "image_name": {
          "type": "string"
        },
        "image_url": {
          "description": "Wrapping image URL.",
          "type": "string"
        },
        "status": {
          "type": "integer"
        },
        "website_ids": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "wrapping_id": {
          "type": "integer"
        }
      },
      "required": [
        "design",
        "status",
        "base_price"
      ],
      "type": "object"
    },
    "gift-wrapping-data-wrapping-search-results-interface": {
      "description": "Interface WrappingSearchResultsInterface",
      "properties": {
        "items": {
          "description": "Items",
          "items": {
            "$ref": "#/definitions/gift-wrapping-data-wrapping-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "quote-data-address-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\AddressInterface",
      "properties": {
        "gift_registry_id": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "quote-data-address-interface": {
      "description": "Interface AddressInterface",
      "properties": {
        "city": {
          "description": "City name",
          "type": "string"
        },
        "company": {
          "description": "Company",
          "type": "string"
        },
        "country_id": {
          "description": "Country id",
          "type": "string"
        },
        "custom_attributes": {
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          },
          "type": "array"
        },
        "customer_address_id": {
          "description": "Customer address id",
          "type": "integer"
        },
        "customer_id": {
          "description": "Customer id",
          "type": "integer"
        },
        "email": {
          "description": "Billing/shipping email",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-address-extension-interface"
        },
        "fax": {
          "description": "Fax number",
          "type": "string"
        },
        "firstname": {
          "description": "First name",
          "type": "string"
        },
        "id": {
          "description": "Id",
          "type": "integer"
        },
        "lastname": {
          "description": "Last name",
          "type": "string"
        },
        "middlename": {
          "description": "Middle name",
          "type": "string"
        },
        "postcode": {
          "description": "Postcode",
          "type": "string"
        },
        "prefix": {
          "description": "Prefix",
          "type": "string"
        },
        "region": {
          "description": "Region name",
          "type": "string"
        },
        "region_code": {
          "description": "Region code",
          "type": "string"
        },
        "region_id": {
          "description": "Region id",
          "type": "integer"
        },
        "same_as_billing": {
          "description": "Same as billing flag",
          "type": "integer"
        },
        "save_in_address_book": {
          "description": "Save in address book flag",
          "type": "integer"
        },
        "street": {
          "description": "Street",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "suffix": {
          "description": "Suffix",
          "type": "string"
        },
        "telephone": {
          "description": "Telephone number",
          "type": "string"
        },
        "vat_id": {
          "description": "Vat id",
          "type": "string"
        }
      },
      "required": [
        "region",
        "region_id",
        "region_code",
        "country_id",
        "street",
        "telephone",
        "postcode",
        "city",
        "firstname",
        "lastname",
        "email"
      ],
      "type": "object"
    },
    "quote-data-cart-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\CartInterface",
      "properties": {
        "shipping_assignments": {
          "items": {
            "$ref": "#/definitions/quote-data-shipping-assignment-interface"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "quote-data-cart-interface": {
      "description": "Interface CartInterface",
      "properties": {
        "billing_address": {
          "$ref": "#/definitions/quote-data-address-interface"
        },
        "converted_at": {
          "description": "Cart conversion date and time. Otherwise, null.",
          "type": "string"
        },
        "created_at": {
          "description": "Cart creation date and time. Otherwise, null.",
          "type": "string"
        },
        "currency": {
          "$ref": "#/definitions/quote-data-currency-interface"
        },
        "customer": {
          "$ref": "#/definitions/customer-data-customer-interface"
        },
        "customer_is_guest": {
          "description": "For guest customers, false for logged in customers",
          "type": "boolean"
        },
        "customer_note": {
          "description": "Notice text",
          "type": "string"
        },
        "customer_note_notify": {
          "description": "Customer notification flag",
          "type": "boolean"
        },
        "customer_tax_class_id": {
          "description": "Customer tax class ID.",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-cart-extension-interface"
        },
        "id": {
          "description": "Cart/quote ID.",
          "type": "integer"
        },
        "is_active": {
          "description": "Active status flag value. Otherwise, null.",
          "type": "boolean"
        },
        "is_virtual": {
          "description": "Virtual flag value. Otherwise, null.",
          "type": "boolean"
        },
        "items": {
          "description": "Array of items. Otherwise, null.",
          "items": {
            "$ref": "#/definitions/quote-data-cart-item-interface"
          },
          "type": "array"
        },
        "items_count": {
          "description": "Number of different items or products in the cart. Otherwise, null.",
          "type": "integer"
        },
        "items_qty": {
          "description": "Total quantity of all cart items. Otherwise, null.",
          "type": "number"
        },
        "orig_order_id": {
          "description": "Original order ID. Otherwise, null.",
          "type": "integer"
        },
        "reserved_order_id": {
          "description": "Reserved order ID. Otherwise, null.",
          "type": "integer"
        },
        "store_id": {
          "description": "Store identifier",
          "type": "integer"
        },
        "updated_at": {
          "description": "Cart last update date and time. Otherwise, null.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "customer",
        "store_id"
      ],
      "type": "object"
    },
    "quote-data-cart-item-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\CartItemInterface",
      "type": "object"
    },
    "quote-data-cart-item-interface": {
      "description": "Interface CartItemInterface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-cart-item-extension-interface"
        },
        "item_id": {
          "description": "Item ID. Otherwise, null.",
          "type": "integer"
        },
        "name": {
          "description": "Product name. Otherwise, null.",
          "type": "string"
        },
        "price": {
          "description": "Product price. Otherwise, null.",
          "type": "number"
        },
        "product_option": {
          "$ref": "#/definitions/quote-data-product-option-interface"
        },
        "product_type": {
          "description": "Product type. Otherwise, null.",
          "type": "string"
        },
        "qty": {
          "description": "Product quantity.",
          "type": "number"
        },
        "quote_id": {
          "description": "Quote id.",
          "type": "string"
        },
        "sku": {
          "description": "Product SKU. Otherwise, null.",
          "type": "string"
        }
      },
      "required": [
        "qty",
        "quote_id"
      ],
      "type": "object"
    },
    "quote-data-cart-search-results-interface": {
      "description": "Interface CartSearchResultsInterface",
      "properties": {
        "items": {
          "description": "Carts list.",
          "items": {
            "$ref": "#/definitions/quote-data-cart-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "quote-data-currency-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\CurrencyInterface",
      "type": "object"
    },
    "quote-data-currency-interface": {
      "description": "Interface CurrencyInterface",
      "properties": {
        "base_currency_code": {
          "description": "Base currency code",
          "type": "string"
        },
        "base_to_global_rate": {
          "description": "Base currency to global currency rate",
          "type": "number"
        },
        "base_to_quote_rate": {
          "description": "Base currency to quote currency rate",
          "type": "number"
        },
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-currency-extension-interface"
        },
        "global_currency_code": {
          "description": "Global currency code",
          "type": "string"
        },
        "quote_currency_code": {
          "description": "Quote currency code",
          "type": "string"
        },
        "store_currency_code": {
          "description": "Store currency code",
          "type": "string"
        },
        "store_to_base_rate": {
          "description": "Store currency to base currency rate",
          "type": "number"
        },
        "store_to_quote_rate": {
          "description": "Store currency to quote currency rate",
          "type": "number"
        }
      },
      "type": "object"
    },
    "quote-data-payment-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\PaymentInterface",
      "properties": {
        "agreement_ids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "quote-data-payment-interface": {
      "description": "Interface PaymentInterface",
      "properties": {
        "additional_data": {
          "description": "Payment additional details",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-payment-extension-interface"
        },
        "method": {
          "description": "Payment method code",
          "type": "string"
        },
        "po_number": {
          "description": "Purchase order number",
          "type": "string"
        }
      },
      "required": [
        "method"
      ],
      "type": "object"
    },
    "quote-data-payment-method-interface": {
      "description": "Interface PaymentMethodInterface",
      "properties": {
        "code": {
          "description": "Payment method code",
          "type": "string"
        },
        "title": {
          "description": "Payment method title",
          "type": "string"
        }
      },
      "required": [
        "code",
        "title"
      ],
      "type": "object"
    },
    "quote-data-product-option-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\ProductOptionInterface",
      "properties": {
        "bundle_options": {
          "items": {
            "$ref": "#/definitions/bundle-data-bundle-option-interface"
          },
          "type": "array"
        },
        "configurable_item_options": {
          "items": {
            "$ref": "#/definitions/configurable-product-data-configurable-item-option-value-interface"
          },
          "type": "array"
        },
        "custom_options": {
          "items": {
            "$ref": "#/definitions/catalog-data-custom-option-interface"
          },
          "type": "array"
        },
        "downloadable_option": {
          "$ref": "#/definitions/downloadable-data-downloadable-option-interface"
        },
        "giftcard_item_option": {
          "$ref": "#/definitions/gift-card-data-gift-card-option-interface"
        }
      },
      "type": "object"
    },
    "quote-data-product-option-interface": {
      "description": "Product option interface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-product-option-extension-interface"
        }
      },
      "type": "object"
    },
    "quote-data-shipping-assignment-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\ShippingAssignmentInterface",
      "type": "object"
    },
    "quote-data-shipping-assignment-interface": {
      "description": "Interface ShippingAssignmentInterface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-shipping-assignment-extension-interface"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/quote-data-cart-item-interface"
          },
          "type": "array"
        },
        "shipping": {
          "$ref": "#/definitions/quote-data-shipping-interface"
        }
      },
      "required": [
        "shipping",
        "items"
      ],
      "type": "object"
    },
    "quote-data-shipping-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\ShippingInterface",
      "type": "object"
    },
    "quote-data-shipping-interface": {
      "description": "Interface ShippingInterface",
      "properties": {
        "address": {
          "$ref": "#/definitions/quote-data-address-interface"
        },
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-shipping-extension-interface"
        },
        "method": {
          "description": "Shipping method",
          "type": "string"
        }
      },
      "required": [
        "address",
        "method"
      ],
      "type": "object"
    },
    "quote-data-shipping-method-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\ShippingMethodInterface",
      "type": "object"
    },
    "quote-data-shipping-method-interface": {
      "description": "Interface ShippingMethodInterface",
      "properties": {
        "amount": {
          "description": "Shipping amount in store currency.",
          "type": "number"
        },
        "available": {
          "description": "The value of the availability flag for the current shipping method.",
          "type": "boolean"
        },
        "base_amount": {
          "description": "Shipping amount in base currency.",
          "type": "number"
        },
        "carrier_code": {
          "description": "Shipping carrier code.",
          "type": "string"
        },
        "carrier_title": {
          "description": "Shipping carrier title. Otherwise, null.",
          "type": "string"
        },
        "error_message": {
          "description": "Shipping Error message.",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-shipping-method-extension-interface"
        },
        "method_code": {
          "description": "Shipping method code.",
          "type": "string"
        },
        "method_title": {
          "description": "Shipping method title. Otherwise, null.",
          "type": "string"
        },
        "price_excl_tax": {
          "description": "Shipping price excl tax.",
          "type": "number"
        },
        "price_incl_tax": {
          "description": "Shipping price incl tax.",
          "type": "number"
        }
      },
      "required": [
        "carrier_code",
        "method_code",
        "amount",
        "base_amount",
        "available",
        "error_message",
        "price_excl_tax",
        "price_incl_tax"
      ],
      "type": "object"
    },
    "quote-data-total-segment-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\TotalSegmentInterface",
      "properties": {
        "gift_cards": {
          "type": "string"
        },
        "gw_add_card": {
          "type": "string"
        },
        "gw_allow_gift_receipt": {
          "type": "string"
        },
        "gw_base_price": {
          "type": "string"
        },
        "gw_base_price_incl_tax": {
          "type": "string"
        },
        "gw_base_tax_amount": {
          "type": "string"
        },
        "gw_card_base_price": {
          "type": "string"
        },
        "gw_card_base_price_incl_tax": {
          "type": "string"
        },
        "gw_card_base_tax_amount": {
          "type": "string"
        },
        "gw_card_price": {
          "type": "string"
        },
        "gw_card_price_incl_tax": {
          "type": "string"
        },
        "gw_card_tax_amount": {
          "type": "string"
        },
        "gw_item_ids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "gw_items_base_price": {
          "type": "string"
        },
        "gw_items_base_price_incl_tax": {
          "type": "string"
        },
        "gw_items_base_tax_amount": {
          "type": "string"
        },
        "gw_items_price": {
          "type": "string"
        },
        "gw_items_price_incl_tax": {
          "type": "string"
        },
        "gw_items_tax_amount": {
          "type": "string"
        },
        "gw_order_id": {
          "type": "string"
        },
        "gw_price": {
          "type": "string"
        },
        "gw_price_incl_tax": {
          "type": "string"
        },
        "gw_tax_amount": {
          "type": "string"
        },
        "tax_grandtotal_details": {
          "items": {
            "$ref": "#/definitions/tax-data-grand-total-details-interface"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "quote-data-total-segment-interface": {
      "description": "Interface TotalsInterface",
      "properties": {
        "area": {
          "description": "Display area code.",
          "type": "string"
        },
        "code": {
          "description": "Code",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-total-segment-extension-interface"
        },
        "title": {
          "description": "Total title",
          "type": "string"
        },
        "value": {
          "description": "Total value",
          "type": "number"
        }
      },
      "required": [
        "code",
        "value"
      ],
      "type": "object"
    },
    "quote-data-totals-additional-data-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\TotalsAdditionalDataInterface",
      "properties": {
        "gift_messages": {
          "items": {
            "$ref": "#/definitions/gift-message-data-message-interface"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "quote-data-totals-additional-data-interface": {
      "description": "Additional data for totals collection.",
      "properties": {
        "custom_attributes": {
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          },
          "type": "array"
        },
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-totals-additional-data-extension-interface"
        }
      },
      "type": "object"
    },
    "quote-data-totals-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\TotalsInterface",
      "properties": {
        "base_customer_balance_amount": {
          "type": "number"
        },
        "base_reward_currency_amount": {
          "type": "number"
        },
        "customer_balance_amount": {
          "type": "number"
        },
        "reward_currency_amount": {
          "type": "number"
        },
        "reward_points_balance": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "quote-data-totals-interface": {
      "description": "Interface TotalsInterface",
      "properties": {
        "base_currency_code": {
          "description": "Base currency code",
          "type": "string"
        },
        "base_discount_amount": {
          "description": "Discount amount in base currency",
          "type": "number"
        },
        "base_grand_total": {
          "description": "Grand total in base currency",
          "type": "number"
        },
        "base_shipping_amount": {
          "description": "Shipping amount in base currency",
          "type": "number"
        },
        "base_shipping_discount_amount": {
          "description": "Shipping discount amount in base currency",
          "type": "number"
        },
        "base_shipping_incl_tax": {
          "description": "Shipping including tax in base currency",
          "type": "number"
        },
        "base_shipping_tax_amount": {
          "description": "Shipping tax amount in base currency",
          "type": "number"
        },
        "base_subtotal": {
          "description": "Subtotal in base currency",
          "type": "number"
        },
        "base_subtotal_incl_tax": {
          "description": "Subtotal including tax in base currency",
          "type": "number"
        },
        "base_subtotal_with_discount": {
          "description": "Subtotal in base currency with applied discount",
          "type": "number"
        },
        "base_tax_amount": {
          "description": "Tax amount in base currency",
          "type": "number"
        },
        "coupon_code": {
          "description": "Applied coupon code",
          "type": "string"
        },
        "discount_amount": {
          "description": "Discount amount in quote currency",
          "type": "number"
        },
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-totals-extension-interface"
        },
        "grand_total": {
          "description": "Grand total in quote currency",
          "type": "number"
        },
        "items": {
          "description": "Totals by items",
          "items": {
            "$ref": "#/definitions/quote-data-totals-item-interface"
          },
          "type": "array"
        },
        "items_qty": {
          "description": "Items qty",
          "type": "integer"
        },
        "quote_currency_code": {
          "description": "Quote currency code",
          "type": "string"
        },
        "shipping_amount": {
          "description": "Shipping amount in quote currency",
          "type": "number"
        },
        "shipping_discount_amount": {
          "description": "Shipping discount amount in quote currency",
          "type": "number"
        },
        "shipping_incl_tax": {
          "description": "Shipping including tax in quote currency",
          "type": "number"
        },
        "shipping_tax_amount": {
          "description": "Shipping tax amount in quote currency",
          "type": "number"
        },
        "subtotal": {
          "description": "Subtotal in quote currency",
          "type": "number"
        },
        "subtotal_incl_tax": {
          "description": "Subtotal including tax in quote currency",
          "type": "number"
        },
        "subtotal_with_discount": {
          "description": "Subtotal in quote currency with applied discount",
          "type": "number"
        },
        "tax_amount": {
          "description": "Tax amount in quote currency",
          "type": "number"
        },
        "total_segments": {
          "description": "Dynamically calculated totals",
          "items": {
            "$ref": "#/definitions/quote-data-total-segment-interface"
          },
          "type": "array"
        },
        "weee_tax_applied_amount": {
          "description": "Item weee tax applied amount in quote currency.",
          "type": "number"
        }
      },
      "required": [
        "weee_tax_applied_amount",
        "total_segments"
      ],
      "type": "object"
    },
    "quote-data-totals-item-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\TotalsItemInterface",
      "type": "object"
    },
    "quote-data-totals-item-interface": {
      "description": "Interface TotalsItemInterface",
      "properties": {
        "base_discount_amount": {
          "description": "Discount amount in base currency. Otherwise, null.",
          "type": "number"
        },
        "base_price": {
          "description": "Item price in base currency.",
          "type": "number"
        },
        "base_price_incl_tax": {
          "description": "Price including tax in base currency. Otherwise, null.",
          "type": "number"
        },
        "base_row_total": {
          "description": "Row total in base currency.",
          "type": "number"
        },
        "base_row_total_incl_tax": {
          "description": "Row total including tax in base currency. Otherwise, null.",
          "type": "number"
        },
        "base_tax_amount": {
          "description": "Tax amount in base currency. Otherwise, null.",
          "type": "number"
        },
        "discount_amount": {
          "description": "Discount amount in quote currency. Otherwise, null.",
          "type": "number"
        },
        "discount_percent": {
          "description": "Discount percent. Otherwise, null.",
          "type": "number"
        },
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-totals-item-extension-interface"
        },
        "item_id": {
          "description": "Item id",
          "type": "integer"
        },
        "name": {
          "description": "Product name. Otherwise, null.",
          "type": "string"
        },
        "options": {
          "description": "Item price in quote currency.",
          "type": "string"
        },
        "price": {
          "description": "Item price in quote currency.",
          "type": "number"
        },
        "price_incl_tax": {
          "description": "Price including tax in quote currency. Otherwise, null.",
          "type": "number"
        },
        "qty": {
          "description": "Item quantity.",
          "type": "number"
        },
        "row_total": {
          "description": "Row total in quote currency.",
          "type": "number"
        },
        "row_total_incl_tax": {
          "description": "Row total including tax in quote currency. Otherwise, null.",
          "type": "number"
        },
        "row_total_with_discount": {
          "description": "Row total with discount in quote currency. Otherwise, null.",
          "type": "number"
        },
        "tax_amount": {
          "description": "Tax amount in quote currency. Otherwise, null.",
          "type": "number"
        },
        "tax_percent": {
          "description": "Tax percent. Otherwise, null.",
          "type": "number"
        },
        "weee_tax_applied": {
          "description": "Item weee tax applied in quote currency.",
          "type": "string"
        },
        "weee_tax_applied_amount": {
          "description": "Item weee tax applied amount in quote currency.",
          "type": "number"
        }
      },
      "required": [
        "item_id",
        "price",
        "base_price",
        "qty",
        "row_total",
        "base_row_total",
        "options",
        "weee_tax_applied_amount",
        "weee_tax_applied"
      ],
      "type": "object"
    },
    "rma-data-comment-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Rma\\Api\\Data\\CommentInterface",
      "type": "object"
    },
    "rma-data-comment-interface": {
      "description": "Interface CommentInterface",
      "properties": {
        "admin": {
          "description": "Is_admin",
          "type": "boolean"
        },
        "comment": {
          "description": "Comment",
          "type": "string"
        },
        "created_at": {
          "description": "Created_at",
          "type": "string"
        },
        "custom_attributes": {
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          },
          "type": "array"
        },
        "customer_notified": {
          "description": "Is_customer_notified",
          "type": "boolean"
        },
        "entity_id": {
          "description": "Entity_id",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/rma-data-comment-extension-interface"
        },
        "rma_entity_id": {
          "description": "Rma Id",
          "type": "integer"
        },
        "status": {
          "description": "Status",
          "type": "string"
        },
        "visible_on_front": {
          "description": "Is_visible_on_front",
          "type": "boolean"
        }
      },
      "required": [
        "comment",
        "rma_entity_id",
        "created_at",
        "entity_id",
        "customer_notified",
        "visible_on_front",
        "status",
        "admin"
      ],
      "type": "object"
    },
    "rma-data-comment-search-result-interface": {
      "description": "Interface CommentSearchResultInterface",
      "properties": {
        "items": {
          "description": "Rma Status History list",
          "items": {
            "$ref": "#/definitions/rma-data-comment-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "rma-data-item-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Rma\\Api\\Data\\ItemInterface",
      "type": "object"
    },
    "rma-data-item-interface": {
      "description": "Interface CategoryInterface",
      "properties": {
        "condition": {
          "description": "Condition",
          "type": "string"
        },
        "entity_id": {
          "description": "Id",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/rma-data-item-extension-interface"
        },
        "order_item_id": {
          "description": "Order_item_id",
          "type": "integer"
        },
        "qty_approved": {
          "description": "Qty_approved",
          "type": "integer"
        },
        "qty_authorized": {
          "description": "Qty_authorized",
          "type": "integer"
        },
        "qty_requested": {
          "description": "Qty_requested",
          "type": "integer"
        },
        "qty_returned": {
          "description": "Qty_returned",
          "type": "integer"
        },
        "reason": {
          "description": "Reason",
          "type": "string"
        },
        "resolution": {
          "description": "Resolution",
          "type": "string"
        },
        "rma_entity_id": {
          "description": "RMA id",
          "type": "integer"
        },
        "status": {
          "description": "Status",
          "type": "string"
        }
      },
      "required": [
        "entity_id",
        "rma_entity_id",
        "order_item_id",
        "qty_requested",
        "qty_authorized",
        "qty_approved",
        "qty_returned",
        "reason",
        "condition",
        "resolution",
        "status"
      ],
      "type": "object"
    },
    "rma-data-rma-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Rma\\Api\\Data\\RmaInterface",
      "type": "object"
    },
    "rma-data-rma-interface": {
      "description": "Interface RmaInterface",
      "properties": {
        "comments": {
          "description": "Comments list",
          "items": {
            "$ref": "#/definitions/rma-data-comment-interface"
          },
          "type": "array"
        },
        "custom_attributes": {
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          },
          "type": "array"
        },
        "customer_custom_email": {
          "description": "Customer_custom_email",
          "type": "string"
        },
        "customer_id": {
          "description": "Customer_id",
          "type": "integer"
        },
        "date_requested": {
          "description": "Date_requested",
          "type": "string"
        },
        "entity_id": {
          "description": "Entity_id",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/rma-data-rma-extension-interface"
        },
        "increment_id": {
          "description": "Entity_id",
          "type": "string"
        },
        "items": {
          "description": "Items",
          "items": {
            "$ref": "#/definitions/rma-data-item-interface"
          },
          "type": "array"
        },
        "order_id": {
          "description": "Order_id",
          "type": "integer"
        },
        "order_increment_id": {
          "description": "Order_increment_id",
          "type": "string"
        },
        "status": {
          "description": "Status",
          "type": "string"
        },
        "store_id": {
          "description": "Store_id",
          "type": "integer"
        },
        "tracks": {
          "description": "Tracks list",
          "items": {
            "$ref": "#/definitions/rma-data-track-interface"
          },
          "type": "array"
        }
      },
      "required": [
        "increment_id",
        "entity_id",
        "order_id",
        "order_increment_id",
        "store_id",
        "customer_id",
        "date_requested",
        "customer_custom_email",
        "items",
        "status",
        "comments",
        "tracks"
      ],
      "type": "object"
    },
    "rma-data-rma-search-result-interface": {
      "description": "Interface RmaSearchResultInterface",
      "properties": {
        "items": {
          "description": "Rma list",
          "items": {
            "$ref": "#/definitions/rma-data-rma-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "rma-data-track-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Rma\\Api\\Data\\TrackInterface",
      "type": "object"
    },
    "rma-data-track-interface": {
      "description": "Interface TrackInterface",
      "properties": {
        "carrier_code": {
          "description": "Carrier code",
          "type": "string"
        },
        "carrier_title": {
          "description": "Carrier title",
          "type": "string"
        },
        "entity_id": {
          "description": "Entity id",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/rma-data-track-extension-interface"
        },
        "rma_entity_id": {
          "description": "Rma entity id",
          "type": "integer"
        },
        "track_number": {
          "description": "Track number",
          "type": "string"
        }
      },
      "required": [
        "entity_id",
        "rma_entity_id",
        "track_number",
        "carrier_title",
        "carrier_code"
      ],
      "type": "object"
    },
    "rma-data-track-search-result-interface": {
      "description": "Interface TrackSearchResultInterface",
      "properties": {
        "items": {
          "description": "Rma list",
          "items": {
            "$ref": "#/definitions/rma-data-track-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "sales-data-creditmemo-comment-creation-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoCommentCreationInterface",
      "type": "object"
    },
    "sales-data-creditmemo-comment-creation-interface": {
      "description": "Interface CreditmemoCommentCreationInterface",
      "properties": {
        "comment": {
          "description": "Comment.",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-creditmemo-comment-creation-extension-interface"
        },
        "is_visible_on_front": {
          "description": "Is-visible-on-storefront flag value.",
          "type": "integer"
        }
      },
      "required": [
        "comment",
        "is_visible_on_front"
      ],
      "type": "object"
    },
    "sales-data-creditmemo-comment-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoCommentInterface",
      "type": "object"
    },
    "sales-data-creditmemo-comment-interface": {
      "description": "Credit memo comment interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases. A credit memo usually includes comments that detail why the credit memo amount was credited to the customer.",
      "properties": {
        "comment": {
          "description": "Comment.",
          "type": "string"
        },
        "created_at": {
          "description": "Created-at timestamp.",
          "type": "string"
        },
        "entity_id": {
          "description": "Credit memo ID.",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-creditmemo-comment-extension-interface"
        },
        "is_customer_notified": {
          "description": "Is-customer-notified flag value.",
          "type": "integer"
        },
        "is_visible_on_front": {
          "description": "Is-visible-on-storefront flag value.",
          "type": "integer"
        },
        "parent_id": {
          "description": "Parent ID.",
          "type": "integer"
        }
      },
      "required": [
        "comment",
        "is_customer_notified",
        "is_visible_on_front",
        "parent_id"
      ],
      "type": "object"
    },
    "sales-data-creditmemo-comment-search-result-interface": {
      "description": "Credit memo comment search result interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases. A credit memo usually includes comments that detail why the credit memo amount was credited to the customer.",
      "properties": {
        "items": {
          "description": "Array of collection items.",
          "items": {
            "$ref": "#/definitions/sales-data-creditmemo-comment-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "sales-data-creditmemo-creation-arguments-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoCreationArgumentsInterface",
      "properties": {
        "return_to_stock_items": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "sales-data-creditmemo-creation-arguments-interface": {
      "description": "Interface CreditmemoCreationArgumentsInterface",
      "properties": {
        "adjustment_negative": {
          "description": "Credit memo negative adjustment.",
          "type": "number"
        },
        "adjustment_positive": {
          "description": "Credit memo positive adjustment.",
          "type": "number"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-creditmemo-creation-arguments-extension-interface"
        },
        "shipping_amount": {
          "description": "Credit memo shipping amount.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "sales-data-creditmemo-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoInterface",
      "type": "object"
    },
    "sales-data-creditmemo-interface": {
      "description": "Credit memo interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases.",
      "properties": {
        "adjustment": {
          "description": "Credit memo adjustment.",
          "type": "number"
        },
        "adjustment_negative": {
          "description": "Credit memo negative adjustment.",
          "type": "number"
        },
        "adjustment_positive": {
          "description": "Credit memo positive adjustment.",
          "type": "number"
        },
        "base_adjustment": {
          "description": "Credit memo base adjustment.",
          "type": "number"
        },
        "base_adjustment_negative": {
          "description": "Credit memo negative base adjustment.",
          "type": "number"
        },
        "base_adjustment_positive": {
          "description": "Credit memo positive base adjustment.",
          "type": "number"
        },
        "base_currency_code": {
          "description": "Credit memo base currency code.",
          "type": "string"
        },
        "base_discount_amount": {
          "description": "Credit memo base discount amount.",
          "type": "number"
        },
        "base_discount_tax_compensation_amount": {
          "description": "Credit memo base discount tax compensation amount.",
          "type": "number"
        },
        "base_grand_total": {
          "description": "Credit memo base grand total.",
          "type": "number"
        },
        "base_shipping_amount": {
          "description": "Credit memo base shipping amount.",
          "type": "number"
        },
        "base_shipping_discount_tax_compensation_amnt": {
          "description": "Credit memo base shipping discount tax compensation amount.",
          "type": "number"
        },
        "base_shipping_incl_tax": {
          "description": "Credit memo base shipping including tax.",
          "type": "number"
        },
        "base_shipping_tax_amount": {
          "description": "Credit memo base shipping tax amount.",
          "type": "number"
        },
        "base_subtotal": {
          "description": "Credit memo base subtotal.",
          "type": "number"
        },
        "base_subtotal_incl_tax": {
          "description": "Credit memo base subtotal including tax.",
          "type": "number"
        },
        "base_tax_amount": {
          "description": "Credit memo base tax amount.",
          "type": "number"
        },
        "base_to_global_rate": {
          "description": "Credit memo base-to-global rate.",
          "type": "number"
        },
        "base_to_order_rate": {
          "description": "Credit memo base-to-order rate.",
          "type": "number"
        },
        "billing_address_id": {
          "description": "Credit memo billing address ID.",
          "type": "integer"
        },
        "comments": {
          "description": "Array of any credit memo comments. Otherwise, null.",
          "items": {
            "$ref": "#/definitions/sales-data-creditmemo-comment-interface"
          },
          "type": "array"
        },
        "created_at": {
          "description": "Credit memo created-at timestamp.",
          "type": "string"
        },
        "creditmemo_status": {
          "description": "Credit memo status.",
          "type": "integer"
        },
        "discount_amount": {
          "description": "Credit memo discount amount.",
          "type": "number"
        },
        "discount_description": {
          "description": "Credit memo discount description.",
          "type": "string"
        },
        "discount_tax_compensation_amount": {
          "description": "Credit memo discount tax compensation amount.",
          "type": "number"
        },
        "email_sent": {
          "description": "Credit memo email sent flag value.",
          "type": "integer"
        },
        "entity_id": {
          "description": "Credit memo ID.",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-creditmemo-extension-interface"
        },
        "global_currency_code": {
          "description": "Credit memo global currency code.",
          "type": "string"
        },
        "grand_total": {
          "description": "Credit memo grand total.",
          "type": "number"
        },
        "increment_id": {
          "description": "Credit memo increment ID.",
          "type": "string"
        },
        "invoice_id": {
          "description": "Credit memo invoice ID.",
          "type": "integer"
        },
        "items": {
          "description": "Array of credit memo items.",
          "items": {
            "$ref": "#/definitions/sales-data-creditmemo-item-interface"
          },
          "type": "array"
        },
        "order_currency_code": {
          "description": "Credit memo order currency code.",
          "type": "string"
        },
        "order_id": {
          "description": "Credit memo order ID.",
          "type": "integer"
        },
        "shipping_address_id": {
          "description": "Credit memo shipping address ID.",
          "type": "integer"
        },
        "shipping_amount": {
          "description": "Credit memo shipping amount.",
          "type": "number"
        },
        "shipping_discount_tax_compensation_amount": {
          "description": "Credit memo shipping discount tax compensation amount.",
          "type": "number"
        },
        "shipping_incl_tax": {
          "description": "Credit memo shipping including tax.",
          "type": "number"
        },
        "shipping_tax_amount": {
          "description": "Credit memo shipping tax amount.",
          "type": "number"
        },
        "state": {
          "description": "Credit memo state.",
          "type": "integer"
        },
        "store_currency_code": {
          "description": "Credit memo store currency code.",
          "type": "string"
        },
        "store_id": {
          "description": "Credit memo store ID.",
          "type": "integer"
        },
        "store_to_base_rate": {
          "description": "Credit memo store-to-base rate.",
          "type": "number"
        },
        "store_to_order_rate": {
          "description": "Credit memo store-to-order rate.",
          "type": "number"
        },
        "subtotal": {
          "description": "Credit memo subtotal.",
          "type": "number"
        },
        "subtotal_incl_tax": {
          "description": "Credit memo subtotal including tax.",
          "type": "number"
        },
        "tax_amount": {
          "description": "Credit memo tax amount.",
          "type": "number"
        },
        "transaction_id": {
          "description": "Credit memo transaction ID.",
          "type": "string"
        },
        "updated_at": {
          "description": "Credit memo updated-at timestamp.",
          "type": "string"
        }
      },
      "required": [
        "order_id",
        "items"
      ],
      "type": "object"
    },
    "sales-data-creditmemo-item-creation-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoItemCreationInterface",
      "type": "object"
    },
    "sales-data-creditmemo-item-creation-interface": {
      "description": "Interface CreditmemoItemCreationInterface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-creditmemo-item-creation-extension-interface"
        },
        "order_item_id": {
          "description": "Order item ID.",
          "type": "integer"
        },
        "qty": {
          "description": "Quantity.",
          "type": "number"
        }
      },
      "required": [
        "order_item_id",
        "qty"
      ],
      "type": "object"
    },
    "sales-data-creditmemo-item-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoItemInterface",
      "type": "object"
    },
    "sales-data-creditmemo-item-interface": {
      "description": "Credit memo item interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases. A credit memo item is an invoiced item for which a merchant creates a credit memo.",
      "properties": {
        "additional_data": {
          "description": "Additional data.",
          "type": "string"
        },
        "base_cost": {
          "description": "The base cost for a credit memo item.",
          "type": "number"
        },
        "base_discount_amount": {
          "description": "The base discount amount for a credit memo item.",
          "type": "number"
        },
        "base_discount_tax_compensation_amount": {
          "description": "The base discount tax compensation amount for a credit memo item.",
          "type": "number"
        },
        "base_price": {
          "description": "The base price for a credit memo item.",
          "type": "number"
        },
        "base_price_incl_tax": {
          "description": "Base price including tax.",
          "type": "number"
        },
        "base_row_total": {
          "description": "Base row total.",
          "type": "number"
        },
        "base_row_total_incl_tax": {
          "description": "Base row total including tax.",
          "type": "number"
        },
        "base_tax_amount": {
          "description": "Base tax amount.",
          "type": "number"
        },
        "base_weee_tax_applied_amount": {
          "description": "Base WEEE tax applied amount.",
          "type": "number"
        },
        "base_weee_tax_applied_row_amnt": {
          "description": "Base WEEE tax applied row amount.",
          "type": "number"
        },
        "base_weee_tax_disposition": {
          "description": "Base WEEE tax disposition.",
          "type": "number"
        },
        "base_weee_tax_row_disposition": {
          "description": "Base WEEE tax row disposition.",
          "type": "number"
        },
        "description": {
          "description": "Description.",
          "type": "string"
        },
        "discount_amount": {
          "description": "Discount amount.",
          "type": "number"
        },
        "discount_tax_compensation_amount": {
          "description": "Discount tax compensation amount.",
          "type": "number"
        },
        "entity_id": {
          "description": "Credit memo item ID.",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-creditmemo-item-extension-interface"
        },
        "name": {
          "description": "Name.",
          "type": "string"
        },
        "order_item_id": {
          "description": "Order item ID.",
          "type": "integer"
        },
        "parent_id": {
          "description": "Parent ID.",
          "type": "integer"
        },
        "price": {
          "description": "Price.",
          "type": "number"
        },
        "price_incl_tax": {
          "description": "Price including tax.",
          "type": "number"
        },
        "product_id": {
          "description": "Product ID.",
          "type": "integer"
        },
        "qty": {
          "description": "Quantity.",
          "type": "number"
        },
        "row_total": {
          "description": "Row total.",
          "type": "number"
        },
        "row_total_incl_tax": {
          "description": "Row total including tax.",
          "type": "number"
        },
        "sku": {
          "description": "SKU.",
          "type": "string"
        },
        "tax_amount": {
          "description": "Tax amount.",
          "type": "number"
        },
        "weee_tax_applied": {
          "description": "WEEE tax applied.",
          "type": "string"
        },
        "weee_tax_applied_amount": {
          "description": "WEEE tax applied amount.",
          "type": "number"
        },
        "weee_tax_applied_row_amount": {
          "description": "WEEE tax applied row amount.",
          "type": "number"
        },
        "weee_tax_disposition": {
          "description": "WEEE tax disposition.",
          "type": "number"
        },
        "weee_tax_row_disposition": {
          "description": "WEEE tax row disposition.",
          "type": "number"
        }
      },
      "required": [
        "base_cost",
        "base_price",
        "entity_id",
        "order_item_id",
        "qty"
      ],
      "type": "object"
    },
    "sales-data-creditmemo-search-result-interface": {
      "description": "Credit memo search result interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases.",
      "properties": {
        "items": {
          "description": "Array of collection items.",
          "items": {
            "$ref": "#/definitions/sales-data-creditmemo-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "sales-data-invoice-comment-creation-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceCommentCreationInterface",
      "type": "object"
    },
    "sales-data-invoice-comment-creation-interface": {
      "description": "Interface InvoiceCommentCreationInterface",
      "properties": {
        "comment": {
          "description": "Comment.",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-invoice-comment-creation-extension-interface"
        },
        "is_visible_on_front": {
          "description": "Is-visible-on-storefront flag value.",
          "type": "integer"
        }
      },
      "required": [
        "comment",
        "is_visible_on_front"
      ],
      "type": "object"
    },
    "sales-data-invoice-comment-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceCommentInterface",
      "type": "object"
    },
    "sales-data-invoice-comment-interface": {
      "description": "Invoice comment interface. An invoice is a record of the receipt of payment for an order. An invoice can include comments that detail the invoice history.",
      "properties": {
        "comment": {
          "description": "Comment.",
          "type": "string"
        },
        "created_at": {
          "description": "Created-at timestamp.",
          "type": "string"
        },
        "entity_id": {
          "description": "Invoice ID.",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-invoice-comment-extension-interface"
        },
        "is_customer_notified": {
          "description": "Is-customer-notified flag value.",
          "type": "integer"
        },
        "is_visible_on_front": {
          "description": "Is-visible-on-storefront flag value.",
          "type": "integer"
        },
        "parent_id": {
          "description": "Parent ID.",
          "type": "integer"
        }
      },
      "required": [
        "is_customer_notified",
        "parent_id",
        "comment",
        "is_visible_on_front"
      ],
      "type": "object"
    },
    "sales-data-invoice-comment-search-result-interface": {
      "description": "Invoice comment search result interface. An invoice is a record of the receipt of payment for an order. An invoice can include comments that detail the invoice history.",
      "properties": {
        "items": {
          "description": "Array of collection items.",
          "items": {
            "$ref": "#/definitions/sales-data-invoice-comment-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "sales-data-invoice-creation-arguments-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceCreationArgumentsInterface",
      "type": "object"
    },
    "sales-data-invoice-creation-arguments-interface": {
      "description": "Interface for creation arguments for Invoice.",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-invoice-creation-arguments-extension-interface"
        }
      },
      "type": "object"
    },
    "sales-data-invoice-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceInterface",
      "properties": {
        "base_customer_balance_amount": {
          "type": "number"
        },
        "base_gift_cards_amount": {
          "type": "number"
        },
        "customer_balance_amount": {
          "type": "number"
        },
        "gift_cards_amount": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "sales-data-invoice-interface": {
      "description": "Invoice interface. An invoice is a record of the receipt of payment for an order.",
      "properties": {
        "base_currency_code": {
          "description": "Base currency code.",
          "type": "string"
        },
        "base_discount_amount": {
          "description": "Base discount amount.",
          "type": "number"
        },
        "base_discount_tax_compensation_amount": {
          "description": "Base discount tax compensation amount.",
          "type": "number"
        },
        "base_grand_total": {
          "description": "Base grand total.",
          "type": "number"
        },
        "base_shipping_amount": {
          "description": "Base shipping amount.",
          "type": "number"
        },
        "base_shipping_discount_tax_compensation_amnt": {
          "description": "Base shipping discount tax compensation amount.",
          "type": "number"
        },
        "base_shipping_incl_tax": {
          "description": "Base shipping including tax.",
          "type": "number"
        },
        "base_shipping_tax_amount": {
          "description": "Base shipping tax amount.",
          "type": "number"
        },
        "base_subtotal": {
          "description": "Base subtotal.",
          "type": "number"
        },
        "base_subtotal_incl_tax": {
          "description": "Base subtotal including tax.",
          "type": "number"
        },
        "base_tax_amount": {
          "description": "Base tax amount.",
          "type": "number"
        },
        "base_to_global_rate": {
          "description": "Base-to-global rate.",
          "type": "number"
        },
        "base_to_order_rate": {
          "description": "Base-to-order rate.",
          "type": "number"
        },
        "base_total_refunded": {
          "description": "Base total refunded.",
          "type": "number"
        },
        "billing_address_id": {
          "description": "Billing address ID.",
          "type": "integer"
        },
        "can_void_flag": {
          "description": "Can void flag value.",
          "type": "integer"
        },
        "comments": {
          "description": "Array of any invoice comments. Otherwise, null.",
          "items": {
            "$ref": "#/definitions/sales-data-invoice-comment-interface"
          },
          "type": "array"
        },
        "created_at": {
          "description": "Created-at timestamp.",
          "type": "string"
        },
        "discount_amount": {
          "description": "Discount amount.",
          "type": "number"
        },
        "discount_description": {
          "description": "Discount description.",
          "type": "string"
        },
        "discount_tax_compensation_amount": {
          "description": "Discount tax compensation amount.",
          "type": "number"
        },
        "email_sent": {
          "description": "Email-sent flag value.",
          "type": "integer"
        },
        "entity_id": {
          "description": "Invoice ID.",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-invoice-extension-interface"
        },
        "global_currency_code": {
          "description": "Global currency code.",
          "type": "string"
        },
        "grand_total": {
          "description": "Grand total.",
          "type": "number"
        },
        "increment_id": {
          "description": "Increment ID.",
          "type": "string"
        },
        "is_used_for_refund": {
          "description": "Is-used-for-refund flag value.",
          "type": "integer"
        },
        "items": {
          "description": "Array of invoice items.",
          "items": {
            "$ref": "#/definitions/sales-data-invoice-item-interface"
          },
          "type": "array"
        },
        "order_currency_code": {
          "description": "Order currency code.",
          "type": "string"
        },
        "order_id": {
          "description": "Order ID.",
          "type": "integer"
        },
        "shipping_address_id": {
          "description": "Shipping address ID.",
          "type": "integer"
        },
        "shipping_amount": {
          "description": "Shipping amount.",
          "type": "number"
        },
        "shipping_discount_tax_compensation_amount": {
          "description": "Shipping discount tax compensation amount.",
          "type": "number"
        },
        "shipping_incl_tax": {
          "description": "Shipping including tax.",
          "type": "number"
        },
        "shipping_tax_amount": {
          "description": "Shipping tax amount.",
          "type": "number"
        },
        "state": {
          "description": "State.",
          "type": "integer"
        },
        "store_currency_code": {
          "description": "Store currency code.",
          "type": "string"
        },
        "store_id": {
          "description": "Store ID.",
          "type": "integer"
        },
        "store_to_base_rate": {
          "description": "Store-to-base rate.",
          "type": "number"
        },
        "store_to_order_rate": {
          "description": "Store-to-order rate.",
          "type": "number"
        },
        "subtotal": {
          "description": "Subtotal.",
          "type": "number"
        },
        "subtotal_incl_tax": {
          "description": "Subtotal including tax.",
          "type": "number"
        },
        "tax_amount": {
          "description": "Tax amount.",
          "type": "number"
        },
        "total_qty": {
          "description": "Total quantity.",
          "type": "number"
        },
        "transaction_id": {
          "description": "Transaction ID.",
          "type": "string"
        },
        "updated_at": {
          "description": "Updated-at timestamp.",
          "type": "string"
        }
      },
      "required": [
        "order_id",
        "total_qty",
        "items"
      ],
      "type": "object"
    },
    "sales-data-invoice-item-creation-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceItemCreationInterface",
      "type": "object"
    },
    "sales-data-invoice-item-creation-interface": {
      "description": "Input argument for invoice creation Interface InvoiceItemCreationInterface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-invoice-item-creation-extension-interface"
        },
        "order_item_id": {
          "description": "Order item ID.",
          "type": "integer"
        },
        "qty": {
          "description": "Quantity.",
          "type": "number"
        }
      },
      "required": [
        "order_item_id",
        "qty"
      ],
      "type": "object"
    },
    "sales-data-invoice-item-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceItemInterface",
      "type": "object"
    },
    "sales-data-invoice-item-interface": {
      "description": "Invoice item interface. An invoice is a record of the receipt of payment for an order. An invoice item is a purchased item in an invoice.",
      "properties": {
        "additional_data": {
          "description": "Additional data.",
          "type": "string"
        },
        "base_cost": {
          "description": "Base cost.",
          "type": "number"
        },
        "base_discount_amount": {
          "description": "Base discount amount.",
          "type": "number"
        },
        "base_discount_tax_compensation_amount": {
          "description": "Base discount tax compensation amount.",
          "type": "number"
        },
        "base_price": {
          "description": "Base price.",
          "type": "number"
        },
        "base_price_incl_tax": {
          "description": "Base price including tax.",
          "type": "number"
        },
        "base_row_total": {
          "description": "Base row total.",
          "type": "number"
        },
        "base_row_total_incl_tax": {
          "description": "Base row total including tax.",
          "type": "number"
        },
        "base_tax_amount": {
          "description": "Base tax amount.",
          "type": "number"
        },
        "description": {
          "description": "Description.",
          "type": "string"
        },
        "discount_amount": {
          "description": "Discount amount.",
          "type": "number"
        },
        "discount_tax_compensation_amount": {
          "description": "Discount tax compensation amount.",
          "type": "number"
        },
        "entity_id": {
          "description": "Invoice item ID.",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-invoice-item-extension-interface"
        },
        "name": {
          "description": "Name.",
          "type": "string"
        },
        "order_item_id": {
          "description": "Order item ID.",
          "type": "integer"
        },
        "parent_id": {
          "description": "Parent ID.",
          "type": "integer"
        },
        "price": {
          "description": "Price.",
          "type": "number"
        },
        "price_incl_tax": {
          "description": "Price including tax.",
          "type": "number"
        },
        "product_id": {
          "description": "Product ID.",
          "type": "integer"
        },
        "qty": {
          "description": "Quantity.",
          "type": "number"
        },
        "row_total": {
          "description": "Row total.",
          "type": "number"
        },
        "row_total_incl_tax": {
          "description": "Row total including tax.",
          "type": "number"
        },
        "sku": {
          "description": "SKU.",
          "type": "string"
        },
        "tax_amount": {
          "description": "Tax amount.",
          "type": "number"
        }
      },
      "required": [
        "sku",
        "order_item_id",
        "qty"
      ],
      "type": "object"
    },
    "sales-data-invoice-search-result-interface": {
      "description": "Invoice search result interface. An invoice is a record of the receipt of payment for an order.",
      "properties": {
        "items": {
          "description": "Array of collection items.",
          "items": {
            "$ref": "#/definitions/sales-data-invoice-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "sales-data-order-address-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\OrderAddressInterface",
      "type": "object"
    },
    "sales-data-order-address-interface": {
      "description": "Order address interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
      "properties": {
        "address_type": {
          "description": "Address type.",
          "type": "string"
        },
        "city": {
          "description": "City.",
          "type": "string"
        },
        "company": {
          "description": "Company.",
          "type": "string"
        },
        "country_id": {
          "description": "Country ID.",
          "type": "string"
        },
        "customer_address_id": {
          "description": "Country address ID.",
          "type": "integer"
        },
        "customer_id": {
          "description": "Customer ID.",
          "type": "integer"
        },
        "email": {
          "description": "Email address.",
          "type": "string"
        },
        "entity_id": {
          "description": "Order address ID.",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-order-address-extension-interface"
        },
        "fax": {
          "description": "Fax number.",
          "type": "string"
        },
        "firstname": {
          "description": "First name.",
          "type": "string"
        },
        "lastname": {
          "description": "Last name.",
          "type": "string"
        },
        "middlename": {
          "description": "Middle name.",
          "type": "string"
        },
        "parent_id": {
          "description": "Parent ID.",
          "type": "integer"
        },
        "postcode": {
          "description": "Postal code.",
          "type": "string"
        },
        "prefix": {
          "description": "Prefix.",
          "type": "string"
        },
        "region": {
          "description": "Region.",
          "type": "string"
        },
        "region_code": {
          "description": "Region code.",
          "type": "string"
        },
        "region_id": {
          "description": "Region ID.",
          "type": "integer"
        },
        "street": {
          "description": "Array of any street values. Otherwise, null.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "suffix": {
          "description": "Suffix.",
          "type": "string"
        },
        "telephone": {
          "description": "Telephone number.",
          "type": "string"
        },
        "vat_id": {
          "description": "VAT ID.",
          "type": "string"
        },
        "vat_is_valid": {
          "description": "VAT-is-valid flag value.",
          "type": "integer"
        },
        "vat_request_date": {
          "description": "VAT request date.",
          "type": "string"
        },
        "vat_request_id": {
          "description": "VAT request ID.",
          "type": "string"
        },
        "vat_request_success": {
          "description": "VAT-request-success flag value.",
          "type": "integer"
        }
      },
      "required": [
        "address_type",
        "city",
        "country_id",
        "firstname",
        "lastname",
        "postcode",
        "telephone"
      ],
      "type": "object"
    },
    "sales-data-order-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\OrderInterface",
      "properties": {
        "applied_taxes": {
          "items": {
            "$ref": "#/definitions/tax-data-order-tax-details-applied-tax-interface"
          },
          "type": "array"
        },
        "base_customer_balance_amount": {
          "type": "number"
        },
        "converting_from_quote": {
          "type": "boolean"
        },
        "customer_balance_amount": {
          "type": "number"
        },
        "gift_message": {
          "$ref": "#/definitions/gift-message-data-message-interface"
        },
        "gw_add_card": {
          "type": "string"
        },
        "gw_allow_gift_receipt": {
          "type": "string"
        },
        "gw_base_price": {
          "type": "string"
        },
        "gw_base_price_incl_tax": {
          "type": "string"
        },
        "gw_base_tax_amount": {
          "type": "string"
        },
        "gw_card_base_price": {
          "type": "string"
        },
        "gw_card_base_price_incl_tax": {
          "type": "string"
        },
        "gw_card_base_tax_amount": {
          "type": "string"
        },
        "gw_card_price": {
          "type": "string"
        },
        "gw_card_price_incl_tax": {
          "type": "string"
        },
        "gw_card_tax_amount": {
          "type": "string"
        },
        "gw_id": {
          "type": "string"
        },
        "gw_items_base_price": {
          "type": "string"
        },
        "gw_items_base_price_incl_tax": {
          "type": "string"
        },
        "gw_items_base_tax_amount": {
          "type": "string"
        },
        "gw_items_price": {
          "type": "string"
        },
        "gw_items_price_incl_tax": {
          "type": "string"
        },
        "gw_items_tax_amount": {
          "type": "string"
        },
        "gw_price": {
          "type": "string"
        },
        "gw_price_incl_tax": {
          "type": "string"
        },
        "gw_tax_amount": {
          "type": "string"
        },
        "item_applied_taxes": {
          "items": {
            "$ref": "#/definitions/tax-data-order-tax-details-item-interface"
          },
          "type": "array"
        },
        "shipping_assignments": {
          "items": {
            "$ref": "#/definitions/sales-data-shipping-assignment-interface"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "sales-data-order-interface": {
      "description": "Order interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
      "properties": {
        "adjustment_negative": {
          "description": "Negative adjustment value.",
          "type": "number"
        },
        "adjustment_positive": {
          "description": "Positive adjustment value.",
          "type": "number"
        },
        "applied_rule_ids": {
          "description": "Applied rule IDs.",
          "type": "string"
        },
        "base_adjustment_negative": {
          "description": "Base negative adjustment value.",
          "type": "number"
        },
        "base_adjustment_positive": {
          "description": "Base positive adjustment value.",
          "type": "number"
        },
        "base_currency_code": {
          "description": "Base currency code.",
          "type": "string"
        },
        "base_discount_amount": {
          "description": "Base discount amount.",
          "type": "number"
        },
        "base_discount_canceled": {
          "description": "Base discount canceled.",
          "type": "number"
        },
        "base_discount_invoiced": {
          "description": "Base discount invoiced.",
          "type": "number"
        },
        "base_discount_refunded": {
          "description": "Base discount refunded.",
          "type": "number"
        },
        "base_discount_tax_compensation_amount": {
          "description": "Base discount tax compensation amount.",
          "type": "number"
        },
        "base_discount_tax_compensation_invoiced": {
          "description": "Base discount tax compensation invoiced.",
          "type": "number"
        },
        "base_discount_tax_compensation_refunded": {
          "description": "Base discount tax compensation refunded.",
          "type": "number"
        },
        "base_grand_total": {
          "description": "Base grand total.",
          "type": "number"
        },
        "base_shipping_amount": {
          "description": "Base shipping amount.",
          "type": "number"
        },
        "base_shipping_canceled": {
          "description": "Base shipping canceled.",
          "type": "number"
        },
        "base_shipping_discount_amount": {
          "description": "Base shipping discount amount.",
          "type": "number"
        },
        "base_shipping_discount_tax_compensation_amnt": {
          "description": "Base shipping discount tax compensation amount.",
          "type": "number"
        },
        "base_shipping_incl_tax": {
          "description": "Base shipping including tax.",
          "type": "number"
        },
        "base_shipping_invoiced": {
          "description": "Base shipping invoiced.",
          "type": "number"
        },
        "base_shipping_refunded": {
          "description": "Base shipping refunded.",
          "type": "number"
        },
        "base_shipping_tax_amount": {
          "description": "Base shipping tax amount.",
          "type": "number"
        },
        "base_shipping_tax_refunded": {
          "description": "Base shipping tax refunded.",
          "type": "number"
        },
        "base_subtotal": {
          "description": "Base subtotal.",
          "type": "number"
        },
        "base_subtotal_canceled": {
          "description": "Base subtotal canceled.",
          "type": "number"
        },
        "base_subtotal_incl_tax": {
          "description": "Base subtotal including tax.",
          "type": "number"
        },
        "base_subtotal_invoiced": {
          "description": "Base subtotal invoiced.",
          "type": "number"
        },
        "base_subtotal_refunded": {
          "description": "Base subtotal refunded.",
          "type": "number"
        },
        "base_tax_amount": {
          "description": "Base tax amount.",
          "type": "number"
        },
        "base_tax_canceled": {
          "description": "Base tax canceled.",
          "type": "number"
        },
        "base_tax_invoiced": {
          "description": "Base tax invoiced.",
          "type": "number"
        },
        "base_tax_refunded": {
          "description": "Base tax refunded.",
          "type": "number"
        },
        "base_to_global_rate": {
          "description": "Base-to-global rate.",
          "type": "number"
        },
        "base_to_order_rate": {
          "description": "Base-to-order rate.",
          "type": "number"
        },
        "base_total_canceled": {
          "description": "Base total canceled.",
          "type": "number"
        },
        "base_total_due": {
          "description": "Base total due.",
          "type": "number"
        },
        "base_total_invoiced": {
          "description": "Base total invoiced.",
          "type": "number"
        },
        "base_total_invoiced_cost": {
          "description": "Base total invoiced cost.",
          "type": "number"
        },
        "base_total_offline_refunded": {
          "description": "Base total offline refunded.",
          "type": "number"
        },
        "base_total_online_refunded": {
          "description": "Base total online refunded.",
          "type": "number"
        },
        "base_total_paid": {
          "description": "Base total paid.",
          "type": "number"
        },
        "base_total_qty_ordered": {
          "description": "Base total quantity ordered.",
          "type": "number"
        },
        "base_total_refunded": {
          "description": "Base total refunded.",
          "type": "number"
        },
        "billing_address": {
          "$ref": "#/definitions/sales-data-order-address-interface"
        },
        "billing_address_id": {
          "description": "Billing address ID.",
          "type": "integer"
        },
        "can_ship_partially": {
          "description": "Can-ship-partially flag value.",
          "type": "integer"
        },
        "can_ship_partially_item": {
          "description": "Can-ship-partially-item flag value.",
          "type": "integer"
        },
        "coupon_code": {
          "description": "Coupon code.",
          "type": "string"
        },
        "created_at": {
          "description": "Created-at timestamp.",
          "type": "string"
        },
        "customer_dob": {
          "description": "Customer date-of-birth (DOB).",
          "type": "string"
        },
        "customer_email": {
          "description": "Customer email address.",
          "type": "string"
        },
        "customer_firstname": {
          "description": "Customer first name.",
          "type": "string"
        },
        "customer_gender": {
          "description": "Customer gender.",
          "type": "integer"
        },
        "customer_group_id": {
          "description": "Customer group ID.",
          "type": "integer"
        },
        "customer_id": {
          "description": "Customer ID.",
          "type": "integer"
        },
        "customer_is_guest": {
          "description": "Customer-is-guest flag value.",
          "type": "integer"
        },
        "customer_lastname": {
          "description": "Customer last name.",
          "type": "string"
        },
        "customer_middlename": {
          "description": "Customer middle name.",
          "type": "string"
        },
        "customer_note": {
          "description": "Customer note.",
          "type": "string"
        },
        "customer_note_notify": {
          "description": "Customer-note-notify flag value.",
          "type": "integer"
        },
        "customer_prefix": {
          "description": "Customer prefix.",
          "type": "string"
        },
        "customer_suffix": {
          "description": "Customer suffix.",
          "type": "string"
        },
        "customer_taxvat": {
          "description": "Customer value-added tax (VAT).",
          "type": "string"
        },
        "discount_amount": {
          "description": "Discount amount.",
          "type": "number"
        },
        "discount_canceled": {
          "description": "Discount canceled.",
          "type": "number"
        },
        "discount_description": {
          "description": "Discount description.",
          "type": "string"
        },
        "discount_invoiced": {
          "description": "Discount invoiced.",
          "type": "number"
        },
        "discount_refunded": {
          "description": "Discount refunded amount.",
          "type": "number"
        },
        "discount_tax_compensation_amount": {
          "description": "Discount tax compensation amount.",
          "type": "number"
        },
        "discount_tax_compensation_invoiced": {
          "description": "Discount tax compensation invoiced amount.",
          "type": "number"
        },
        "discount_tax_compensation_refunded": {
          "description": "Discount tax compensation refunded amount.",
          "type": "number"
        },
        "edit_increment": {
          "description": "Edit increment value.",
          "type": "integer"
        },
        "email_sent": {
          "description": "Email-sent flag value.",
          "type": "integer"
        },
        "entity_id": {
          "description": "Order ID.",
          "type": "integer"
        },
        "ext_customer_id": {
          "description": "External customer ID.",
          "type": "string"
        },
        "ext_order_id": {
          "description": "External order ID.",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-order-extension-interface"
        },
        "forced_shipment_with_invoice": {
          "description": "Forced-shipment-with-invoice flag value.",
          "type": "integer"
        },
        "global_currency_code": {
          "description": "Global currency code.",
          "type": "string"
        },
        "grand_total": {
          "description": "Grand total.",
          "type": "number"
        },
        "hold_before_state": {
          "description": "Hold before state.",
          "type": "string"
        },
        "hold_before_status": {
          "description": "Hold before status.",
          "type": "string"
        },
        "increment_id": {
          "description": "Increment ID.",
          "type": "string"
        },
        "is_virtual": {
          "description": "Is-virtual flag value.",
          "type": "integer"
        },
        "items": {
          "description": "Array of items.",
          "items": {
            "$ref": "#/definitions/sales-data-order-item-interface"
          },
          "type": "array"
        },
        "order_currency_code": {
          "description": "Order currency code.",
          "type": "string"
        },
        "original_increment_id": {
          "description": "Original increment ID.",
          "type": "string"
        },
        "payment": {
          "$ref": "#/definitions/sales-data-order-payment-interface"
        },
        "payment_auth_expiration": {
          "description": "Payment authorization expiration date.",
          "type": "integer"
        },
        "payment_authorization_amount": {
          "description": "Payment authorization amount.",
          "type": "number"
        },
        "protect_code": {
          "description": "Protect code.",
          "type": "string"
        },
        "quote_address_id": {
          "description": "Quote address ID.",
          "type": "integer"
        },
        "quote_id": {
          "description": "Quote ID.",
          "type": "integer"
        },
        "relation_child_id": {
          "description": "Relation child ID.",
          "type": "string"
        },
        "relation_child_real_id": {
          "description": "Relation child real ID.",
          "type": "string"
        },
        "relation_parent_id": {
          "description": "Relation parent ID.",
          "type": "string"
        },
        "relation_parent_real_id": {
          "description": "Relation parent real ID.",
          "type": "string"
        },
        "remote_ip": {
          "description": "Remote IP address.",
          "type": "string"
        },
        "shipping_amount": {
          "description": "Shipping amount.",
          "type": "number"
        },
        "shipping_canceled": {
          "description": "Shipping canceled amount.",
          "type": "number"
        },
        "shipping_description": {
          "description": "Shipping description.",
          "type": "string"
        },
        "shipping_discount_amount": {
          "description": "Shipping discount amount.",
          "type": "number"
        },
        "shipping_discount_tax_compensation_amount": {
          "description": "Shipping discount tax compensation amount.",
          "type": "number"
        },
        "shipping_incl_tax": {
          "description": "Shipping including tax amount.",
          "type": "number"
        },
        "shipping_invoiced": {
          "description": "Shipping invoiced amount.",
          "type": "number"
        },
        "shipping_refunded": {
          "description": "Shipping refunded amount.",
          "type": "number"
        },
        "shipping_tax_amount": {
          "description": "Shipping tax amount.",
          "type": "number"
        },
        "shipping_tax_refunded": {
          "description": "Shipping tax refunded amount.",
          "type": "number"
        },
        "state": {
          "description": "State.",
          "type": "string"
        },
        "status": {
          "description": "Status.",
          "type": "string"
        },
        "status_histories": {
          "description": "Array of status histories.",
          "items": {
            "$ref": "#/definitions/sales-data-order-status-history-interface"
          },
          "type": "array"
        },
        "store_currency_code": {
          "description": "Store currency code.",
          "type": "string"
        },
        "store_id": {
          "description": "Store ID.",
          "type": "integer"
        },
        "store_name": {
          "description": "Store name.",
          "type": "string"
        },
        "store_to_base_rate": {
          "description": "Store-to-base rate.",
          "type": "number"
        },
        "store_to_order_rate": {
          "description": "Store-to-order rate.",
          "type": "number"
        },
        "subtotal": {
          "description": "Subtotal.",
          "type": "number"
        },
        "subtotal_canceled": {
          "description": "Subtotal canceled amount.",
          "type": "number"
        },
        "subtotal_incl_tax": {
          "description": "Subtotal including tax amount.",
          "type": "number"
        },
        "subtotal_invoiced": {
          "description": "Subtotal invoiced amount.",
          "type": "number"
        },
        "subtotal_refunded": {
          "description": "Subtotal refunded amount.",
          "type": "number"
        },
        "tax_amount": {
          "description": "Tax amount.",
          "type": "number"
        },
        "tax_canceled": {
          "description": "Tax canceled amount.",
          "type": "number"
        },
        "tax_invoiced": {
          "description": "Tax invoiced amount.",
          "type": "number"
        },
        "tax_refunded": {
          "description": "Tax refunded amount.",
          "type": "number"
        },
        "total_canceled": {
          "description": "Total canceled.",
          "type": "number"
        },
        "total_due": {
          "description": "Total due.",
          "type": "number"
        },
        "total_invoiced": {
          "description": "Total invoiced amount.",
          "type": "number"
        },
        "total_item_count": {
          "description": "Total item count.",
          "type": "integer"
        },
        "total_offline_refunded": {
          "description": "Total offline refunded amount.",
          "type": "number"
        },
        "total_online_refunded": {
          "description": "Total online refunded amount.",
          "type": "number"
        },
        "total_paid": {
          "description": "Total paid.",
          "type": "number"
        },
        "total_qty_ordered": {
          "description": "Total quantity ordered.",
          "type": "number"
        },
        "total_refunded": {
          "description": "Total amount refunded.",
          "type": "number"
        },
        "updated_at": {
          "description": "Updated-at timestamp.",
          "type": "string"
        },
        "weight": {
          "description": "Weight.",
          "type": "number"
        },
        "x_forwarded_for": {
          "description": "X-Forwarded-For field value.",
          "type": "string"
        }
      },
      "required": [
        "base_grand_total",
        "customer_email",
        "grand_total",
        "items"
      ],
      "type": "object"
    },
    "sales-data-order-item-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\OrderItemInterface",
      "properties": {
        "gift_message": {
          "$ref": "#/definitions/gift-message-data-message-interface"
        }
      },
      "type": "object"
    },
    "sales-data-order-item-interface": {
      "description": "Order item interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
      "properties": {
        "additional_data": {
          "description": "Additional data.",
          "type": "string"
        },
        "amount_refunded": {
          "description": "Amount refunded.",
          "type": "number"
        },
        "applied_rule_ids": {
          "description": "Applied rule IDs.",
          "type": "string"
        },
        "base_amount_refunded": {
          "description": "Base amount refunded.",
          "type": "number"
        },
        "base_cost": {
          "description": "Base cost.",
          "type": "number"
        },
        "base_discount_amount": {
          "description": "Base discount amount.",
          "type": "number"
        },
        "base_discount_invoiced": {
          "description": "Base discount invoiced.",
          "type": "number"
        },
        "base_discount_refunded": {
          "description": "Base discount refunded.",
          "type": "number"
        },
        "base_discount_tax_compensation_amount": {
          "description": "Base discount tax compensation amount.",
          "type": "number"
        },
        "base_discount_tax_compensation_invoiced": {
          "description": "Base discount tax compensation invoiced.",
          "type": "number"
        },
        "base_discount_tax_compensation_refunded": {
          "description": "Base discount tax compensation refunded.",
          "type": "number"
        },
        "base_original_price": {
          "description": "Base original price.",
          "type": "number"
        },
        "base_price": {
          "description": "Base price.",
          "type": "number"
        },
        "base_price_incl_tax": {
          "description": "Base price including tax.",
          "type": "number"
        },
        "base_row_invoiced": {
          "description": "Base row invoiced.",
          "type": "number"
        },
        "base_row_total": {
          "description": "Base row total.",
          "type": "number"
        },
        "base_row_total_incl_tax": {
          "description": "Base row total including tax.",
          "type": "number"
        },
        "base_tax_amount": {
          "description": "Base tax amount.",
          "type": "number"
        },
        "base_tax_before_discount": {
          "description": "Base tax before discount.",
          "type": "number"
        },
        "base_tax_invoiced": {
          "description": "Base tax invoiced.",
          "type": "number"
        },
        "base_tax_refunded": {
          "description": "Base tax refunded.",
          "type": "number"
        },
        "base_weee_tax_applied_amount": {
          "description": "Base WEEE tax applied amount.",
          "type": "number"
        },
        "base_weee_tax_applied_row_amnt": {
          "description": "Base WEEE tax applied row amount.",
          "type": "number"
        },
        "base_weee_tax_disposition": {
          "description": "Base WEEE tax disposition.",
          "type": "number"
        },
        "base_weee_tax_row_disposition": {
          "description": "Base WEEE tax row disposition.",
          "type": "number"
        },
        "created_at": {
          "description": "Created-at timestamp.",
          "type": "string"
        },
        "description": {
          "description": "Description.",
          "type": "string"
        },
        "discount_amount": {
          "description": "Discount amount.",
          "type": "number"
        },
        "discount_invoiced": {
          "description": "Discount invoiced.",
          "type": "number"
        },
        "discount_percent": {
          "description": "Discount percent.",
          "type": "number"
        },
        "discount_refunded": {
          "description": "Discount refunded.",
          "type": "number"
        },
        "discount_tax_compensation_amount": {
          "description": "Discount tax compensation amount.",
          "type": "number"
        },
        "discount_tax_compensation_canceled": {
          "description": "Discount tax compensation canceled.",
          "type": "number"
        },
        "discount_tax_compensation_invoiced": {
          "description": "Discount tax compensation invoiced.",
          "type": "number"
        },
        "discount_tax_compensation_refunded": {
          "description": "Discount tax compensation refunded.",
          "type": "number"
        },
        "event_id": {
          "description": "Event ID.",
          "type": "integer"
        },
        "ext_order_item_id": {
          "description": "External order item ID.",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-order-item-extension-interface"
        },
        "free_shipping": {
          "description": "Free-shipping flag value.",
          "type": "integer"
        },
        "gw_base_price": {
          "description": "GW base price.",
          "type": "number"
        },
        "gw_base_price_invoiced": {
          "description": "GW base price invoiced.",
          "type": "number"
        },
        "gw_base_price_refunded": {
          "description": "GW base price refunded.",
          "type": "number"
        },
        "gw_base_tax_amount": {
          "description": "GW base tax amount.",
          "type": "number"
        },
        "gw_base_tax_amount_invoiced": {
          "description": "GW base tax amount invoiced.",
          "type": "number"
        },
        "gw_base_tax_amount_refunded": {
          "description": "GW base tax amount refunded.",
          "type": "number"
        },
        "gw_id": {
          "description": "GW ID.",
          "type": "integer"
        },
        "gw_price": {
          "description": "GW price.",
          "type": "number"
        },
        "gw_price_invoiced": {
          "description": "GW price invoiced.",
          "type": "number"
        },
        "gw_price_refunded": {
          "description": "GW price refunded.",
          "type": "number"
        },
        "gw_tax_amount": {
          "description": "GW tax amount.",
          "type": "number"
        },
        "gw_tax_amount_invoiced": {
          "description": "GW tax amount invoiced.",
          "type": "number"
        },
        "gw_tax_amount_refunded": {
          "description": "GW tax amount refunded.",
          "type": "number"
        },
        "is_qty_decimal": {
          "description": "Is-quantity-decimal flag value.",
          "type": "integer"
        },
        "is_virtual": {
          "description": "Is-virtual flag value.",
          "type": "integer"
        },
        "item_id": {
          "description": "Item ID.",
          "type": "integer"
        },
        "locked_do_invoice": {
          "description": "Locked DO invoice flag value.",
          "type": "integer"
        },
        "locked_do_ship": {
          "description": "Locked DO ship flag value.",
          "type": "integer"
        },
        "name": {
          "description": "Name.",
          "type": "string"
        },
        "no_discount": {
          "description": "No-discount flag value.",
          "type": "integer"
        },
        "order_id": {
          "description": "Order ID.",
          "type": "integer"
        },
        "original_price": {
          "description": "Original price.",
          "type": "number"
        },
        "parent_item": {
          "$ref": "#/definitions/sales-data-order-item-interface"
        },
        "parent_item_id": {
          "description": "Parent item ID.",
          "type": "integer"
        },
        "price": {
          "description": "Price.",
          "type": "number"
        },
        "price_incl_tax": {
          "description": "Price including tax.",
          "type": "number"
        },
        "product_id": {
          "description": "Product ID.",
          "type": "integer"
        },
        "product_option": {
          "$ref": "#/definitions/catalog-data-product-option-interface"
        },
        "product_type": {
          "description": "Product type.",
          "type": "string"
        },
        "qty_backordered": {
          "description": "Quantity backordered.",
          "type": "number"
        },
        "qty_canceled": {
          "description": "Quantity canceled.",
          "type": "number"
        },
        "qty_invoiced": {
          "description": "Quantity invoiced.",
          "type": "number"
        },
        "qty_ordered": {
          "description": "Quantity ordered.",
          "type": "number"
        },
        "qty_refunded": {
          "description": "Quantity refunded.",
          "type": "number"
        },
        "qty_returned": {
          "description": "Quantity returned.",
          "type": "number"
        },
        "qty_shipped": {
          "description": "Quantity shipped.",
          "type": "number"
        },
        "quote_item_id": {
          "description": "Quote item ID.",
          "type": "integer"
        },
        "row_invoiced": {
          "description": "Row invoiced.",
          "type": "number"
        },
        "row_total": {
          "description": "Row total.",
          "type": "number"
        },
        "row_total_incl_tax": {
          "description": "Row total including tax.",
          "type": "number"
        },
        "row_weight": {
          "description": "Row weight.",
          "type": "number"
        },
        "sku": {
          "description": "SKU.",
          "type": "string"
        },
        "store_id": {
          "description": "Store ID.",
          "type": "integer"
        },
        "tax_amount": {
          "description": "Tax amount.",
          "type": "number"
        },
        "tax_before_discount": {
          "description": "Tax before discount.",
          "type": "number"
        },
        "tax_canceled": {
          "description": "Tax canceled.",
          "type": "number"
        },
        "tax_invoiced": {
          "description": "Tax invoiced.",
          "type": "number"
        },
        "tax_percent": {
          "description": "Tax percent.",
          "type": "number"
        },
        "tax_refunded": {
          "description": "Tax refunded.",
          "type": "number"
        },
        "updated_at": {
          "description": "Updated-at timestamp.",
          "type": "string"
        },
        "weee_tax_applied": {
          "description": "WEEE tax applied.",
          "type": "string"
        },
        "weee_tax_applied_amount": {
          "description": "WEEE tax applied amount.",
          "type": "number"
        },
        "weee_tax_applied_row_amount": {
          "description": "WEEE tax applied row amount.",
          "type": "number"
        },
        "weee_tax_disposition": {
          "description": "WEEE tax disposition.",
          "type": "number"
        },
        "weee_tax_row_disposition": {
          "description": "WEEE tax row disposition.",
          "type": "number"
        },
        "weight": {
          "description": "Weight.",
          "type": "number"
        }
      },
      "required": [
        "sku"
      ],
      "type": "object"
    },
    "sales-data-order-item-search-result-interface": {
      "description": "Order item search result interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
      "properties": {
        "items": {
          "description": "Array of collection items.",
          "items": {
            "$ref": "#/definitions/sales-data-order-item-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "sales-data-order-payment-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\OrderPaymentInterface",
      "properties": {
        "vault_payment_token": {
          "$ref": "#/definitions/vault-data-payment-token-interface"
        }
      },
      "type": "object"
    },
    "sales-data-order-payment-interface": {
      "description": "Order payment interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
      "properties": {
        "account_status": {
          "description": "Account status.",
          "type": "string"
        },
        "additional_data": {
          "description": "Additional data.",
          "type": "string"
        },
        "additional_information": {
          "description": "Array of additional information.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "address_status": {
          "description": "Address status.",
          "type": "string"
        },
        "amount_authorized": {
          "description": "Amount authorized.",
          "type": "number"
        },
        "amount_canceled": {
          "description": "Amount canceled.",
          "type": "number"
        },
        "amount_ordered": {
          "description": "Amount ordered.",
          "type": "number"
        },
        "amount_paid": {
          "description": "Amount paid.",
          "type": "number"
        },
        "amount_refunded": {
          "description": "Amount refunded.",
          "type": "number"
        },
        "anet_trans_method": {
          "description": "Anet transaction method.",
          "type": "string"
        },
        "base_amount_authorized": {
          "description": "Base amount authorized.",
          "type": "number"
        },
        "base_amount_canceled": {
          "description": "Base amount canceled.",
          "type": "number"
        },
        "base_amount_ordered": {
          "description": "Base amount ordered.",
          "type": "number"
        },
        "base_amount_paid": {
          "description": "Base amount paid.",
          "type": "number"
        },
        "base_amount_paid_online": {
          "description": "Base amount paid online.",
          "type": "number"
        },
        "base_amount_refunded": {
          "description": "Base amount refunded.",
          "type": "number"
        },
        "base_amount_refunded_online": {
          "description": "Base amount refunded online.",
          "type": "number"
        },
        "base_shipping_amount": {
          "description": "Base shipping amount.",
          "type": "number"
        },
        "base_shipping_captured": {
          "description": "Base shipping captured amount.",
          "type": "number"
        },
        "base_shipping_refunded": {
          "description": "Base shipping refunded amount.",
          "type": "number"
        },
        "cc_approval": {
          "description": "Credit card approval.",
          "type": "string"
        },
        "cc_avs_status": {
          "description": "Credit card avs status.",
          "type": "string"
        },
        "cc_cid_status": {
          "description": "Credit card CID status.",
          "type": "string"
        },
        "cc_debug_request_body": {
          "description": "Credit card debug request body.",
          "type": "string"
        },
        "cc_debug_response_body": {
          "description": "Credit card debug response body.",
          "type": "string"
        },
        "cc_debug_response_serialized": {
          "description": "Credit card debug response serialized.",
          "type": "string"
        },
        "cc_exp_month": {
          "description": "Credit card expiration month.",
          "type": "string"
        },
        "cc_exp_year": {
          "description": "Credit card expiration year.",
          "type": "string"
        },
        "cc_last4": {
          "description": "Last four digits of the credit card.",
          "type": "string"
        },
        "cc_number_enc": {
          "description": "Encrypted credit card number.",
          "type": "string"
        },
        "cc_owner": {
          "description": "Credit card number.",
          "type": "string"
        },
        "cc_secure_verify": {
          "description": "Credit card secure verify.",
          "type": "string"
        },
        "cc_ss_issue": {
          "description": "Credit card SS issue.",
          "type": "string"
        },
        "cc_ss_start_month": {
          "description": "Credit card SS start month.",
          "type": "string"
        },
        "cc_ss_start_year": {
          "description": "Credit card SS start year.",
          "type": "string"
        },
        "cc_status": {
          "description": "Credit card status.",
          "type": "string"
        },
        "cc_status_description": {
          "description": "Credit card status description.",
          "type": "string"
        },
        "cc_trans_id": {
          "description": "Credit card transaction ID.",
          "type": "string"
        },
        "cc_type": {
          "description": "Credit card type.",
          "type": "string"
        },
        "echeck_account_name": {
          "description": "eCheck account name.",
          "type": "string"
        },
        "echeck_account_type": {
          "description": "eCheck account type.",
          "type": "string"
        },
        "echeck_bank_name": {
          "description": "eCheck bank name.",
          "type": "string"
        },
        "echeck_routing_number": {
          "description": "eCheck routing number.",
          "type": "string"
        },
        "echeck_type": {
          "description": "eCheck type.",
          "type": "string"
        },
        "entity_id": {
          "description": "Entity ID.",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-order-payment-extension-interface"
        },
        "last_trans_id": {
          "description": "Last transaction ID.",
          "type": "string"
        },
        "method": {
          "description": "Method.",
          "type": "string"
        },
        "parent_id": {
          "description": "Parent ID.",
          "type": "integer"
        },
        "po_number": {
          "description": "PO number.",
          "type": "string"
        },
        "protection_eligibility": {
          "description": "Protection eligibility.",
          "type": "string"
        },
        "quote_payment_id": {
          "description": "Quote payment ID.",
          "type": "integer"
        },
        "shipping_amount": {
          "description": "Shipping amount.",
          "type": "number"
        },
        "shipping_captured": {
          "description": "Shipping captured.",
          "type": "number"
        },
        "shipping_refunded": {
          "description": "Shipping refunded.",
          "type": "number"
        }
      },
      "required": [
        "account_status",
        "additional_information",
        "cc_last4",
        "method"
      ],
      "type": "object"
    },
    "sales-data-order-search-result-interface": {
      "description": "Order search result interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
      "properties": {
        "items": {
          "description": "Array of collection items.",
          "items": {
            "$ref": "#/definitions/sales-data-order-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "sales-data-order-status-history-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\OrderStatusHistoryInterface",
      "type": "object"
    },
    "sales-data-order-status-history-interface": {
      "description": "Order status history interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
      "properties": {
        "comment": {
          "description": "Comment.",
          "type": "string"
        },
        "created_at": {
          "description": "Created-at timestamp.",
          "type": "string"
        },
        "entity_id": {
          "description": "Order status history ID.",
          "type": "integer"
        },
        "entity_name": {
          "description": "Entity name.",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-order-status-history-extension-interface"
        },
        "is_customer_notified": {
          "description": "Is-customer-notified flag value.",
          "type": "integer"
        },
        "is_visible_on_front": {
          "description": "Is-visible-on-storefront flag value.",
          "type": "integer"
        },
        "parent_id": {
          "description": "Parent ID.",
          "type": "integer"
        },
        "status": {
          "description": "Status.",
          "type": "string"
        }
      },
      "required": [
        "comment",
        "is_customer_notified",
        "is_visible_on_front",
        "parent_id"
      ],
      "type": "object"
    },
    "sales-data-order-status-history-search-result-interface": {
      "description": "Order status history search result interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
      "properties": {
        "items": {
          "description": "Array of collection items.",
          "items": {
            "$ref": "#/definitions/sales-data-order-status-history-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "sales-data-shipment-comment-creation-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentCommentCreationInterface",
      "type": "object"
    },
    "sales-data-shipment-comment-creation-interface": {
      "description": "Interface ShipmentCommentCreationInterface",
      "properties": {
        "comment": {
          "description": "Comment.",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipment-comment-creation-extension-interface"
        },
        "is_visible_on_front": {
          "description": "Is-visible-on-storefront flag value.",
          "type": "integer"
        }
      },
      "required": [
        "comment",
        "is_visible_on_front"
      ],
      "type": "object"
    },
    "sales-data-shipment-comment-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentCommentInterface",
      "type": "object"
    },
    "sales-data-shipment-comment-interface": {
      "description": "Shipment comment interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package. A shipment document can contain comments.",
      "properties": {
        "comment": {
          "description": "Comment.",
          "type": "string"
        },
        "created_at": {
          "description": "Created-at timestamp.",
          "type": "string"
        },
        "entity_id": {
          "description": "Invoice ID.",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipment-comment-extension-interface"
        },
        "is_customer_notified": {
          "description": "Is-customer-notified flag value.",
          "type": "integer"
        },
        "is_visible_on_front": {
          "description": "Is-visible-on-storefront flag value.",
          "type": "integer"
        },
        "parent_id": {
          "description": "Parent ID.",
          "type": "integer"
        }
      },
      "required": [
        "is_customer_notified",
        "parent_id",
        "comment",
        "is_visible_on_front"
      ],
      "type": "object"
    },
    "sales-data-shipment-comment-search-result-interface": {
      "description": "Shipment comment search result interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package. A shipment document can contain comments.",
      "properties": {
        "items": {
          "description": "Array of collection items.",
          "items": {
            "$ref": "#/definitions/sales-data-shipment-comment-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "sales-data-shipment-creation-arguments-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentCreationArgumentsInterface",
      "type": "object"
    },
    "sales-data-shipment-creation-arguments-interface": {
      "description": "Interface for creation arguments for Shipment.",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipment-creation-arguments-extension-interface"
        }
      },
      "type": "object"
    },
    "sales-data-shipment-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentInterface",
      "type": "object"
    },
    "sales-data-shipment-interface": {
      "description": "Shipment interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package.",
      "properties": {
        "billing_address_id": {
          "description": "Billing address ID.",
          "type": "integer"
        },
        "comments": {
          "description": "Array of comments.",
          "items": {
            "$ref": "#/definitions/sales-data-shipment-comment-interface"
          },
          "type": "array"
        },
        "created_at": {
          "description": "Created-at timestamp.",
          "type": "string"
        },
        "customer_id": {
          "description": "Customer ID.",
          "type": "integer"
        },
        "email_sent": {
          "description": "Email-sent flag value.",
          "type": "integer"
        },
        "entity_id": {
          "description": "Shipment ID.",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipment-extension-interface"
        },
        "increment_id": {
          "description": "Increment ID.",
          "type": "string"
        },
        "items": {
          "description": "Array of items.",
          "items": {
            "$ref": "#/definitions/sales-data-shipment-item-interface"
          },
          "type": "array"
        },
        "order_id": {
          "description": "Order ID.",
          "type": "integer"
        },
        "packages": {
          "description": "Array of packages, if any. Otherwise, null.",
          "items": {
            "$ref": "#/definitions/sales-data-shipment-package-interface"
          },
          "type": "array"
        },
        "shipment_status": {
          "description": "Shipment status.",
          "type": "integer"
        },
        "shipping_address_id": {
          "description": "Shipping address ID.",
          "type": "integer"
        },
        "shipping_label": {
          "description": "Shipping label.",
          "type": "string"
        },
        "store_id": {
          "description": "Store ID.",
          "type": "integer"
        },
        "total_qty": {
          "description": "Total quantity.",
          "type": "number"
        },
        "total_weight": {
          "description": "Total weight.",
          "type": "number"
        },
        "tracks": {
          "description": "Array of tracks.",
          "items": {
            "$ref": "#/definitions/sales-data-shipment-track-interface"
          },
          "type": "array"
        },
        "updated_at": {
          "description": "Updated-at timestamp.",
          "type": "string"
        }
      },
      "required": [
        "order_id",
        "items",
        "tracks",
        "comments"
      ],
      "type": "object"
    },
    "sales-data-shipment-item-creation-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentItemCreationInterface",
      "type": "object"
    },
    "sales-data-shipment-item-creation-interface": {
      "description": "Input argument for shipment item creation Interface ShipmentItemCreationInterface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipment-item-creation-extension-interface"
        },
        "order_item_id": {
          "description": "Order item ID.",
          "type": "integer"
        },
        "qty": {
          "description": "Quantity.",
          "type": "number"
        }
      },
      "required": [
        "order_item_id",
        "qty"
      ],
      "type": "object"
    },
    "sales-data-shipment-item-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentItemInterface",
      "type": "object"
    },
    "sales-data-shipment-item-interface": {
      "description": "Shipment item interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package. A product is an item in a shipment.",
      "properties": {
        "additional_data": {
          "description": "Additional data.",
          "type": "string"
        },
        "description": {
          "description": "Description.",
          "type": "string"
        },
        "entity_id": {
          "description": "Shipment item ID.",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipment-item-extension-interface"
        },
        "name": {
          "description": "Name.",
          "type": "string"
        },
        "order_item_id": {
          "description": "Order item ID.",
          "type": "integer"
        },
        "parent_id": {
          "description": "Parent ID.",
          "type": "integer"
        },
        "price": {
          "description": "Price.",
          "type": "number"
        },
        "product_id": {
          "description": "Product ID.",
          "type": "integer"
        },
        "qty": {
          "description": "Quantity.",
          "type": "number"
        },
        "row_total": {
          "description": "Row total.",
          "type": "number"
        },
        "sku": {
          "description": "SKU.",
          "type": "string"
        },
        "weight": {
          "description": "Weight.",
          "type": "number"
        }
      },
      "required": [
        "order_item_id",
        "qty"
      ],
      "type": "object"
    },
    "sales-data-shipment-package-creation-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentPackageCreationInterface",
      "type": "object"
    },
    "sales-data-shipment-package-creation-interface": {
      "description": "Shipment package interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package.",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipment-package-creation-extension-interface"
        }
      },
      "type": "object"
    },
    "sales-data-shipment-package-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentPackageInterface",
      "type": "object"
    },
    "sales-data-shipment-package-interface": {
      "description": "Shipment package interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package.",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipment-package-extension-interface"
        }
      },
      "type": "object"
    },
    "sales-data-shipment-search-result-interface": {
      "description": "Shipment search result interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package.",
      "properties": {
        "items": {
          "description": "Array of collection items.",
          "items": {
            "$ref": "#/definitions/sales-data-shipment-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "sales-data-shipment-track-creation-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentTrackCreationInterface",
      "type": "object"
    },
    "sales-data-shipment-track-creation-interface": {
      "description": "Shipment Track Creation interface.",
      "properties": {
        "carrier_code": {
          "description": "Carrier code.",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipment-track-creation-extension-interface"
        },
        "title": {
          "description": "Title.",
          "type": "string"
        },
        "track_number": {
          "description": "Track number.",
          "type": "string"
        }
      },
      "required": [
        "track_number",
        "title",
        "carrier_code"
      ],
      "type": "object"
    },
    "sales-data-shipment-track-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentTrackInterface",
      "type": "object"
    },
    "sales-data-shipment-track-interface": {
      "description": "Shipment track interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package. Merchants and customers can track shipments.",
      "properties": {
        "carrier_code": {
          "description": "Carrier code.",
          "type": "string"
        },
        "created_at": {
          "description": "Created-at timestamp.",
          "type": "string"
        },
        "description": {
          "description": "Description.",
          "type": "string"
        },
        "entity_id": {
          "description": "Shipment package ID.",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipment-track-extension-interface"
        },
        "order_id": {
          "description": "The order_id for the shipment package.",
          "type": "integer"
        },
        "parent_id": {
          "description": "Parent ID.",
          "type": "integer"
        },
        "qty": {
          "description": "Quantity.",
          "type": "number"
        },
        "title": {
          "description": "Title.",
          "type": "string"
        },
        "track_number": {
          "description": "Track number.",
          "type": "string"
        },
        "updated_at": {
          "description": "Updated-at timestamp.",
          "type": "string"
        },
        "weight": {
          "description": "Weight.",
          "type": "number"
        }
      },
      "required": [
        "order_id",
        "parent_id",
        "weight",
        "qty",
        "description",
        "track_number",
        "title",
        "carrier_code"
      ],
      "type": "object"
    },
    "sales-data-shipping-assignment-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShippingAssignmentInterface",
      "type": "object"
    },
    "sales-data-shipping-assignment-interface": {
      "description": "Interface ShippingAssignmentInterface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipping-assignment-extension-interface"
        },
        "items": {
          "description": "Order items of shipping assignment",
          "items": {
            "$ref": "#/definitions/sales-data-order-item-interface"
          },
          "type": "array"
        },
        "shipping": {
          "$ref": "#/definitions/sales-data-shipping-interface"
        },
        "stock_id": {
          "description": "Stock id",
          "type": "integer"
        }
      },
      "required": [
        "shipping",
        "items"
      ],
      "type": "object"
    },
    "sales-data-shipping-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShippingInterface",
      "type": "object"
    },
    "sales-data-shipping-interface": {
      "description": "Interface ShippingInterface",
      "properties": {
        "address": {
          "$ref": "#/definitions/sales-data-order-address-interface"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipping-extension-interface"
        },
        "method": {
          "description": "Shipping method",
          "type": "string"
        },
        "total": {
          "$ref": "#/definitions/sales-data-total-interface"
        }
      },
      "type": "object"
    },
    "sales-data-total-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\TotalInterface",
      "type": "object"
    },
    "sales-data-total-interface": {
      "description": "Interface TotalInterface",
      "properties": {
        "base_shipping_amount": {
          "description": "Base shipping amount.",
          "type": "number"
        },
        "base_shipping_canceled": {
          "description": "Base shipping canceled.",
          "type": "number"
        },
        "base_shipping_discount_amount": {
          "description": "Base shipping discount amount.",
          "type": "number"
        },
        "base_shipping_discount_tax_compensation_amnt": {
          "description": "Base shipping discount tax compensation amount.",
          "type": "number"
        },
        "base_shipping_incl_tax": {
          "description": "Base shipping including tax.",
          "type": "number"
        },
        "base_shipping_invoiced": {
          "description": "Base shipping invoiced.",
          "type": "number"
        },
        "base_shipping_refunded": {
          "description": "Base shipping refunded.",
          "type": "number"
        },
        "base_shipping_tax_amount": {
          "description": "Base shipping tax amount.",
          "type": "number"
        },
        "base_shipping_tax_refunded": {
          "description": "Base shipping tax refunded.",
          "type": "number"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-total-extension-interface"
        },
        "shipping_amount": {
          "description": "Shipping amount.",
          "type": "number"
        },
        "shipping_canceled": {
          "description": "Shipping canceled amount.",
          "type": "number"
        },
        "shipping_discount_amount": {
          "description": "Shipping discount amount.",
          "type": "number"
        },
        "shipping_discount_tax_compensation_amount": {
          "description": "Shipping discount tax compensation amount.",
          "type": "number"
        },
        "shipping_incl_tax": {
          "description": "Shipping including tax amount.",
          "type": "number"
        },
        "shipping_invoiced": {
          "description": "Shipping invoiced amount.",
          "type": "number"
        },
        "shipping_refunded": {
          "description": "Shipping refunded amount.",
          "type": "number"
        },
        "shipping_tax_amount": {
          "description": "Shipping tax amount.",
          "type": "number"
        },
        "shipping_tax_refunded": {
          "description": "Shipping tax refunded amount.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "sales-data-transaction-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\TransactionInterface",
      "type": "object"
    },
    "sales-data-transaction-interface": {
      "description": "Transaction interface. A transaction is an interaction between a merchant and a customer such as a purchase, a credit, a refund, and so on.",
      "properties": {
        "additional_information": {
          "description": "Array of additional information. Otherwise, null.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "child_transactions": {
          "description": "Array of child transactions.",
          "items": {
            "$ref": "#/definitions/sales-data-transaction-interface"
          },
          "type": "array"
        },
        "created_at": {
          "description": "Created-at timestamp.",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-transaction-extension-interface"
        },
        "is_closed": {
          "description": "Is-closed flag value.",
          "type": "integer"
        },
        "order_id": {
          "description": "Order ID.",
          "type": "integer"
        },
        "parent_id": {
          "description": "The parent ID for the transaction. Otherwise, null.",
          "type": "integer"
        },
        "parent_txn_id": {
          "description": "Parent transaction business ID.",
          "type": "string"
        },
        "payment_id": {
          "description": "Payment ID.",
          "type": "integer"
        },
        "transaction_id": {
          "description": "Transaction ID.",
          "type": "integer"
        },
        "txn_id": {
          "description": "Transaction business ID.",
          "type": "string"
        },
        "txn_type": {
          "description": "Transaction type.",
          "type": "string"
        }
      },
      "required": [
        "transaction_id",
        "order_id",
        "payment_id",
        "txn_id",
        "parent_txn_id",
        "txn_type",
        "is_closed",
        "created_at",
        "child_transactions"
      ],
      "type": "object"
    },
    "sales-data-transaction-search-result-interface": {
      "description": "Transaction search result interface. A transaction is an interaction between a merchant and a customer such as a purchase, a credit, a refund, and so on.",
      "properties": {
        "items": {
          "description": "Array of collection items.",
          "items": {
            "$ref": "#/definitions/sales-data-transaction-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "sales-rule-data-condition-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\ConditionInterface",
      "type": "object"
    },
    "sales-rule-data-condition-interface": {
      "description": "Interface ConditionInterface",
      "properties": {
        "aggregator_type": {
          "description": "The aggregator type",
          "type": "string"
        },
        "attribute_name": {
          "description": "The attribute name of the condition",
          "type": "string"
        },
        "condition_type": {
          "description": "Condition type",
          "type": "string"
        },
        "conditions": {
          "description": "List of conditions",
          "items": {
            "$ref": "#/definitions/sales-rule-data-condition-interface"
          },
          "type": "array"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-rule-data-condition-extension-interface"
        },
        "operator": {
          "description": "The operator of the condition",
          "type": "string"
        },
        "value": {
          "description": "The value of the condition",
          "type": "string"
        }
      },
      "required": [
        "condition_type",
        "operator",
        "value"
      ],
      "type": "object"
    },
    "sales-rule-data-coupon-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\CouponInterface",
      "type": "object"
    },
    "sales-rule-data-coupon-generation-spec-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\CouponGenerationSpecInterface",
      "type": "object"
    },
    "sales-rule-data-coupon-generation-spec-interface": {
      "description": "CouponGenerationSpecInterface",
      "properties": {
        "delimiter": {
          "description": "The delimiter",
          "type": "string"
        },
        "delimiter_at_every": {
          "description": "The spacing where the delimiter should exist",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-rule-data-coupon-generation-spec-extension-interface"
        },
        "format": {
          "description": "Format of generated coupon code",
          "type": "string"
        },
        "length": {
          "description": "Length of coupon code",
          "type": "integer"
        },
        "prefix": {
          "description": "The prefix",
          "type": "string"
        },
        "quantity": {
          "description": "Of coupons to generate",
          "type": "integer"
        },
        "rule_id": {
          "description": "The id of the rule associated with the coupon",
          "type": "integer"
        },
        "suffix": {
          "description": "The suffix",
          "type": "string"
        }
      },
      "required": [
        "rule_id",
        "format",
        "quantity",
        "length"
      ],
      "type": "object"
    },
    "sales-rule-data-coupon-interface": {
      "description": "Interface CouponInterface",
      "properties": {
        "code": {
          "description": "Coupon code",
          "type": "string"
        },
        "coupon_id": {
          "description": "Coupon id",
          "type": "integer"
        },
        "created_at": {
          "description": "When the coupon is created",
          "type": "string"
        },
        "expiration_date": {
          "description": "Expiration date",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-rule-data-coupon-extension-interface"
        },
        "is_primary": {
          "description": "The coupon is primary coupon for the rule that it's associated with",
          "type": "boolean"
        },
        "rule_id": {
          "description": "The id of the rule associated with the coupon",
          "type": "integer"
        },
        "times_used": {
          "description": "The number of times the coupon has been used",
          "type": "integer"
        },
        "type": {
          "description": "Of coupon",
          "type": "integer"
        },
        "usage_limit": {
          "description": "Usage limit",
          "type": "integer"
        },
        "usage_per_customer": {
          "description": "Usage limit per customer",
          "type": "integer"
        }
      },
      "required": [
        "rule_id",
        "times_used",
        "is_primary"
      ],
      "type": "object"
    },
    "sales-rule-data-coupon-mass-delete-result-interface": {
      "description": "Coupon mass delete results interface.",
      "properties": {
        "failed_items": {
          "description": "List of failed items.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "missing_items": {
          "description": "List of missing items.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "failed_items",
        "missing_items"
      ],
      "type": "object"
    },
    "sales-rule-data-coupon-search-result-interface": {
      "description": "",
      "properties": {
        "items": {
          "description": "Rules.",
          "items": {
            "$ref": "#/definitions/sales-rule-data-coupon-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "sales-rule-data-rule-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\RuleInterface",
      "properties": {
        "reward_points_delta": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "sales-rule-data-rule-interface": {
      "description": "Interface RuleInterface",
      "properties": {
        "action_condition": {
          "$ref": "#/definitions/sales-rule-data-condition-interface"
        },
        "apply_to_shipping": {
          "description": "The rule applies to shipping",
          "type": "boolean"
        },
        "condition": {
          "$ref": "#/definitions/sales-rule-data-condition-interface"
        },
        "coupon_type": {
          "description": "Coupon type",
          "type": "string"
        },
        "customer_group_ids": {
          "description": "Ids of customer groups that the rule applies to",
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "description": {
          "description": "Description",
          "type": "string"
        },
        "discount_amount": {
          "description": "Discount amount",
          "type": "number"
        },
        "discount_qty": {
          "description": "Maximum qty discount is applied",
          "type": "number"
        },
        "discount_step": {
          "description": "Discount step",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-rule-data-rule-extension-interface"
        },
        "from_date": {
          "description": "The start date when the coupon is active",
          "type": "string"
        },
        "is_active": {
          "description": "The coupon is active",
          "type": "boolean"
        },
        "is_advanced": {
          "description": "Is this field needed",
          "type": "boolean"
        },
        "is_rss": {
          "description": "Whether the rule is in RSS",
          "type": "boolean"
        },
        "name": {
          "description": "Rule name",
          "type": "string"
        },
        "product_ids": {
          "description": "Product ids",
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "rule_id": {
          "description": "Rule id",
          "type": "integer"
        },
        "simple_action": {
          "description": "Simple action of the rule",
          "type": "string"
        },
        "simple_free_shipping": {
          "description": "To grant free shipping",
          "type": "string"
        },
        "sort_order": {
          "description": "Sort order",
          "type": "integer"
        },
        "stop_rules_processing": {
          "description": "To stop rule processing",
          "type": "boolean"
        },
        "store_labels": {
          "description": "Display label",
          "items": {
            "$ref": "#/definitions/sales-rule-data-rule-label-interface"
          },
          "type": "array"
        },
        "times_used": {
          "description": "How many times the rule has been used",
          "type": "integer"
        },
        "to_date": {
          "description": "The end date when the coupon is active",
          "type": "string"
        },
        "use_auto_generation": {
          "description": "To auto generate coupon",
          "type": "boolean"
        },
        "uses_per_coupon": {
          "description": "Limit of uses per coupon",
          "type": "integer"
        },
        "uses_per_customer": {
          "description": "Number of uses per customer",
          "type": "integer"
        },
        "website_ids": {
          "description": "A list of websites the rule applies to",
          "items": {
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "website_ids",
        "customer_group_ids",
        "uses_per_customer",
        "is_active",
        "stop_rules_processing",
        "is_advanced",
        "sort_order",
        "discount_amount",
        "discount_step",
        "apply_to_shipping",
        "times_used",
        "is_rss",
        "coupon_type",
        "use_auto_generation",
        "uses_per_coupon"
      ],
      "type": "object"
    },
    "sales-rule-data-rule-label-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\RuleLabelInterface",
      "type": "object"
    },
    "sales-rule-data-rule-label-interface": {
      "description": "Interface RuleLabelInterface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/sales-rule-data-rule-label-extension-interface"
        },
        "store_id": {
          "description": "StoreId",
          "type": "integer"
        },
        "store_label": {
          "description": "The label for the store",
          "type": "string"
        }
      },
      "required": [
        "store_id",
        "store_label"
      ],
      "type": "object"
    },
    "sales-rule-data-rule-search-result-interface": {
      "description": "",
      "properties": {
        "items": {
          "description": "Rules.",
          "items": {
            "$ref": "#/definitions/sales-rule-data-rule-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "store-data-group-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Store\\Api\\Data\\GroupInterface",
      "type": "object"
    },
    "store-data-group-interface": {
      "description": "Group interface",
      "properties": {
        "default_store_id": {
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/store-data-group-extension-interface"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "root_category_id": {
          "type": "integer"
        },
        "website_id": {
          "type": "integer"
        }
      },
      "required": [
        "id",
        "website_id",
        "root_category_id",
        "default_store_id",
        "name"
      ],
      "type": "object"
    },
    "store-data-store-config-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Store\\Api\\Data\\StoreConfigInterface",
      "type": "object"
    },
    "store-data-store-config-interface": {
      "description": "StoreConfig interface",
      "properties": {
        "base_currency_code": {
          "description": "Base currency code",
          "type": "string"
        },
        "base_link_url": {
          "description": "Base link URL for the store",
          "type": "string"
        },
        "base_media_url": {
          "description": "Base media URL for the store",
          "type": "string"
        },
        "base_static_url": {
          "description": "Base static URL for the store",
          "type": "string"
        },
        "base_url": {
          "description": "Base URL for the store",
          "type": "string"
        },
        "code": {
          "description": "Store code",
          "type": "string"
        },
        "default_display_currency_code": {
          "description": "Default display currency code",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/store-data-store-config-extension-interface"
        },
        "id": {
          "description": "Store id",
          "type": "integer"
        },
        "locale": {
          "description": "Store locale",
          "type": "string"
        },
        "secure_base_link_url": {
          "description": "Secure base link URL for the store",
          "type": "string"
        },
        "secure_base_media_url": {
          "description": "Secure base media URL for the store",
          "type": "string"
        },
        "secure_base_static_url": {
          "description": "Secure base static URL for the store",
          "type": "string"
        },
        "secure_base_url": {
          "description": "Secure base URL for the store",
          "type": "string"
        },
        "timezone": {
          "description": "Timezone of the store",
          "type": "string"
        },
        "website_id": {
          "description": "Website id of the store",
          "type": "integer"
        },
        "weight_unit": {
          "description": "The unit of weight",
          "type": "string"
        }
      },
      "required": [
        "id",
        "code",
        "website_id",
        "locale",
        "base_currency_code",
        "default_display_currency_code",
        "timezone",
        "weight_unit",
        "base_url",
        "base_link_url",
        "base_static_url",
        "base_media_url",
        "secure_base_url",
        "secure_base_link_url",
        "secure_base_static_url",
        "secure_base_media_url"
      ],
      "type": "object"
    },
    "store-data-store-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Store\\Api\\Data\\StoreInterface",
      "type": "object"
    },
    "store-data-store-interface": {
      "description": "Store interface",
      "properties": {
        "code": {
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/store-data-store-extension-interface"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "description": "Store name",
          "type": "string"
        },
        "store_group_id": {
          "type": "integer"
        },
        "website_id": {
          "type": "integer"
        }
      },
      "required": [
        "id",
        "code",
        "name",
        "website_id",
        "store_group_id"
      ],
      "type": "object"
    },
    "store-data-website-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Store\\Api\\Data\\WebsiteInterface",
      "type": "object"
    },
    "store-data-website-interface": {
      "description": "Website interface",
      "properties": {
        "code": {
          "type": "string"
        },
        "default_group_id": {
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/store-data-website-extension-interface"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "description": "Website name",
          "type": "string"
        }
      },
      "required": [
        "id",
        "code",
        "name",
        "default_group_id"
      ],
      "type": "object"
    },
    "tax-data-applied-tax-rate-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\AppliedTaxRateInterface",
      "type": "object"
    },
    "tax-data-applied-tax-rate-interface": {
      "description": "Applied tax rate interface.",
      "properties": {
        "code": {
          "description": "Code",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/tax-data-applied-tax-rate-extension-interface"
        },
        "percent": {
          "description": "Tax Percent",
          "type": "number"
        },
        "title": {
          "description": "Title",
          "type": "string"
        }
      },
      "type": "object"
    },
    "tax-data-grand-total-details-interface": {
      "description": "Interface GrandTotalDetailsInterface",
      "properties": {
        "amount": {
          "description": "Tax amount value",
          "type": "number"
        },
        "group_id": {
          "description": "Group identifier",
          "type": "integer"
        },
        "rates": {
          "description": "Tax rates info",
          "items": {
            "$ref": "#/definitions/tax-data-grand-total-rates-interface"
          },
          "type": "array"
        }
      },
      "required": [
        "amount",
        "rates",
        "group_id"
      ],
      "type": "object"
    },
    "tax-data-grand-total-rates-interface": {
      "description": "Interface GrandTotalRatesInterface",
      "properties": {
        "percent": {
          "description": "Tax percentage value",
          "type": "string"
        },
        "title": {
          "description": "Rate title",
          "type": "string"
        }
      },
      "required": [
        "percent",
        "title"
      ],
      "type": "object"
    },
    "tax-data-order-tax-details-applied-tax-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\OrderTaxDetailsAppliedTaxInterface",
      "properties": {
        "rates": {
          "items": {
            "$ref": "#/definitions/tax-data-applied-tax-rate-interface"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tax-data-order-tax-details-applied-tax-interface": {
      "description": "Interface OrderTaxDetailsAppliedTaxInterface",
      "properties": {
        "amount": {
          "description": "Tax amount",
          "type": "number"
        },
        "base_amount": {
          "description": "Tax amount in base currency",
          "type": "number"
        },
        "code": {
          "description": "Code",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/tax-data-order-tax-details-applied-tax-extension-interface"
        },
        "percent": {
          "description": "Tax Percent",
          "type": "number"
        },
        "title": {
          "description": "Title",
          "type": "string"
        }
      },
      "required": [
        "amount",
        "base_amount"
      ],
      "type": "object"
    },
    "tax-data-order-tax-details-item-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\OrderTaxDetailsItemInterface",
      "type": "object"
    },
    "tax-data-order-tax-details-item-interface": {
      "description": "Interface OrderTaxDetailsItemInterface",
      "properties": {
        "applied_taxes": {
          "description": "Applied taxes",
          "items": {
            "$ref": "#/definitions/tax-data-order-tax-details-applied-tax-interface"
          },
          "type": "array"
        },
        "associated_item_id": {
          "description": "Associated item id if this item is associated with another item, null otherwise",
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/tax-data-order-tax-details-item-extension-interface"
        },
        "item_id": {
          "description": "Item id if this item is a product",
          "type": "integer"
        },
        "type": {
          "description": "Type (shipping, product, weee, gift wrapping, etc)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "tax-data-tax-class-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\TaxClassInterface",
      "type": "object"
    },
    "tax-data-tax-class-interface": {
      "description": "Tax class interface.",
      "properties": {
        "class_id": {
          "description": "Tax class ID.",
          "type": "integer"
        },
        "class_name": {
          "description": "Tax class name.",
          "type": "string"
        },
        "class_type": {
          "description": "Tax class type.",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/tax-data-tax-class-extension-interface"
        }
      },
      "required": [
        "class_name",
        "class_type"
      ],
      "type": "object"
    },
    "tax-data-tax-class-search-results-interface": {
      "description": "Interface for tax class search results.",
      "properties": {
        "items": {
          "description": "Items",
          "items": {
            "$ref": "#/definitions/tax-data-tax-class-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "tax-data-tax-rate-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\TaxRateInterface",
      "type": "object"
    },
    "tax-data-tax-rate-interface": {
      "description": "Tax rate interface.",
      "properties": {
        "code": {
          "description": "Tax rate code",
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/tax-data-tax-rate-extension-interface"
        },
        "id": {
          "description": "Id",
          "type": "integer"
        },
        "rate": {
          "description": "Tax rate in percentage",
          "type": "number"
        },
        "region_name": {
          "description": "Region name",
          "type": "string"
        },
        "tax_country_id": {
          "description": "Country id",
          "type": "string"
        },
        "tax_postcode": {
          "description": "Postcode",
          "type": "string"
        },
        "tax_region_id": {
          "description": "Region id",
          "type": "integer"
        },
        "titles": {
          "description": "Tax rate titles",
          "items": {
            "$ref": "#/definitions/tax-data-tax-rate-title-interface"
          },
          "type": "array"
        },
        "zip_from": {
          "description": "Zip range from",
          "type": "integer"
        },
        "zip_is_range": {
          "description": "Zip is range",
          "type": "integer"
        },
        "zip_to": {
          "description": "Zip range to",
          "type": "integer"
        }
      },
      "required": [
        "tax_country_id",
        "rate",
        "code"
      ],
      "type": "object"
    },
    "tax-data-tax-rate-search-results-interface": {
      "description": "Interface for tax rate search results.",
      "properties": {
        "items": {
          "description": "Items",
          "items": {
            "$ref": "#/definitions/tax-data-tax-rate-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "tax-data-tax-rate-title-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\TaxRateTitleInterface",
      "type": "object"
    },
    "tax-data-tax-rate-title-interface": {
      "description": "Tax rate title interface.",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/tax-data-tax-rate-title-extension-interface"
        },
        "store_id": {
          "description": "Store id",
          "type": "string"
        },
        "value": {
          "description": "Title value",
          "type": "string"
        }
      },
      "required": [
        "store_id",
        "value"
      ],
      "type": "object"
    },
    "tax-data-tax-rule-extension-interface": {
      "description": "ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\TaxRuleInterface",
      "type": "object"
    },
    "tax-data-tax-rule-interface": {
      "description": "Tax rule interface.",
      "properties": {
        "calculate_subtotal": {
          "description": "Calculate subtotal.",
          "type": "boolean"
        },
        "code": {
          "description": "Tax rule code",
          "type": "string"
        },
        "customer_tax_class_ids": {
          "description": "Customer tax class id",
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "extension_attributes": {
          "$ref": "#/definitions/tax-data-tax-rule-extension-interface"
        },
        "id": {
          "description": "Id",
          "type": "integer"
        },
        "position": {
          "description": "Sort order.",
          "type": "integer"
        },
        "priority": {
          "description": "Priority",
          "type": "integer"
        },
        "product_tax_class_ids": {
          "description": "Product tax class id",
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "tax_rate_ids": {
          "description": "Tax rate ids",
          "items": {
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "code",
        "priority",
        "position",
        "customer_tax_class_ids",
        "product_tax_class_ids",
        "tax_rate_ids"
      ],
      "type": "object"
    },
    "tax-data-tax-rule-search-results-interface": {
      "description": "Interface for tax rule search results.",
      "properties": {
        "items": {
          "description": "Items",
          "items": {
            "$ref": "#/definitions/tax-data-tax-rule-interface"
          },
          "type": "array"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "description": "Total count.",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ],
      "type": "object"
    },
    "vault-data-payment-token-interface": {
      "description": "Gateway vault payment token interface.",
      "properties": {
        "created_at": {
          "description": "Token creation timestamp",
          "type": "string"
        },
        "customer_id": {
          "description": "Customer ID.",
          "type": "integer"
        },
        "entity_id": {
          "description": "Entity ID.",
          "type": "integer"
        },
        "expires_at": {
          "description": "Token expiration timestamp",
          "type": "string"
        },
        "gateway_token": {
          "description": "Gateway token ID",
          "type": "string"
        },
        "is_active": {
          "description": "Is active.",
          "type": "boolean"
        },
        "is_visible": {
          "description": "Is visible.",
          "type": "boolean"
        },
        "payment_method_code": {
          "description": "Payment method code",
          "type": "string"
        },
        "public_hash": {
          "description": "Public hash",
          "type": "string"
        },
        "token_details": {
          "description": "Token details",
          "type": "string"
        },
        "type": {
          "description": "Type",
          "type": "string"
        }
      },
      "required": [
        "public_hash",
        "payment_method_code",
        "type",
        "gateway_token",
        "token_details",
        "is_active",
        "is_visible"
      ],
      "type": "object"
    }
  }
}